
ESD_DHT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029ac  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b144  0800b144  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b144  0800b144  0001b144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b14c  0800b14c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b14c  0800b14c  0001b14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b150  0800b150  0001b150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  20000080  0800b1d4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  0800b1d4  000207fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017322  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307c  00000000  00000000  000373d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0003a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1b7  00000000  00000000  0003cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b46  00000000  00000000  00056d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3407  00000000  00000000  000708ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113cb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aec  00000000  00000000  00113d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008780 	.word	0x08008780

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08008780 	.word	0x08008780

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <microDelay>:
 *
 * Parameters:  delay in msec
 * Return: NULL
 */
void microDelay (uint16_t delay)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer1, 0);
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <microDelay+0x30>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer1) < delay);
 8000dd2:	bf00      	nop
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <microDelay+0x30>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d3f9      	bcc.n	8000dd4 <microDelay+0x14>
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	200001dc 	.word	0x200001dc

08000df4 <DHT11_Start>:
 *
 * Parameters:msec1 and msec2 counter for getting tickvalues to count time
 * Return:int output: 1 if start successful else 0.
 */
uint8_t DHT11_Start (void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
	int output = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
	GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e10:	603b      	str	r3, [r7, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	482d      	ldr	r0, [pc, #180]	; (8000ed8 <DHT11_Start+0xe4>)
 8000e24:	f003 f822 	bl	8003e6c <HAL_GPIO_Init>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2e:	482a      	ldr	r0, [pc, #168]	; (8000ed8 <DHT11_Start+0xe4>)
 8000e30:	f003 f9b8 	bl	80041a4 <HAL_GPIO_WritePin>
	HAL_Delay(20);   // wait for 20ms
 8000e34:	2014      	movs	r0, #20
 8000e36:	f002 fa73 	bl	8003320 <HAL_Delay>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e40:	4825      	ldr	r0, [pc, #148]	; (8000ed8 <DHT11_Start+0xe4>)
 8000e42:	f003 f9af 	bl	80041a4 <HAL_GPIO_WritePin>
	microDelay (30);   // wait for 30us
 8000e46:	201e      	movs	r0, #30
 8000e48:	f7ff ffba 	bl	8000dc0 <microDelay>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000e54:	463b      	mov	r3, r7
 8000e56:	4619      	mov	r1, r3
 8000e58:	481f      	ldr	r0, [pc, #124]	; (8000ed8 <DHT11_Start+0xe4>)
 8000e5a:	f003 f807 	bl	8003e6c <HAL_GPIO_Init>
	microDelay (40);
 8000e5e:	2028      	movs	r0, #40	; 0x28
 8000e60:	f7ff ffae 	bl	8000dc0 <microDelay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e68:	481b      	ldr	r0, [pc, #108]	; (8000ed8 <DHT11_Start+0xe4>)
 8000e6a:	f003 f983 	bl	8004174 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10c      	bne.n	8000e8e <DHT11_Start+0x9a>
	{
		microDelay (80);
 8000e74:	2050      	movs	r0, #80	; 0x50
 8000e76:	f7ff ffa3 	bl	8000dc0 <microDelay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) output = 1;
 8000e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7e:	4816      	ldr	r0, [pc, #88]	; (8000ed8 <DHT11_Start+0xe4>)
 8000e80:	f003 f978 	bl	8004174 <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <DHT11_Start+0x9a>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
	}
	msec1= HAL_GetTick(); //to get the tickvalue in msec
 8000e8e:	f002 fa3b 	bl	8003308 <HAL_GetTick>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <DHT11_Start+0xe8>)
 8000e96:	6013      	str	r3, [r2, #0]
	msec2 = HAL_GetTick();//to compare the tickvalue
 8000e98:	f002 fa36 	bl	8003308 <HAL_GetTick>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <DHT11_Start+0xec>)
 8000ea0:	6013      	str	r3, [r2, #0]
	//to wait till the pin goes low within 2 us
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && msec1 + 2 > msec2)
 8000ea2:	e004      	b.n	8000eae <DHT11_Start+0xba>
	{
		msec2 = HAL_GetTick();
 8000ea4:	f002 fa30 	bl	8003308 <HAL_GetTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <DHT11_Start+0xec>)
 8000eac:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && msec1 + 2 > msec2)
 8000eae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <DHT11_Start+0xe4>)
 8000eb4:	f003 f95e 	bl	8004174 <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <DHT11_Start+0xd8>
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <DHT11_Start+0xe8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1c9a      	adds	r2, r3, #2
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <DHT11_Start+0xec>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8eb      	bhi.n	8000ea4 <DHT11_Start+0xb0>
	}
	return output;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	b2db      	uxtb	r3, r3
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	20000108 	.word	0x20000108
 8000ee0:	2000010c 	.word	0x2000010c

08000ee4 <DHT11_Read>:
 *
 * Parameters:  msec1 and msec2 counter for getting tickvalues to count time
 * Return: NULL
 */
uint8_t DHT11_Read (void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
	uint8_t a,b;
	//to get the first 8 bits in the bus
	for (a=0;a<8;a++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e066      	b.n	8000fbe <DHT11_Read+0xda>
	{
		msec1 = HAL_GetTick();
 8000ef0:	f002 fa0a 	bl	8003308 <HAL_GetTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a36      	ldr	r2, [pc, #216]	; (8000fd0 <DHT11_Read+0xec>)
 8000ef8:	6013      	str	r3, [r2, #0]
		msec2 = HAL_GetTick();
 8000efa:	f002 fa05 	bl	8003308 <HAL_GetTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a34      	ldr	r2, [pc, #208]	; (8000fd4 <DHT11_Read+0xf0>)
 8000f02:	6013      	str	r3, [r2, #0]

		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && msec1 + 2 > msec2)
 8000f04:	e004      	b.n	8000f10 <DHT11_Read+0x2c>
		{  // wait for the pin to go high
			msec2 = HAL_GetTick();
 8000f06:	f002 f9ff 	bl	8003308 <HAL_GetTick>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a31      	ldr	r2, [pc, #196]	; (8000fd4 <DHT11_Read+0xf0>)
 8000f0e:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && msec1 + 2 > msec2)
 8000f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f14:	4830      	ldr	r0, [pc, #192]	; (8000fd8 <DHT11_Read+0xf4>)
 8000f16:	f003 f92d 	bl	8004174 <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d106      	bne.n	8000f2e <DHT11_Read+0x4a>
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <DHT11_Read+0xec>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	1c9a      	adds	r2, r3, #2
 8000f26:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <DHT11_Read+0xf0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d8eb      	bhi.n	8000f06 <DHT11_Read+0x22>
		}
		microDelay (40);   // wait for 40 us to start reading the value
 8000f2e:	2028      	movs	r0, #40	; 0x28
 8000f30:	f7ff ff46 	bl	8000dc0 <microDelay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) //if pin goes low
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	4827      	ldr	r0, [pc, #156]	; (8000fd8 <DHT11_Read+0xf4>)
 8000f3a:	f003 f91b 	bl	8004174 <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10e      	bne.n	8000f62 <DHT11_Read+0x7e>
			b&= ~(1<<(7-a)); //read the data if low means 0
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	b25a      	sxtb	r2, r3
 8000f56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	71bb      	strb	r3, [r7, #6]
 8000f60:	e00b      	b.n	8000f7a <DHT11_Read+0x96>
		else //if it goes high
			b|= (1<<(7-a));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f1c3 0307 	rsb	r3, r3, #7
 8000f68:	2201      	movs	r2, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	b25a      	sxtb	r2, r3
 8000f70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	71bb      	strb	r3, [r7, #6]
	     msec1 = HAL_GetTick();
 8000f7a:	f002 f9c5 	bl	8003308 <HAL_GetTick>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <DHT11_Read+0xec>)
 8000f82:	6013      	str	r3, [r2, #0]
		 msec2 = HAL_GetTick();
 8000f84:	f002 f9c0 	bl	8003308 <HAL_GetTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <DHT11_Read+0xf0>)
 8000f8c:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && msec1+ 2 > msec2)
 8000f8e:	e004      	b.n	8000f9a <DHT11_Read+0xb6>
		{  // wait for the pin to go low ending the first transmission
			msec2 = HAL_GetTick();
 8000f90:	f002 f9ba 	bl	8003308 <HAL_GetTick>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <DHT11_Read+0xf0>)
 8000f98:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && msec1+ 2 > msec2)
 8000f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <DHT11_Read+0xf4>)
 8000fa0:	f003 f8e8 	bl	8004174 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <DHT11_Read+0xd4>
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <DHT11_Read+0xec>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1c9a      	adds	r2, r3, #2
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <DHT11_Read+0xf0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8eb      	bhi.n	8000f90 <DHT11_Read+0xac>
	for (a=0;a<8;a++)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b07      	cmp	r3, #7
 8000fc2:	d995      	bls.n	8000ef0 <DHT11_Read+0xc>
		}
	}
	return b;
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000108 	.word	0x20000108
 8000fd4:	2000010c 	.word	0x2000010c
 8000fd8:	40020400 	.word	0x40020400

08000fdc <fan_control_dht>:
//definition in header
void fan_control_dht(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	ed2d 8b02 	vpush	{d8}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0

	while(!(TC_Int>TEMP1 && TC_Int<TEMP2 && RH_Int>20)){ //to be in loop will we get valid outputs
 8000fe6:	e071      	b.n	80010cc <fan_control_dht+0xf0>
	L1:   if(DHT11_Start()){
 8000fe8:	bf00      	nop
 8000fea:	f7ff ff03 	bl	8000df4 <DHT11_Start>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d06b      	beq.n	80010cc <fan_control_dht+0xf0>

		    RH_Int = DHT11_Read(); // Relative humidity integral
 8000ff4:	f7ff ff76 	bl	8000ee4 <DHT11_Read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4bb8      	ldr	r3, [pc, #736]	; (80012e0 <fan_control_dht+0x304>)
 8000ffe:	701a      	strb	r2, [r3, #0]
		    RH_Dec = DHT11_Read(); // Relative humidity decimal
 8001000:	f7ff ff70 	bl	8000ee4 <DHT11_Read>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4bb6      	ldr	r3, [pc, #728]	; (80012e4 <fan_control_dht+0x308>)
 800100a:	701a      	strb	r2, [r3, #0]
		    TC_Int = DHT11_Read(); // Celsius integral
 800100c:	f7ff ff6a 	bl	8000ee4 <DHT11_Read>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	4bb4      	ldr	r3, [pc, #720]	; (80012e8 <fan_control_dht+0x30c>)
 8001016:	701a      	strb	r2, [r3, #0]
			TC_Dec = DHT11_Read(); // Celsius decimal
 8001018:	f7ff ff64 	bl	8000ee4 <DHT11_Read>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	4bb2      	ldr	r3, [pc, #712]	; (80012ec <fan_control_dht+0x310>)
 8001022:	701a      	strb	r2, [r3, #0]
			check_sum = DHT11_Read(); // Check sum
 8001024:	f7ff ff5e 	bl	8000ee4 <DHT11_Read>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4bb0      	ldr	r3, [pc, #704]	; (80012f0 <fan_control_dht+0x314>)
 800102e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(500);
 8001030:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001034:	f002 f974 	bl	8003320 <HAL_Delay>
			if (RH_Int + RH_Dec + TC_Int + TC_Dec == check_sum)
 8001038:	4ba9      	ldr	r3, [pc, #676]	; (80012e0 <fan_control_dht+0x304>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4ba9      	ldr	r3, [pc, #676]	; (80012e4 <fan_control_dht+0x308>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4aa8      	ldr	r2, [pc, #672]	; (80012e8 <fan_control_dht+0x30c>)
 8001046:	7812      	ldrb	r2, [r2, #0]
 8001048:	4413      	add	r3, r2
 800104a:	4aa8      	ldr	r2, [pc, #672]	; (80012ec <fan_control_dht+0x310>)
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4aa7      	ldr	r2, [pc, #668]	; (80012f0 <fan_control_dht+0x314>)
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	4293      	cmp	r3, r2
 8001056:	d1c8      	bne.n	8000fea <fan_control_dht+0xe>
			{
				// getting the whole number only needed
				Celsius = (float)TC_Int + (float)(TC_Dec/10.0);
 8001058:	4ba3      	ldr	r3, [pc, #652]	; (80012e8 <fan_control_dht+0x30c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001064:	4ba1      	ldr	r3, [pc, #644]	; (80012ec <fan_control_dht+0x310>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa5b 	bl	8000524 <__aeabi_i2d>
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4ba0      	ldr	r3, [pc, #640]	; (80012f4 <fan_control_dht+0x318>)
 8001074:	f7ff fbea 	bl	800084c <__aeabi_ddiv>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fccc 	bl	8000a1c <__aeabi_d2f>
 8001084:	ee07 0a90 	vmov	s15, r0
 8001088:	ee78 7a27 	vadd.f32	s15, s16, s15
 800108c:	4b9a      	ldr	r3, [pc, #616]	; (80012f8 <fan_control_dht+0x31c>)
 800108e:	edc3 7a00 	vstr	s15, [r3]
				Rel_Hum = (float)RH_Int + (float)(RH_Dec/10.0);
 8001092:	4b93      	ldr	r3, [pc, #588]	; (80012e0 <fan_control_dht+0x304>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800109e:	4b91      	ldr	r3, [pc, #580]	; (80012e4 <fan_control_dht+0x308>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa3e 	bl	8000524 <__aeabi_i2d>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b91      	ldr	r3, [pc, #580]	; (80012f4 <fan_control_dht+0x318>)
 80010ae:	f7ff fbcd 	bl	800084c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fcaf 	bl	8000a1c <__aeabi_d2f>
 80010be:	ee07 0a90 	vmov	s15, r0
 80010c2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80010c6:	4b8d      	ldr	r3, [pc, #564]	; (80012fc <fan_control_dht+0x320>)
 80010c8:	edc3 7a00 	vstr	s15, [r3]
	while(!(TC_Int>TEMP1 && TC_Int<TEMP2 && RH_Int>20)){ //to be in loop will we get valid outputs
 80010cc:	4b86      	ldr	r3, [pc, #536]	; (80012e8 <fan_control_dht+0x30c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d089      	beq.n	8000fe8 <fan_control_dht+0xc>
 80010d4:	4b84      	ldr	r3, [pc, #528]	; (80012e8 <fan_control_dht+0x30c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b31      	cmp	r3, #49	; 0x31
 80010da:	d885      	bhi.n	8000fe8 <fan_control_dht+0xc>
 80010dc:	4b80      	ldr	r3, [pc, #512]	; (80012e0 <fan_control_dht+0x304>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b14      	cmp	r3, #20
 80010e2:	d981      	bls.n	8000fe8 <fan_control_dht+0xc>
				goto L1; //to recollect data till it receives valid results
			}
		}
	}
//if temp integral value in the range of 0 to 50 deg C(sensor range)
	if(TC_Int>TEMP1 && TC_Int<TEMP2){
 80010e4:	4b80      	ldr	r3, [pc, #512]	; (80012e8 <fan_control_dht+0x30c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80d2 	beq.w	8001292 <fan_control_dht+0x2b6>
 80010ee:	4b7e      	ldr	r3, [pc, #504]	; (80012e8 <fan_control_dht+0x30c>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b31      	cmp	r3, #49	; 0x31
 80010f4:	f200 80cd 	bhi.w	8001292 <fan_control_dht+0x2b6>

		//printing values on OLED
          OLED_GotoXY (10,25);
 80010f8:	2119      	movs	r1, #25
 80010fa:	200a      	movs	r0, #10
 80010fc:	f001 fc5c 	bl	80029b8 <OLED_GotoXY>
          sprintf(buff,"Temp:%d deg",TC_Int);
 8001100:	4b79      	ldr	r3, [pc, #484]	; (80012e8 <fan_control_dht+0x30c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	497e      	ldr	r1, [pc, #504]	; (8001300 <fan_control_dht+0x324>)
 8001108:	487e      	ldr	r0, [pc, #504]	; (8001304 <fan_control_dht+0x328>)
 800110a:	f006 fecb 	bl	8007ea4 <siprintf>
          OLED_Puts(buff, &Font_8x10, 1);
 800110e:	2201      	movs	r2, #1
 8001110:	497d      	ldr	r1, [pc, #500]	; (8001308 <fan_control_dht+0x32c>)
 8001112:	487c      	ldr	r0, [pc, #496]	; (8001304 <fan_control_dht+0x328>)
 8001114:	f001 fce6 	bl	8002ae4 <OLED_Puts>
          sprintf(buff,"Hum:%d per ",RH_Int);
 8001118:	4b71      	ldr	r3, [pc, #452]	; (80012e0 <fan_control_dht+0x304>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	497b      	ldr	r1, [pc, #492]	; (800130c <fan_control_dht+0x330>)
 8001120:	4878      	ldr	r0, [pc, #480]	; (8001304 <fan_control_dht+0x328>)
 8001122:	f006 febf 	bl	8007ea4 <siprintf>
		  OLED_GotoXY (10,35); // goto 10, 10
 8001126:	2123      	movs	r1, #35	; 0x23
 8001128:	200a      	movs	r0, #10
 800112a:	f001 fc45 	bl	80029b8 <OLED_GotoXY>
	      OLED_Puts(buff, &Font_8x10, 1);
 800112e:	2201      	movs	r2, #1
 8001130:	4975      	ldr	r1, [pc, #468]	; (8001308 <fan_control_dht+0x32c>)
 8001132:	4874      	ldr	r0, [pc, #464]	; (8001304 <fan_control_dht+0x328>)
 8001134:	f001 fcd6 	bl	8002ae4 <OLED_Puts>
		 OLED_UpdateScreen();
 8001138:	f001 fb98 	bl	800286c <OLED_UpdateScreen>
//range1 fan speed 0%
		if (TC_Int>=TEMP1 && TC_Int<=TEMP3)
 800113c:	4b6a      	ldr	r3, [pc, #424]	; (80012e8 <fan_control_dht+0x30c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b11      	cmp	r3, #17
 8001142:	d81d      	bhi.n	8001180 <fan_control_dht+0x1a4>
		{
			PWM =0;
 8001144:	4b72      	ldr	r3, [pc, #456]	; (8001310 <fan_control_dht+0x334>)
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&timer2, TIM_CHANNEL_1,MAXPWM*PWM);
 800114c:	4b70      	ldr	r3, [pc, #448]	; (8001310 <fan_control_dht+0x334>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001314 <fan_control_dht+0x338>
 8001156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115a:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <fan_control_dht+0x33c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001162:	ee17 2a90 	vmov	r2, s15
 8001166:	635a      	str	r2, [r3, #52]	; 0x34
			OLED_GotoXY (20,8);
 8001168:	2108      	movs	r1, #8
 800116a:	2014      	movs	r0, #20
 800116c:	f001 fc24 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts("DEVICE OFF", &Font_8x10, 1);
 8001170:	2201      	movs	r2, #1
 8001172:	4965      	ldr	r1, [pc, #404]	; (8001308 <fan_control_dht+0x32c>)
 8001174:	4869      	ldr	r0, [pc, #420]	; (800131c <fan_control_dht+0x340>)
 8001176:	f001 fcb5 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 800117a:	f001 fb77 	bl	800286c <OLED_UpdateScreen>
 800117e:	e088      	b.n	8001292 <fan_control_dht+0x2b6>
		}
		//range2 fan speed 50%
		else if(TC_Int>=TEMP4 && TC_Int<=TEMP5)
 8001180:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <fan_control_dht+0x30c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b11      	cmp	r3, #17
 8001186:	d92c      	bls.n	80011e2 <fan_control_dht+0x206>
 8001188:	4b57      	ldr	r3, [pc, #348]	; (80012e8 <fan_control_dht+0x30c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b1a      	cmp	r3, #26
 800118e:	d828      	bhi.n	80011e2 <fan_control_dht+0x206>
		{
			PWM = PWMODE1;
 8001190:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <fan_control_dht+0x334>)
 8001192:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001196:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&timer2, TIM_CHANNEL_1,  MAXPWM*PWM);
 8001198:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <fan_control_dht+0x334>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001314 <fan_control_dht+0x338>
 80011a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a6:	4b5c      	ldr	r3, [pc, #368]	; (8001318 <fan_control_dht+0x33c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ae:	ee17 2a90 	vmov	r2, s15
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
			OLED_GotoXY (20,8);
 80011b4:	2108      	movs	r1, #8
 80011b6:	2014      	movs	r0, #20
 80011b8:	f001 fbfe 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts("DEVICE ON", &Font_8x10, 1);
 80011bc:	2201      	movs	r2, #1
 80011be:	4952      	ldr	r1, [pc, #328]	; (8001308 <fan_control_dht+0x32c>)
 80011c0:	4857      	ldr	r0, [pc, #348]	; (8001320 <fan_control_dht+0x344>)
 80011c2:	f001 fc8f 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 80011c6:	f001 fb51 	bl	800286c <OLED_UpdateScreen>
			OLED_GotoXY (10,45);
 80011ca:	212d      	movs	r1, #45	; 0x2d
 80011cc:	200a      	movs	r0, #10
 80011ce:	f001 fbf3 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts("Speed:NORMAL", &Font_6x10, 1);
 80011d2:	2201      	movs	r2, #1
 80011d4:	4953      	ldr	r1, [pc, #332]	; (8001324 <fan_control_dht+0x348>)
 80011d6:	4854      	ldr	r0, [pc, #336]	; (8001328 <fan_control_dht+0x34c>)
 80011d8:	f001 fc84 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 80011dc:	f001 fb46 	bl	800286c <OLED_UpdateScreen>
 80011e0:	e057      	b.n	8001292 <fan_control_dht+0x2b6>
		}
		//range3 fan speed 70 %
		else if(TC_Int>=TEMP6 && TC_Int<=TEMP7)
 80011e2:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <fan_control_dht+0x30c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b1a      	cmp	r3, #26
 80011e8:	d92b      	bls.n	8001242 <fan_control_dht+0x266>
 80011ea:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <fan_control_dht+0x30c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b20      	cmp	r3, #32
 80011f0:	d827      	bhi.n	8001242 <fan_control_dht+0x266>
		{
			PWM = PWMODE2;
 80011f2:	4b47      	ldr	r3, [pc, #284]	; (8001310 <fan_control_dht+0x334>)
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <fan_control_dht+0x350>)
 80011f6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&timer2, TIM_CHANNEL_1,  MAXPWM*PWM);
 80011f8:	4b45      	ldr	r3, [pc, #276]	; (8001310 <fan_control_dht+0x334>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001314 <fan_control_dht+0x338>
 8001202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001206:	4b44      	ldr	r3, [pc, #272]	; (8001318 <fan_control_dht+0x33c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800120e:	ee17 2a90 	vmov	r2, s15
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
			OLED_GotoXY (20,8);
 8001214:	2108      	movs	r1, #8
 8001216:	2014      	movs	r0, #20
 8001218:	f001 fbce 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts("DEVICE ON", &Font_8x10, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	493a      	ldr	r1, [pc, #232]	; (8001308 <fan_control_dht+0x32c>)
 8001220:	483f      	ldr	r0, [pc, #252]	; (8001320 <fan_control_dht+0x344>)
 8001222:	f001 fc5f 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 8001226:	f001 fb21 	bl	800286c <OLED_UpdateScreen>
			OLED_GotoXY (10,45);
 800122a:	212d      	movs	r1, #45	; 0x2d
 800122c:	200a      	movs	r0, #10
 800122e:	f001 fbc3 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts("Speed: HIGH", &Font_6x10, 1);
 8001232:	2201      	movs	r2, #1
 8001234:	493b      	ldr	r1, [pc, #236]	; (8001324 <fan_control_dht+0x348>)
 8001236:	483e      	ldr	r0, [pc, #248]	; (8001330 <fan_control_dht+0x354>)
 8001238:	f001 fc54 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 800123c:	f001 fb16 	bl	800286c <OLED_UpdateScreen>
 8001240:	e027      	b.n	8001292 <fan_control_dht+0x2b6>
		}
		//range4 fan speed 100 %
		else
		{

			PWM =PWMODE3;
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <fan_control_dht+0x334>)
 8001244:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001248:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&timer2, TIM_CHANNEL_1,  MAXPWM*PWM);
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <fan_control_dht+0x334>)
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001314 <fan_control_dht+0x338>
 8001254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <fan_control_dht+0x33c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001260:	ee17 2a90 	vmov	r2, s15
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
			OLED_GotoXY (20,8);
 8001266:	2108      	movs	r1, #8
 8001268:	2014      	movs	r0, #20
 800126a:	f001 fba5 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts("DEVICE ON", &Font_8x10, 1);
 800126e:	2201      	movs	r2, #1
 8001270:	4925      	ldr	r1, [pc, #148]	; (8001308 <fan_control_dht+0x32c>)
 8001272:	482b      	ldr	r0, [pc, #172]	; (8001320 <fan_control_dht+0x344>)
 8001274:	f001 fc36 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 8001278:	f001 faf8 	bl	800286c <OLED_UpdateScreen>
			OLED_GotoXY (10,45);
 800127c:	212d      	movs	r1, #45	; 0x2d
 800127e:	200a      	movs	r0, #10
 8001280:	f001 fb9a 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts("Speed: MAX", &Font_6x10, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	4927      	ldr	r1, [pc, #156]	; (8001324 <fan_control_dht+0x348>)
 8001288:	482a      	ldr	r0, [pc, #168]	; (8001334 <fan_control_dht+0x358>)
 800128a:	f001 fc2b 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 800128e:	f001 faed 	bl	800286c <OLED_UpdateScreen>


		}}
	//to print fanspeed level
		int level=PWM*100;
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <fan_control_dht+0x334>)
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001338 <fan_control_dht+0x35c>
 800129c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a4:	ee17 3a90 	vmov	r3, s15
 80012a8:	607b      	str	r3, [r7, #4]
		sprintf(buff,"%d PER",level);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4923      	ldr	r1, [pc, #140]	; (800133c <fan_control_dht+0x360>)
 80012ae:	4815      	ldr	r0, [pc, #84]	; (8001304 <fan_control_dht+0x328>)
 80012b0:	f006 fdf8 	bl	8007ea4 <siprintf>
		OLED_GotoXY (85,45); // goto 10, 10
 80012b4:	212d      	movs	r1, #45	; 0x2d
 80012b6:	2055      	movs	r0, #85	; 0x55
 80012b8:	f001 fb7e 	bl	80029b8 <OLED_GotoXY>
		OLED_Puts(buff, &Font_6x10, 1);
 80012bc:	2201      	movs	r2, #1
 80012be:	4919      	ldr	r1, [pc, #100]	; (8001324 <fan_control_dht+0x348>)
 80012c0:	4810      	ldr	r0, [pc, #64]	; (8001304 <fan_control_dht+0x328>)
 80012c2:	f001 fc0f 	bl	8002ae4 <OLED_Puts>
		OLED_UpdateScreen(); // update scree
 80012c6:	f001 fad1 	bl	800286c <OLED_UpdateScreen>

	HAL_Delay(500);
 80012ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ce:	f002 f827 	bl	8003320 <HAL_Delay>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	ecbd 8b02 	vpop	{d8}
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000100 	.word	0x20000100
 80012e4:	20000101 	.word	0x20000101
 80012e8:	20000102 	.word	0x20000102
 80012ec:	20000103 	.word	0x20000103
 80012f0:	20000104 	.word	0x20000104
 80012f4:	40240000 	.word	0x40240000
 80012f8:	20000110 	.word	0x20000110
 80012fc:	20000114 	.word	0x20000114
 8001300:	08008798 	.word	0x08008798
 8001304:	2000009c 	.word	0x2000009c
 8001308:	20000008 	.word	0x20000008
 800130c:	080087a4 	.word	0x080087a4
 8001310:	20000118 	.word	0x20000118
 8001314:	43ff8000 	.word	0x43ff8000
 8001318:	200002b4 	.word	0x200002b4
 800131c:	080087b0 	.word	0x080087b0
 8001320:	080087bc 	.word	0x080087bc
 8001324:	20000000 	.word	0x20000000
 8001328:	080087c8 	.word	0x080087c8
 800132c:	3f333333 	.word	0x3f333333
 8001330:	080087d8 	.word	0x080087d8
 8001334:	080087e4 	.word	0x080087e4
 8001338:	42c80000 	.word	0x42c80000
 800133c:	080087f0 	.word	0x080087f0

08001340 <ldr_pwm>:
extern TIM_HandleTypeDef timer5;
extern ADC_HandleTypeDef hadc1;
uint16_t adc_val = 0;
uint16_t multiplier;
//definition in header
void ldr_pwm(){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	adc_val = 0;
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <ldr_pwm+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	801a      	strh	r2, [r3, #0]
	uint16_t V_amb;
	//start conversion for reference value
	  HAL_ADC_Start(&hadc1);
 800134c:	481a      	ldr	r0, [pc, #104]	; (80013b8 <ldr_pwm+0x78>)
 800134e:	f002 f86f 	bl	8003430 <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc1, 1);
 8001352:	2101      	movs	r1, #1
 8001354:	4818      	ldr	r0, [pc, #96]	; (80013b8 <ldr_pwm+0x78>)
 8001356:	f002 f91f 	bl	8003598 <HAL_ADC_PollForConversion>
	    V_amb = HAL_ADC_GetValue(&hadc1); //getting ref value for light intensity
 800135a:	4817      	ldr	r0, [pc, #92]	; (80013b8 <ldr_pwm+0x78>)
 800135c:	f002 f9a7 	bl	80036ae <HAL_ADC_GetValue>
 8001360:	4603      	mov	r3, r0
 8001362:	80fb      	strh	r3, [r7, #6]
	      multiplier= COUNTER/V_amb;  //multiplier
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136a:	fb92 f3f3 	sdiv	r3, r2, r3
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <ldr_pwm+0x7c>)
 8001372:	801a      	strh	r2, [r3, #0]
	  // Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 8001374:	4810      	ldr	r0, [pc, #64]	; (80013b8 <ldr_pwm+0x78>)
 8001376:	f002 f85b 	bl	8003430 <HAL_ADC_Start>
     // Poll ADC1 Perihperal & TimeOut = 1mSec
   HAL_ADC_PollForConversion(&hadc1, 1);
 800137a:	2101      	movs	r1, #1
 800137c:	480e      	ldr	r0, [pc, #56]	; (80013b8 <ldr_pwm+0x78>)
 800137e:	f002 f90b 	bl	8003598 <HAL_ADC_PollForConversion>
  // Read the ADC Converted value & Map It To PWM DutyCycle
	adc_val = HAL_ADC_GetValue(&hadc1);
 8001382:	480d      	ldr	r0, [pc, #52]	; (80013b8 <ldr_pwm+0x78>)
 8001384:	f002 f993 	bl	80036ae <HAL_ADC_GetValue>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <ldr_pwm+0x74>)
 800138e:	801a      	strh	r2, [r3, #0]
	TIM5->CCR1 = (MAXR-adc_val)*multiplier;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <ldr_pwm+0x74>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001398:	4a08      	ldr	r2, [pc, #32]	; (80013bc <ldr_pwm+0x7c>)
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	fb03 f202 	mul.w	r2, r3, r2
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <ldr_pwm+0x80>)
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(ONESEC);
 80013a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a8:	f001 ffba 	bl	8003320 <HAL_Delay>
	  }
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000011c 	.word	0x2000011c
 80013b8:	20000120 	.word	0x20000120
 80013bc:	2000011e 	.word	0x2000011e
 80013c0:	40000c00 	.word	0x40000c00

080013c4 <ldr_off>:
//definition in header
void ldr_off(){
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	 TIM5->CCR1 =0;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <ldr_off+0x14>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40000c00 	.word	0x40000c00

080013dc <ldr_on>:
//definition in header
void ldr_on(){
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	 TIM5->CCR1 =COUNTER;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <ldr_on+0x18>)
 80013e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40000c00 	.word	0x40000c00

080013f8 <ldr_sleep>:
//definition in header
void ldr_sleep(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 float bright=BRIGHT;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <ldr_sleep+0x90>)
 8001400:	607b      	str	r3, [r7, #4]
	multiplier = COUNTER;
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <ldr_sleep+0x94>)
 8001404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001408:	801a      	strh	r2, [r3, #0]
//gradually decrementing brightness
	  while(bright>=0)
 800140a:	e02a      	b.n	8001462 <ldr_sleep+0x6a>
	  {
		   adc_val = HAL_ADC_GetValue(&hadc1);
 800140c:	4820      	ldr	r0, [pc, #128]	; (8001490 <ldr_sleep+0x98>)
 800140e:	f002 f94e 	bl	80036ae <HAL_ADC_GetValue>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <ldr_sleep+0x9c>)
 8001418:	801a      	strh	r2, [r3, #0]
		        TIM5->CCR1 =(bright*multiplier);
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <ldr_sleep+0x94>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001426:	edd7 7a01 	vldr	s15, [r7, #4]
 800142a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <ldr_sleep+0xa0>)
 8001430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001434:	ee17 2a90 	vmov	r2, s15
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
		        HAL_Delay(HALFSEC);
 800143a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143e:	f001 ff6f 	bl	8003320 <HAL_Delay>
		        bright-=DEC;
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff f880 	bl	8000548 <__aeabi_f2d>
 8001448:	a30d      	add	r3, pc, #52	; (adr r3, 8001480 <ldr_sleep+0x88>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7fe ff1b 	bl	8000288 <__aeabi_dsub>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fadf 	bl	8000a1c <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	607b      	str	r3, [r7, #4]
	  while(bright>=0)
 8001462:	edd7 7a01 	vldr	s15, [r7, #4]
 8001466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	dacd      	bge.n	800140c <ldr_sleep+0x14>
}
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	9999999a 	.word	0x9999999a
 8001484:	3fc99999 	.word	0x3fc99999
 8001488:	3f4ccccd 	.word	0x3f4ccccd
 800148c:	2000011e 	.word	0x2000011e
 8001490:	20000120 	.word	0x20000120
 8001494:	2000011c 	.word	0x2000011c
 8001498:	40000c00 	.word	0x40000c00

0800149c <mood_system>:
 * Parameters: char str1[60]: buffer for storing bluetooth commands, which are processed here.
 *             float PWM1   : for controlling manual fan speed
 *
 * Return: NULL
 */
void mood_system(){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af02      	add	r7, sp, #8
	a=0;
 80014a2:	4bb5      	ldr	r3, [pc, #724]	; (8001778 <mood_system+0x2dc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
	HAL_Delay(N3);
 80014a8:	2032      	movs	r0, #50	; 0x32
 80014aa:	f001 ff39 	bl	8003320 <HAL_Delay>
	for(j=0;j<BUFFERSIZE;j++){
 80014ae:	4bb3      	ldr	r3, [pc, #716]	; (800177c <mood_system+0x2e0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e156      	b.n	8001764 <mood_system+0x2c8>

		if((str1[j]=='s')  &&  (str1[j+1]=='y')  &&  (str1[j+2]=='s')  &&  (str1[j+3]=='t')  &&  (str1[j+4]=='e') && (str1[j+5]=='m')  &&  (str1[j+6]=='o')  &&  (str1[j+7]=='n')){
 80014b6:	4bb1      	ldr	r3, [pc, #708]	; (800177c <mood_system+0x2e0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4ab1      	ldr	r2, [pc, #708]	; (8001780 <mood_system+0x2e4>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	2b73      	cmp	r3, #115	; 0x73
 80014c0:	f040 8148 	bne.w	8001754 <mood_system+0x2b8>
 80014c4:	4bad      	ldr	r3, [pc, #692]	; (800177c <mood_system+0x2e0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4aad      	ldr	r2, [pc, #692]	; (8001780 <mood_system+0x2e4>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
 80014ce:	2b79      	cmp	r3, #121	; 0x79
 80014d0:	f040 8140 	bne.w	8001754 <mood_system+0x2b8>
 80014d4:	4ba9      	ldr	r3, [pc, #676]	; (800177c <mood_system+0x2e0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3302      	adds	r3, #2
 80014da:	4aa9      	ldr	r2, [pc, #676]	; (8001780 <mood_system+0x2e4>)
 80014dc:	5cd3      	ldrb	r3, [r2, r3]
 80014de:	2b73      	cmp	r3, #115	; 0x73
 80014e0:	f040 8138 	bne.w	8001754 <mood_system+0x2b8>
 80014e4:	4ba5      	ldr	r3, [pc, #660]	; (800177c <mood_system+0x2e0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3303      	adds	r3, #3
 80014ea:	4aa5      	ldr	r2, [pc, #660]	; (8001780 <mood_system+0x2e4>)
 80014ec:	5cd3      	ldrb	r3, [r2, r3]
 80014ee:	2b74      	cmp	r3, #116	; 0x74
 80014f0:	f040 8130 	bne.w	8001754 <mood_system+0x2b8>
 80014f4:	4ba1      	ldr	r3, [pc, #644]	; (800177c <mood_system+0x2e0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3304      	adds	r3, #4
 80014fa:	4aa1      	ldr	r2, [pc, #644]	; (8001780 <mood_system+0x2e4>)
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	2b65      	cmp	r3, #101	; 0x65
 8001500:	f040 8128 	bne.w	8001754 <mood_system+0x2b8>
 8001504:	4b9d      	ldr	r3, [pc, #628]	; (800177c <mood_system+0x2e0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3305      	adds	r3, #5
 800150a:	4a9d      	ldr	r2, [pc, #628]	; (8001780 <mood_system+0x2e4>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	2b6d      	cmp	r3, #109	; 0x6d
 8001510:	f040 8120 	bne.w	8001754 <mood_system+0x2b8>
 8001514:	4b99      	ldr	r3, [pc, #612]	; (800177c <mood_system+0x2e0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3306      	adds	r3, #6
 800151a:	4a99      	ldr	r2, [pc, #612]	; (8001780 <mood_system+0x2e4>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
 800151e:	2b6f      	cmp	r3, #111	; 0x6f
 8001520:	f040 8118 	bne.w	8001754 <mood_system+0x2b8>
 8001524:	4b95      	ldr	r3, [pc, #596]	; (800177c <mood_system+0x2e0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3307      	adds	r3, #7
 800152a:	4a95      	ldr	r2, [pc, #596]	; (8001780 <mood_system+0x2e4>)
 800152c:	5cd3      	ldrb	r3, [r2, r3]
 800152e:	2b6e      	cmp	r3, #110	; 0x6e
 8001530:	f040 8110 	bne.w	8001754 <mood_system+0x2b8>


			OLED_DrawBitmap(0,0,f1,N1,N1,1);
 8001534:	2301      	movs	r3, #1
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	2340      	movs	r3, #64	; 0x40
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2340      	movs	r3, #64	; 0x40
 800153e:	4a91      	ldr	r2, [pc, #580]	; (8001784 <mood_system+0x2e8>)
 8001540:	2100      	movs	r1, #0
 8001542:	2000      	movs	r0, #0
 8001544:	f001 f86b 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 8001548:	f001 f990 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 800154c:	f001 faef 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f2,N1,N1,1);
 8001550:	2301      	movs	r3, #1
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	2340      	movs	r3, #64	; 0x40
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2340      	movs	r3, #64	; 0x40
 800155a:	4a8b      	ldr	r2, [pc, #556]	; (8001788 <mood_system+0x2ec>)
 800155c:	2100      	movs	r1, #0
 800155e:	2000      	movs	r0, #0
 8001560:	f001 f85d 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 8001564:	f001 f982 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 8001568:	f001 fae1 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f3,N1,N1,1);
 800156c:	2301      	movs	r3, #1
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	2340      	movs	r3, #64	; 0x40
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2340      	movs	r3, #64	; 0x40
 8001576:	4a85      	ldr	r2, [pc, #532]	; (800178c <mood_system+0x2f0>)
 8001578:	2100      	movs	r1, #0
 800157a:	2000      	movs	r0, #0
 800157c:	f001 f84f 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 8001580:	f001 f974 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 8001584:	f001 fad3 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f4,N1,N1,1);
 8001588:	2301      	movs	r3, #1
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	2340      	movs	r3, #64	; 0x40
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	4a7f      	ldr	r2, [pc, #508]	; (8001790 <mood_system+0x2f4>)
 8001594:	2100      	movs	r1, #0
 8001596:	2000      	movs	r0, #0
 8001598:	f001 f841 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 800159c:	f001 f966 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 80015a0:	f001 fac5 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f5,N1,N1,1);
 80015a4:	2301      	movs	r3, #1
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	2340      	movs	r3, #64	; 0x40
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2340      	movs	r3, #64	; 0x40
 80015ae:	4a79      	ldr	r2, [pc, #484]	; (8001794 <mood_system+0x2f8>)
 80015b0:	2100      	movs	r1, #0
 80015b2:	2000      	movs	r0, #0
 80015b4:	f001 f833 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 80015b8:	f001 f958 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 80015bc:	f001 fab7 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f6,N1,N1,1);
 80015c0:	2301      	movs	r3, #1
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	2340      	movs	r3, #64	; 0x40
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2340      	movs	r3, #64	; 0x40
 80015ca:	4a73      	ldr	r2, [pc, #460]	; (8001798 <mood_system+0x2fc>)
 80015cc:	2100      	movs	r1, #0
 80015ce:	2000      	movs	r0, #0
 80015d0:	f001 f825 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 80015d4:	f001 f94a 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 80015d8:	f001 faa9 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f7,N1,N1,1);
 80015dc:	2301      	movs	r3, #1
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	2340      	movs	r3, #64	; 0x40
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2340      	movs	r3, #64	; 0x40
 80015e6:	4a6d      	ldr	r2, [pc, #436]	; (800179c <mood_system+0x300>)
 80015e8:	2100      	movs	r1, #0
 80015ea:	2000      	movs	r0, #0
 80015ec:	f001 f817 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 80015f0:	f001 f93c 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 80015f4:	f001 fa9b 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f8,N1,N1,1);
 80015f8:	2301      	movs	r3, #1
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	2340      	movs	r3, #64	; 0x40
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	4a67      	ldr	r2, [pc, #412]	; (80017a0 <mood_system+0x304>)
 8001604:	2100      	movs	r1, #0
 8001606:	2000      	movs	r0, #0
 8001608:	f001 f809 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 800160c:	f001 f92e 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 8001610:	f001 fa8d 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f1,N1,N1,1);
 8001614:	2301      	movs	r3, #1
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	2340      	movs	r3, #64	; 0x40
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2340      	movs	r3, #64	; 0x40
 800161e:	4a59      	ldr	r2, [pc, #356]	; (8001784 <mood_system+0x2e8>)
 8001620:	2100      	movs	r1, #0
 8001622:	2000      	movs	r0, #0
 8001624:	f000 fffb 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 8001628:	f001 f920 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 800162c:	f001 fa7f 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f2,N1,N1,1);
 8001630:	2301      	movs	r3, #1
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2340      	movs	r3, #64	; 0x40
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	4a53      	ldr	r2, [pc, #332]	; (8001788 <mood_system+0x2ec>)
 800163c:	2100      	movs	r1, #0
 800163e:	2000      	movs	r0, #0
 8001640:	f000 ffed 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 8001644:	f001 f912 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 8001648:	f001 fa71 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f3,N1,N1,1);
 800164c:	2301      	movs	r3, #1
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	2340      	movs	r3, #64	; 0x40
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2340      	movs	r3, #64	; 0x40
 8001656:	4a4d      	ldr	r2, [pc, #308]	; (800178c <mood_system+0x2f0>)
 8001658:	2100      	movs	r1, #0
 800165a:	2000      	movs	r0, #0
 800165c:	f000 ffdf 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 8001660:	f001 f904 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 8001664:	f001 fa63 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f4,N1,N1,1);
 8001668:	2301      	movs	r3, #1
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	2340      	movs	r3, #64	; 0x40
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2340      	movs	r3, #64	; 0x40
 8001672:	4a47      	ldr	r2, [pc, #284]	; (8001790 <mood_system+0x2f4>)
 8001674:	2100      	movs	r1, #0
 8001676:	2000      	movs	r0, #0
 8001678:	f000 ffd1 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 800167c:	f001 f8f6 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 8001680:	f001 fa55 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f5,N1,N1,1);
 8001684:	2301      	movs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	2340      	movs	r3, #64	; 0x40
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2340      	movs	r3, #64	; 0x40
 800168e:	4a41      	ldr	r2, [pc, #260]	; (8001794 <mood_system+0x2f8>)
 8001690:	2100      	movs	r1, #0
 8001692:	2000      	movs	r0, #0
 8001694:	f000 ffc3 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 8001698:	f001 f8e8 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 800169c:	f001 fa47 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f6,N1,N1,1);
 80016a0:	2301      	movs	r3, #1
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2340      	movs	r3, #64	; 0x40
 80016aa:	4a3b      	ldr	r2, [pc, #236]	; (8001798 <mood_system+0x2fc>)
 80016ac:	2100      	movs	r1, #0
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 ffb5 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 80016b4:	f001 f8da 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 80016b8:	f001 fa39 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f7,N1,N1,1);
 80016bc:	2301      	movs	r3, #1
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	2340      	movs	r3, #64	; 0x40
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2340      	movs	r3, #64	; 0x40
 80016c6:	4a35      	ldr	r2, [pc, #212]	; (800179c <mood_system+0x300>)
 80016c8:	2100      	movs	r1, #0
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 ffa7 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 80016d0:	f001 f8cc 	bl	800286c <OLED_UpdateScreen>
			OLED_Clear();
 80016d4:	f001 fa2b 	bl	8002b2e <OLED_Clear>
			OLED_DrawBitmap(0,0,f8,N1,N1,1);
 80016d8:	2301      	movs	r3, #1
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	2340      	movs	r3, #64	; 0x40
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2340      	movs	r3, #64	; 0x40
 80016e2:	4a2f      	ldr	r2, [pc, #188]	; (80017a0 <mood_system+0x304>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	2000      	movs	r0, #0
 80016e8:	f000 ff99 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 80016ec:	f001 f8be 	bl	800286c <OLED_UpdateScreen>
			OLED_GotoXY (N5,N7); // goto 10, 10
 80016f0:	2108      	movs	r1, #8
 80016f2:	2041      	movs	r0, #65	; 0x41
 80016f4:	f001 f960 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("SYSTEM ON", &Font_6x10, 1); // print Hello
 80016f8:	2201      	movs	r2, #1
 80016fa:	492a      	ldr	r1, [pc, #168]	; (80017a4 <mood_system+0x308>)
 80016fc:	482a      	ldr	r0, [pc, #168]	; (80017a8 <mood_system+0x30c>)
 80016fe:	f001 f9f1 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen(); // update screen
 8001702:	f001 f8b3 	bl	800286c <OLED_UpdateScreen>
			OLED_GotoXY (N5,N8); // goto 10, 10
 8001706:	211e      	movs	r1, #30
 8001708:	2041      	movs	r0, #65	; 0x41
 800170a:	f001 f955 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("AUTO MODE", &Font_6x10, 1); // print Hello
 800170e:	2201      	movs	r2, #1
 8001710:	4924      	ldr	r1, [pc, #144]	; (80017a4 <mood_system+0x308>)
 8001712:	4826      	ldr	r0, [pc, #152]	; (80017ac <mood_system+0x310>)
 8001714:	f001 f9e6 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 8001718:	f001 f8a8 	bl	800286c <OLED_UpdateScreen>
            HAL_Delay(FIVESEC);
 800171c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001720:	f001 fdfe 	bl	8003320 <HAL_Delay>
            OLED_Clear();
 8001724:	f001 fa03 	bl	8002b2e <OLED_Clear>

			fan_control_dht();
 8001728:	f7ff fc58 	bl	8000fdc <fan_control_dht>
			ldr_pwm();
 800172c:	f7ff fe08 	bl	8001340 <ldr_pwm>
			for(j=0;j<BUFFERSIZE;j++){
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <mood_system+0x2e0>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e009      	b.n	800174c <mood_system+0x2b0>
				str1[j]=0;}
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <mood_system+0x2e0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a10      	ldr	r2, [pc, #64]	; (8001780 <mood_system+0x2e4>)
 800173e:	2100      	movs	r1, #0
 8001740:	54d1      	strb	r1, [r2, r3]
			for(j=0;j<BUFFERSIZE;j++){
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <mood_system+0x2e0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <mood_system+0x2e0>)
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <mood_system+0x2e0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b3b      	cmp	r3, #59	; 0x3b
 8001752:	ddf1      	ble.n	8001738 <mood_system+0x29c>
		}
		automode=1; //setting the auto mode active
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <mood_system+0x314>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
	for(j=0;j<BUFFERSIZE;j++){
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <mood_system+0x2e0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a06      	ldr	r2, [pc, #24]	; (800177c <mood_system+0x2e0>)
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <mood_system+0x2e0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b3b      	cmp	r3, #59	; 0x3b
 800176a:	f77f aea4 	ble.w	80014b6 <mood_system+0x1a>
	}

	for(j=0;j<BUFFERSIZE;j++){
 800176e:	4b03      	ldr	r3, [pc, #12]	; (800177c <mood_system+0x2e0>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e095      	b.n	80018a2 <mood_system+0x406>
 8001776:	bf00      	nop
 8001778:	20000390 	.word	0x20000390
 800177c:	2000038c 	.word	0x2000038c
 8001780:	2000039c 	.word	0x2000039c
 8001784:	08009778 	.word	0x08009778
 8001788:	08009978 	.word	0x08009978
 800178c:	08009b78 	.word	0x08009b78
 8001790:	08009d78 	.word	0x08009d78
 8001794:	08009f78 	.word	0x08009f78
 8001798:	0800a178 	.word	0x0800a178
 800179c:	0800a378 	.word	0x0800a378
 80017a0:	0800a578 	.word	0x0800a578
 80017a4:	20000000 	.word	0x20000000
 80017a8:	080087f8 	.word	0x080087f8
 80017ac:	08008804 	.word	0x08008804
 80017b0:	20000394 	.word	0x20000394

		if((str1[j]=='s')  &&  (str1[j+1]=='y')  &&  (str1[j+2]=='s')  &&  (str1[j+3]=='t')  &&  (str1[j+4]=='e') && (str1[j+5]=='m')  &&  (str1[j+6]=='o')  &&  (str1[j+7]=='f') && (str1[j+8]=='f')){
 80017b4:	4b83      	ldr	r3, [pc, #524]	; (80019c4 <mood_system+0x528>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a83      	ldr	r2, [pc, #524]	; (80019c8 <mood_system+0x52c>)
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	2b73      	cmp	r3, #115	; 0x73
 80017be:	d16b      	bne.n	8001898 <mood_system+0x3fc>
 80017c0:	4b80      	ldr	r3, [pc, #512]	; (80019c4 <mood_system+0x528>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	4a80      	ldr	r2, [pc, #512]	; (80019c8 <mood_system+0x52c>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	2b79      	cmp	r3, #121	; 0x79
 80017cc:	d164      	bne.n	8001898 <mood_system+0x3fc>
 80017ce:	4b7d      	ldr	r3, [pc, #500]	; (80019c4 <mood_system+0x528>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3302      	adds	r3, #2
 80017d4:	4a7c      	ldr	r2, [pc, #496]	; (80019c8 <mood_system+0x52c>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	2b73      	cmp	r3, #115	; 0x73
 80017da:	d15d      	bne.n	8001898 <mood_system+0x3fc>
 80017dc:	4b79      	ldr	r3, [pc, #484]	; (80019c4 <mood_system+0x528>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3303      	adds	r3, #3
 80017e2:	4a79      	ldr	r2, [pc, #484]	; (80019c8 <mood_system+0x52c>)
 80017e4:	5cd3      	ldrb	r3, [r2, r3]
 80017e6:	2b74      	cmp	r3, #116	; 0x74
 80017e8:	d156      	bne.n	8001898 <mood_system+0x3fc>
 80017ea:	4b76      	ldr	r3, [pc, #472]	; (80019c4 <mood_system+0x528>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3304      	adds	r3, #4
 80017f0:	4a75      	ldr	r2, [pc, #468]	; (80019c8 <mood_system+0x52c>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	2b65      	cmp	r3, #101	; 0x65
 80017f6:	d14f      	bne.n	8001898 <mood_system+0x3fc>
 80017f8:	4b72      	ldr	r3, [pc, #456]	; (80019c4 <mood_system+0x528>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3305      	adds	r3, #5
 80017fe:	4a72      	ldr	r2, [pc, #456]	; (80019c8 <mood_system+0x52c>)
 8001800:	5cd3      	ldrb	r3, [r2, r3]
 8001802:	2b6d      	cmp	r3, #109	; 0x6d
 8001804:	d148      	bne.n	8001898 <mood_system+0x3fc>
 8001806:	4b6f      	ldr	r3, [pc, #444]	; (80019c4 <mood_system+0x528>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3306      	adds	r3, #6
 800180c:	4a6e      	ldr	r2, [pc, #440]	; (80019c8 <mood_system+0x52c>)
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	2b6f      	cmp	r3, #111	; 0x6f
 8001812:	d141      	bne.n	8001898 <mood_system+0x3fc>
 8001814:	4b6b      	ldr	r3, [pc, #428]	; (80019c4 <mood_system+0x528>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3307      	adds	r3, #7
 800181a:	4a6b      	ldr	r2, [pc, #428]	; (80019c8 <mood_system+0x52c>)
 800181c:	5cd3      	ldrb	r3, [r2, r3]
 800181e:	2b66      	cmp	r3, #102	; 0x66
 8001820:	d13a      	bne.n	8001898 <mood_system+0x3fc>
 8001822:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <mood_system+0x528>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3308      	adds	r3, #8
 8001828:	4a67      	ldr	r2, [pc, #412]	; (80019c8 <mood_system+0x52c>)
 800182a:	5cd3      	ldrb	r3, [r2, r3]
 800182c:	2b66      	cmp	r3, #102	; 0x66
 800182e:	d133      	bne.n	8001898 <mood_system+0x3fc>
			//HAL_Delay(1000);
			// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,0);
			automode=0;
 8001830:	4b66      	ldr	r3, [pc, #408]	; (80019cc <mood_system+0x530>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 8001836:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <mood_system+0x534>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	635a      	str	r2, [r3, #52]	; 0x34
			OLED_Clear();
 800183e:	f001 f976 	bl	8002b2e <OLED_Clear>
			OLED_GotoXY (N8,N7); // goto 10, 10
 8001842:	2108      	movs	r1, #8
 8001844:	201e      	movs	r0, #30
 8001846:	f001 f8b7 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("TURNING OFF ", &Font_6x10, 1); // print Hello
 800184a:	2201      	movs	r2, #1
 800184c:	4961      	ldr	r1, [pc, #388]	; (80019d4 <mood_system+0x538>)
 800184e:	4862      	ldr	r0, [pc, #392]	; (80019d8 <mood_system+0x53c>)
 8001850:	f001 f948 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen(); // update screen
 8001854:	f001 f80a 	bl	800286c <OLED_UpdateScreen>
		    OLED_DrawBitmap(N9,N4,off,N1,N3,1);
 8001858:	2301      	movs	r3, #1
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	2332      	movs	r3, #50	; 0x32
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2340      	movs	r3, #64	; 0x40
 8001862:	4a5e      	ldr	r2, [pc, #376]	; (80019dc <mood_system+0x540>)
 8001864:	2114      	movs	r1, #20
 8001866:	200f      	movs	r0, #15
 8001868:	f000 fed9 	bl	800261e <OLED_DrawBitmap>
		    OLED_UpdateScreen();
 800186c:	f000 fffe 	bl	800286c <OLED_UpdateScreen>
			ldr_off();
 8001870:	f7ff fda8 	bl	80013c4 <ldr_off>

			for(j=0;j<BUFFERSIZE;j++){str1[j]=0;}
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <mood_system+0x528>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	e009      	b.n	8001890 <mood_system+0x3f4>
 800187c:	4b51      	ldr	r3, [pc, #324]	; (80019c4 <mood_system+0x528>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a51      	ldr	r2, [pc, #324]	; (80019c8 <mood_system+0x52c>)
 8001882:	2100      	movs	r1, #0
 8001884:	54d1      	strb	r1, [r2, r3]
 8001886:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <mood_system+0x528>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	4a4d      	ldr	r2, [pc, #308]	; (80019c4 <mood_system+0x528>)
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <mood_system+0x528>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b3b      	cmp	r3, #59	; 0x3b
 8001896:	ddf1      	ble.n	800187c <mood_system+0x3e0>
	for(j=0;j<BUFFERSIZE;j++){
 8001898:	4b4a      	ldr	r3, [pc, #296]	; (80019c4 <mood_system+0x528>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	4a49      	ldr	r2, [pc, #292]	; (80019c4 <mood_system+0x528>)
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b48      	ldr	r3, [pc, #288]	; (80019c4 <mood_system+0x528>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b3b      	cmp	r3, #59	; 0x3b
 80018a8:	dd84      	ble.n	80017b4 <mood_system+0x318>

		}}
	for(j=0;j<BUFFERSIZE;j++){
 80018aa:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <mood_system+0x528>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	e07e      	b.n	80019b0 <mood_system+0x514>
		if((str1[j]=='s')  &&  (str1[j+1]=='l')  &&  (str1[j+2]=='e')  &&  (str1[j+3]=='e')  &&  (str1[j+4]=='p')){
 80018b2:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <mood_system+0x528>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a44      	ldr	r2, [pc, #272]	; (80019c8 <mood_system+0x52c>)
 80018b8:	5cd3      	ldrb	r3, [r2, r3]
 80018ba:	2b73      	cmp	r3, #115	; 0x73
 80018bc:	d173      	bne.n	80019a6 <mood_system+0x50a>
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <mood_system+0x528>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	4a40      	ldr	r2, [pc, #256]	; (80019c8 <mood_system+0x52c>)
 80018c6:	5cd3      	ldrb	r3, [r2, r3]
 80018c8:	2b6c      	cmp	r3, #108	; 0x6c
 80018ca:	d16c      	bne.n	80019a6 <mood_system+0x50a>
 80018cc:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <mood_system+0x528>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3302      	adds	r3, #2
 80018d2:	4a3d      	ldr	r2, [pc, #244]	; (80019c8 <mood_system+0x52c>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	2b65      	cmp	r3, #101	; 0x65
 80018d8:	d165      	bne.n	80019a6 <mood_system+0x50a>
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <mood_system+0x528>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3303      	adds	r3, #3
 80018e0:	4a39      	ldr	r2, [pc, #228]	; (80019c8 <mood_system+0x52c>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	2b65      	cmp	r3, #101	; 0x65
 80018e6:	d15e      	bne.n	80019a6 <mood_system+0x50a>
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <mood_system+0x528>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3304      	adds	r3, #4
 80018ee:	4a36      	ldr	r2, [pc, #216]	; (80019c8 <mood_system+0x52c>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	2b70      	cmp	r3, #112	; 0x70
 80018f4:	d157      	bne.n	80019a6 <mood_system+0x50a>
			automode=0;
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <mood_system+0x530>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
			PWM1 = PWMODE1;
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <mood_system+0x544>)
 80018fe:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001902:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,PWM1*511);
 8001904:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <mood_system+0x544>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80019e4 <mood_system+0x548>
 800190e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <mood_system+0x534>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800191a:	ee17 2a90 	vmov	r2, s15
 800191e:	635a      	str	r2, [r3, #52]	; 0x34
			OLED_Clear();
 8001920:	f001 f905 	bl	8002b2e <OLED_Clear>
			OLED_GotoXY (N10,N7); // goto 10, 10
 8001924:	2108      	movs	r1, #8
 8001926:	2042      	movs	r0, #66	; 0x42
 8001928:	f001 f846 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("SLEEP MODE", &Font_6x10, 1); // print Hello
 800192c:	2201      	movs	r2, #1
 800192e:	4929      	ldr	r1, [pc, #164]	; (80019d4 <mood_system+0x538>)
 8001930:	482d      	ldr	r0, [pc, #180]	; (80019e8 <mood_system+0x54c>)
 8001932:	f001 f8d7 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen(); // update screen
 8001936:	f000 ff99 	bl	800286c <OLED_UpdateScreen>
		    OLED_DrawBitmap(0,N12,zz,N1,N3,1);
 800193a:	2301      	movs	r3, #1
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	2332      	movs	r3, #50	; 0x32
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2340      	movs	r3, #64	; 0x40
 8001944:	4a29      	ldr	r2, [pc, #164]	; (80019ec <mood_system+0x550>)
 8001946:	210c      	movs	r1, #12
 8001948:	2000      	movs	r0, #0
 800194a:	f000 fe68 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 800194e:	f000 ff8d 	bl	800286c <OLED_UpdateScreen>
			OLED_GotoXY (N10,N11); // goto 10, 10
 8001952:	2119      	movs	r1, #25
 8001954:	2042      	movs	r0, #66	; 0x42
 8001956:	f001 f82f 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("Fan Normal", &Font_6x10, 1); // print Hello
 800195a:	2201      	movs	r2, #1
 800195c:	491d      	ldr	r1, [pc, #116]	; (80019d4 <mood_system+0x538>)
 800195e:	4824      	ldr	r0, [pc, #144]	; (80019f0 <mood_system+0x554>)
 8001960:	f001 f8c0 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 8001964:	f000 ff82 	bl	800286c <OLED_UpdateScreen>
			OLED_GotoXY (N10,N6); // goto 10, 10
 8001968:	212d      	movs	r1, #45	; 0x2d
 800196a:	2042      	movs	r0, #66	; 0x42
 800196c:	f001 f824 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("Light OFF", &Font_6x10, 1); // print Hello
 8001970:	2201      	movs	r2, #1
 8001972:	4918      	ldr	r1, [pc, #96]	; (80019d4 <mood_system+0x538>)
 8001974:	481f      	ldr	r0, [pc, #124]	; (80019f4 <mood_system+0x558>)
 8001976:	f001 f8b5 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 800197a:	f000 ff77 	bl	800286c <OLED_UpdateScreen>
			ldr_sleep();
 800197e:	f7ff fd3b 	bl	80013f8 <ldr_sleep>
			for(j=0;j<BUFFERSIZE;j++){str1[j]=0;}
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <mood_system+0x528>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e009      	b.n	800199e <mood_system+0x502>
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <mood_system+0x528>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <mood_system+0x52c>)
 8001990:	2100      	movs	r1, #0
 8001992:	54d1      	strb	r1, [r2, r3]
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <mood_system+0x528>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <mood_system+0x528>)
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <mood_system+0x528>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b3b      	cmp	r3, #59	; 0x3b
 80019a4:	ddf1      	ble.n	800198a <mood_system+0x4ee>
	for(j=0;j<BUFFERSIZE;j++){
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <mood_system+0x528>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <mood_system+0x528>)
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <mood_system+0x528>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b3b      	cmp	r3, #59	; 0x3b
 80019b6:	f77f af7c 	ble.w	80018b2 <mood_system+0x416>

		}}
	for(j=0;j<BUFFERSIZE;j++){
 80019ba:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <mood_system+0x528>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e08b      	b.n	8001ada <mood_system+0x63e>
 80019c2:	bf00      	nop
 80019c4:	2000038c 	.word	0x2000038c
 80019c8:	2000039c 	.word	0x2000039c
 80019cc:	20000394 	.word	0x20000394
 80019d0:	200002b4 	.word	0x200002b4
 80019d4:	20000000 	.word	0x20000000
 80019d8:	08008810 	.word	0x08008810
 80019dc:	0800acf8 	.word	0x0800acf8
 80019e0:	200003d8 	.word	0x200003d8
 80019e4:	43ff8000 	.word	0x43ff8000
 80019e8:	08008820 	.word	0x08008820
 80019ec:	0800a978 	.word	0x0800a978
 80019f0:	0800882c 	.word	0x0800882c
 80019f4:	08008838 	.word	0x08008838
		if((str1[j]=='d')  &&  (str1[j+1]=='a')  &&  (str1[j+2]=='y')){
 80019f8:	4b7b      	ldr	r3, [pc, #492]	; (8001be8 <mood_system+0x74c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a7b      	ldr	r2, [pc, #492]	; (8001bec <mood_system+0x750>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	2b64      	cmp	r3, #100	; 0x64
 8001a02:	d165      	bne.n	8001ad0 <mood_system+0x634>
 8001a04:	4b78      	ldr	r3, [pc, #480]	; (8001be8 <mood_system+0x74c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a78      	ldr	r2, [pc, #480]	; (8001bec <mood_system+0x750>)
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	2b61      	cmp	r3, #97	; 0x61
 8001a10:	d15e      	bne.n	8001ad0 <mood_system+0x634>
 8001a12:	4b75      	ldr	r3, [pc, #468]	; (8001be8 <mood_system+0x74c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3302      	adds	r3, #2
 8001a18:	4a74      	ldr	r2, [pc, #464]	; (8001bec <mood_system+0x750>)
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	2b79      	cmp	r3, #121	; 0x79
 8001a1e:	d157      	bne.n	8001ad0 <mood_system+0x634>
			automode=0;
 8001a20:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <mood_system+0x754>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
			PWM1 =PWMODE3;
 8001a26:	4b73      	ldr	r3, [pc, #460]	; (8001bf4 <mood_system+0x758>)
 8001a28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a2c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,PWM1*MAXPWM);
 8001a2e:	4b71      	ldr	r3, [pc, #452]	; (8001bf4 <mood_system+0x758>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001bf8 <mood_system+0x75c>
 8001a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <mood_system+0x760>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a44:	ee17 2a90 	vmov	r2, s15
 8001a48:	635a      	str	r2, [r3, #52]	; 0x34
			OLED_Clear();
 8001a4a:	f001 f870 	bl	8002b2e <OLED_Clear>
			OLED_GotoXY (N13,N7); // goto 10, 10
 8001a4e:	2108      	movs	r1, #8
 8001a50:	2045      	movs	r0, #69	; 0x45
 8001a52:	f000 ffb1 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("DAY MODE", &Font_6x10, 1); // print Hello
 8001a56:	2201      	movs	r2, #1
 8001a58:	4969      	ldr	r1, [pc, #420]	; (8001c00 <mood_system+0x764>)
 8001a5a:	486a      	ldr	r0, [pc, #424]	; (8001c04 <mood_system+0x768>)
 8001a5c:	f001 f842 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen(); // update screen
 8001a60:	f000 ff04 	bl	800286c <OLED_UpdateScreen>
			OLED_DrawBitmap(0,N12,sun,N1,N3,1);
 8001a64:	2301      	movs	r3, #1
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	2332      	movs	r3, #50	; 0x32
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2340      	movs	r3, #64	; 0x40
 8001a6e:	4a66      	ldr	r2, [pc, #408]	; (8001c08 <mood_system+0x76c>)
 8001a70:	210c      	movs	r1, #12
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 fdd3 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 8001a78:	f000 fef8 	bl	800286c <OLED_UpdateScreen>
			OLED_GotoXY (N2,N11); // goto 10, 10
 8001a7c:	2119      	movs	r1, #25
 8001a7e:	2044      	movs	r0, #68	; 0x44
 8001a80:	f000 ff9a 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("Fan MAX", &Font_6x10, 1); // print Hello
 8001a84:	2201      	movs	r2, #1
 8001a86:	495e      	ldr	r1, [pc, #376]	; (8001c00 <mood_system+0x764>)
 8001a88:	4860      	ldr	r0, [pc, #384]	; (8001c0c <mood_system+0x770>)
 8001a8a:	f001 f82b 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 8001a8e:	f000 feed 	bl	800286c <OLED_UpdateScreen>
			OLED_GotoXY (N2,N6); // goto 10, 10
 8001a92:	212d      	movs	r1, #45	; 0x2d
 8001a94:	2044      	movs	r0, #68	; 0x44
 8001a96:	f000 ff8f 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("Light OFF", &Font_6x10, 1); // print Hello
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4958      	ldr	r1, [pc, #352]	; (8001c00 <mood_system+0x764>)
 8001a9e:	485c      	ldr	r0, [pc, #368]	; (8001c10 <mood_system+0x774>)
 8001aa0:	f001 f820 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 8001aa4:	f000 fee2 	bl	800286c <OLED_UpdateScreen>
			ldr_off();
 8001aa8:	f7ff fc8c 	bl	80013c4 <ldr_off>

			for(j=0;j<BUFFERSIZE;j++){str1[j]=0;}
 8001aac:	4b4e      	ldr	r3, [pc, #312]	; (8001be8 <mood_system+0x74c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	e009      	b.n	8001ac8 <mood_system+0x62c>
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <mood_system+0x74c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a4c      	ldr	r2, [pc, #304]	; (8001bec <mood_system+0x750>)
 8001aba:	2100      	movs	r1, #0
 8001abc:	54d1      	strb	r1, [r2, r3]
 8001abe:	4b4a      	ldr	r3, [pc, #296]	; (8001be8 <mood_system+0x74c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a48      	ldr	r2, [pc, #288]	; (8001be8 <mood_system+0x74c>)
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <mood_system+0x74c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b3b      	cmp	r3, #59	; 0x3b
 8001ace:	ddf1      	ble.n	8001ab4 <mood_system+0x618>
	for(j=0;j<BUFFERSIZE;j++){
 8001ad0:	4b45      	ldr	r3, [pc, #276]	; (8001be8 <mood_system+0x74c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4a44      	ldr	r2, [pc, #272]	; (8001be8 <mood_system+0x74c>)
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <mood_system+0x74c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b3b      	cmp	r3, #59	; 0x3b
 8001ae0:	dd8a      	ble.n	80019f8 <mood_system+0x55c>
		}}
	for(j=0;j<BUFFERSIZE;j++){
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <mood_system+0x74c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e076      	b.n	8001bd8 <mood_system+0x73c>
		if((str1[j]=='w')  &&  (str1[j+1]=='o')  &&  (str1[j+2]=='r')  &&  (str1[j+3]=='k') ){
 8001aea:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <mood_system+0x74c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a3f      	ldr	r2, [pc, #252]	; (8001bec <mood_system+0x750>)
 8001af0:	5cd3      	ldrb	r3, [r2, r3]
 8001af2:	2b77      	cmp	r3, #119	; 0x77
 8001af4:	d16b      	bne.n	8001bce <mood_system+0x732>
 8001af6:	4b3c      	ldr	r3, [pc, #240]	; (8001be8 <mood_system+0x74c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a3b      	ldr	r2, [pc, #236]	; (8001bec <mood_system+0x750>)
 8001afe:	5cd3      	ldrb	r3, [r2, r3]
 8001b00:	2b6f      	cmp	r3, #111	; 0x6f
 8001b02:	d164      	bne.n	8001bce <mood_system+0x732>
 8001b04:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <mood_system+0x74c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	4a38      	ldr	r2, [pc, #224]	; (8001bec <mood_system+0x750>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	2b72      	cmp	r3, #114	; 0x72
 8001b10:	d15d      	bne.n	8001bce <mood_system+0x732>
 8001b12:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <mood_system+0x74c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3303      	adds	r3, #3
 8001b18:	4a34      	ldr	r2, [pc, #208]	; (8001bec <mood_system+0x750>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	2b6b      	cmp	r3, #107	; 0x6b
 8001b1e:	d156      	bne.n	8001bce <mood_system+0x732>
			automode=0;
 8001b20:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <mood_system+0x754>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
			PWM1 = PWMODE2;
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <mood_system+0x758>)
 8001b28:	4a3a      	ldr	r2, [pc, #232]	; (8001c14 <mood_system+0x778>)
 8001b2a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,PWM1*MAXPWM);
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <mood_system+0x758>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001bf8 <mood_system+0x75c>
 8001b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3a:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <mood_system+0x760>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b42:	ee17 2a90 	vmov	r2, s15
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
			OLED_Clear();
 8001b48:	f000 fff1 	bl	8002b2e <OLED_Clear>
			OLED_GotoXY (N13,N7); // goto 10, 10
 8001b4c:	2108      	movs	r1, #8
 8001b4e:	2045      	movs	r0, #69	; 0x45
 8001b50:	f000 ff32 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("WORK MODE", &Font_6x10, 1); // print Hello
 8001b54:	2201      	movs	r2, #1
 8001b56:	492a      	ldr	r1, [pc, #168]	; (8001c00 <mood_system+0x764>)
 8001b58:	482f      	ldr	r0, [pc, #188]	; (8001c18 <mood_system+0x77c>)
 8001b5a:	f000 ffc3 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen(); // update screen
 8001b5e:	f000 fe85 	bl	800286c <OLED_UpdateScreen>
			OLED_DrawBitmap(0,N12,work,N1,N3,1);
 8001b62:	2301      	movs	r3, #1
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	2332      	movs	r3, #50	; 0x32
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2340      	movs	r3, #64	; 0x40
 8001b6c:	4a2b      	ldr	r2, [pc, #172]	; (8001c1c <mood_system+0x780>)
 8001b6e:	210c      	movs	r1, #12
 8001b70:	2000      	movs	r0, #0
 8001b72:	f000 fd54 	bl	800261e <OLED_DrawBitmap>
			OLED_UpdateScreen();
 8001b76:	f000 fe79 	bl	800286c <OLED_UpdateScreen>
			OLED_GotoXY (N2,N11); // goto 10, 10
 8001b7a:	2119      	movs	r1, #25
 8001b7c:	2044      	movs	r0, #68	; 0x44
 8001b7e:	f000 ff1b 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("Fan HIGH", &Font_6x10, 1); // print Hello
 8001b82:	2201      	movs	r2, #1
 8001b84:	491e      	ldr	r1, [pc, #120]	; (8001c00 <mood_system+0x764>)
 8001b86:	4826      	ldr	r0, [pc, #152]	; (8001c20 <mood_system+0x784>)
 8001b88:	f000 ffac 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 8001b8c:	f000 fe6e 	bl	800286c <OLED_UpdateScreen>
			OLED_GotoXY (N2,N6); // goto 10, 10
 8001b90:	212d      	movs	r1, #45	; 0x2d
 8001b92:	2044      	movs	r0, #68	; 0x44
 8001b94:	f000 ff10 	bl	80029b8 <OLED_GotoXY>
			OLED_Puts ("Light ON", &Font_6x10, 1); // print Hello
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4919      	ldr	r1, [pc, #100]	; (8001c00 <mood_system+0x764>)
 8001b9c:	4821      	ldr	r0, [pc, #132]	; (8001c24 <mood_system+0x788>)
 8001b9e:	f000 ffa1 	bl	8002ae4 <OLED_Puts>
			OLED_UpdateScreen();
 8001ba2:	f000 fe63 	bl	800286c <OLED_UpdateScreen>
			ldr_on();
 8001ba6:	f7ff fc19 	bl	80013dc <ldr_on>

			for(j=0;j<BUFFERSIZE;j++){str1[j]=0;}
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <mood_system+0x74c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e009      	b.n	8001bc6 <mood_system+0x72a>
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <mood_system+0x74c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <mood_system+0x750>)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	54d1      	strb	r1, [r2, r3]
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <mood_system+0x74c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <mood_system+0x74c>)
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <mood_system+0x74c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b3b      	cmp	r3, #59	; 0x3b
 8001bcc:	ddf1      	ble.n	8001bb2 <mood_system+0x716>
	for(j=0;j<BUFFERSIZE;j++){
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <mood_system+0x74c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <mood_system+0x74c>)
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <mood_system+0x74c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b3b      	cmp	r3, #59	; 0x3b
 8001bde:	dd84      	ble.n	8001aea <mood_system+0x64e>
		}}
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	2000038c 	.word	0x2000038c
 8001bec:	2000039c 	.word	0x2000039c
 8001bf0:	20000394 	.word	0x20000394
 8001bf4:	200003d8 	.word	0x200003d8
 8001bf8:	43ff8000 	.word	0x43ff8000
 8001bfc:	200002b4 	.word	0x200002b4
 8001c00:	20000000 	.word	0x20000000
 8001c04:	08008844 	.word	0x08008844
 8001c08:	0800aaf8 	.word	0x0800aaf8
 8001c0c:	08008850 	.word	0x08008850
 8001c10:	08008838 	.word	0x08008838
 8001c14:	3f333333 	.word	0x3f333333
 8001c18:	08008858 	.word	0x08008858
 8001c1c:	0800aef8 	.word	0x0800aef8
 8001c20:	08008864 	.word	0x08008864
 8001c24:	08008870 	.word	0x08008870

08001c28 <HAL_UART_RxCpltCallback>:
 *             uint8_t rx data from UART Rx
 *
 * Return: NULL
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	//HAL_ResumeTick();
	HAL_PWR_DisableSleepOnExit ();
 8001c30:	f003 f892 	bl	8004d58 <HAL_PWR_DisableSleepOnExit>
	if(huart==&huart2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_UART_RxCpltCallback+0x4c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d111      	bne.n	8001c60 <HAL_UART_RxCpltCallback+0x38>
	{
		if(rx == DEVADDRS){
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_UART_RxCpltCallback+0x50>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b0a      	cmp	r3, #10
 8001c42:	d102      	bne.n	8001c4a <HAL_UART_RxCpltCallback+0x22>
			flag=1;
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_UART_RxCpltCallback+0x54>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
		}
		str1[a]=rx;
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_UART_RxCpltCallback+0x58>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_UART_RxCpltCallback+0x50>)
 8001c50:	7811      	ldrb	r1, [r2, #0]
 8001c52:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <HAL_UART_RxCpltCallback+0x5c>)
 8001c54:	54d1      	strb	r1, [r2, r3]
		a++;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_UART_RxCpltCallback+0x58>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <HAL_UART_RxCpltCallback+0x58>)
 8001c5e:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(&huart2,&rx,1);
 8001c60:	2201      	movs	r2, #1
 8001c62:	4905      	ldr	r1, [pc, #20]	; (8001c78 <HAL_UART_RxCpltCallback+0x50>)
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <HAL_UART_RxCpltCallback+0x4c>)
 8001c66:	f005 f9c0 	bl	8006fea <HAL_UART_Receive_IT>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000344 	.word	0x20000344
 8001c78:	20000398 	.word	0x20000398
 8001c7c:	20000388 	.word	0x20000388
 8001c80:	20000390 	.word	0x20000390
 8001c84:	2000039c 	.word	0x2000039c

08001c88 <main>:
 *             int flag : to know if bluetooth command received or not
 *
 * Return:  returns 1 is successful
 */
int main(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c8e:	f001 fad5 	bl	800323c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c92:	f000 f8cf 	bl	8001e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c96:	f000 fc1d 	bl	80024d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001c9a:	f000 fa19 	bl	80020d0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001c9e:	f000 fb03 	bl	80022a8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001ca2:	f000 fab3 	bl	800220c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001ca6:	f000 fa63 	bl	8002170 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001caa:	f000 fbe9 	bl	8002480 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001cae:	f000 f97d 	bl	8001fac <MX_I2C1_Init>
  MX_TIM5_Init();
 8001cb2:	f000 fb6f 	bl	8002394 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001cb6:	f000 f927 	bl	8001f08 <MX_ADC1_Init>
  MX_RTC_Init();
 8001cba:	f000 f9a5 	bl	8002008 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	OLED_Init (); // initialize the display
 8001cbe:	f000 fd17 	bl	80026f0 <OLED_Init>
	OLED_GotoXY (N5,N7); // goto 10, 10
 8001cc2:	2108      	movs	r1, #8
 8001cc4:	2041      	movs	r0, #65	; 0x41
 8001cc6:	f000 fe77 	bl	80029b8 <OLED_GotoXY>
	OLED_Puts ("MOOD", &Font_6x10, 1); // print Hello
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4948      	ldr	r1, [pc, #288]	; (8001df0 <main+0x168>)
 8001cce:	4849      	ldr	r0, [pc, #292]	; (8001df4 <main+0x16c>)
 8001cd0:	f000 ff08 	bl	8002ae4 <OLED_Puts>
	OLED_GotoXY (N5, N4);
 8001cd4:	2114      	movs	r1, #20
 8001cd6:	2041      	movs	r0, #65	; 0x41
 8001cd8:	f000 fe6e 	bl	80029b8 <OLED_GotoXY>
	OLED_Puts ("BASED", &Font_6x10, 1);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4944      	ldr	r1, [pc, #272]	; (8001df0 <main+0x168>)
 8001ce0:	4845      	ldr	r0, [pc, #276]	; (8001df8 <main+0x170>)
 8001ce2:	f000 feff 	bl	8002ae4 <OLED_Puts>
	OLED_UpdateScreen(); // update screen
 8001ce6:	f000 fdc1 	bl	800286c <OLED_UpdateScreen>
	OLED_GotoXY (N5, 35);
 8001cea:	2123      	movs	r1, #35	; 0x23
 8001cec:	2041      	movs	r0, #65	; 0x41
 8001cee:	f000 fe63 	bl	80029b8 <OLED_GotoXY>
	OLED_Puts ("HOME", &Font_6x10, 1);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	493e      	ldr	r1, [pc, #248]	; (8001df0 <main+0x168>)
 8001cf6:	4841      	ldr	r0, [pc, #260]	; (8001dfc <main+0x174>)
 8001cf8:	f000 fef4 	bl	8002ae4 <OLED_Puts>
	OLED_UpdateScreen(); // update screen
 8001cfc:	f000 fdb6 	bl	800286c <OLED_UpdateScreen>
	OLED_GotoXY (N5,N3);
 8001d00:	2132      	movs	r1, #50	; 0x32
 8001d02:	2041      	movs	r0, #65	; 0x41
 8001d04:	f000 fe58 	bl	80029b8 <OLED_GotoXY>
	OLED_Puts ("AUTOMATION", &Font_6x10, 1);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4939      	ldr	r1, [pc, #228]	; (8001df0 <main+0x168>)
 8001d0c:	483c      	ldr	r0, [pc, #240]	; (8001e00 <main+0x178>)
 8001d0e:	f000 fee9 	bl	8002ae4 <OLED_Puts>
	OLED_UpdateScreen(); // update screen
 8001d12:	f000 fdab 	bl	800286c <OLED_UpdateScreen>
	OLED_DrawBitmap(0,N7,home,N1,N1,1);
 8001d16:	2301      	movs	r3, #1
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	2340      	movs	r3, #64	; 0x40
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2340      	movs	r3, #64	; 0x40
 8001d20:	4a38      	ldr	r2, [pc, #224]	; (8001e04 <main+0x17c>)
 8001d22:	2108      	movs	r1, #8
 8001d24:	2000      	movs	r0, #0
 8001d26:	f000 fc7a 	bl	800261e <OLED_DrawBitmap>
	OLED_UpdateScreen(); // update screen
 8001d2a:	f000 fd9f 	bl	800286c <OLED_UpdateScreen>
	HAL_Delay(FIVESEC);
 8001d2e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d32:	f001 faf5 	bl	8003320 <HAL_Delay>
	OLED_Clear();
 8001d36:	f000 fefa 	bl	8002b2e <OLED_Clear>

	HAL_UART_Receive_IT(&huart2,&rx,1);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4932      	ldr	r1, [pc, #200]	; (8001e08 <main+0x180>)
 8001d3e:	4833      	ldr	r0, [pc, #204]	; (8001e0c <main+0x184>)
 8001d40:	f005 f953 	bl	8006fea <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d44:	4832      	ldr	r0, [pc, #200]	; (8001e10 <main+0x188>)
 8001d46:	f004 f985 	bl	8006054 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim1);
 8001d4a:	4832      	ldr	r0, [pc, #200]	; (8001e14 <main+0x18c>)
 8001d4c:	f004 f928 	bl	8005fa0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8001d50:	4831      	ldr	r0, [pc, #196]	; (8001e18 <main+0x190>)
 8001d52:	f004 f925 	bl	8005fa0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001d56:	2100      	movs	r1, #0
 8001d58:	4830      	ldr	r0, [pc, #192]	; (8001e1c <main+0x194>)
 8001d5a:	f004 fa37 	bl	80061cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001d5e:	2100      	movs	r1, #0
 8001d60:	482f      	ldr	r0, [pc, #188]	; (8001e20 <main+0x198>)
 8001d62:	f004 fa33 	bl	80061cc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(automode==1){
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <main+0x19c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d103      	bne.n	8001d76 <main+0xee>

			fan_control_dht();
 8001d6e:	f7ff f935 	bl	8000fdc <fan_control_dht>
			ldr_pwm();}
 8001d72:	f7ff fae5 	bl	8001340 <ldr_pwm>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8001d76:	2201      	movs	r2, #1
 8001d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d7c:	482a      	ldr	r0, [pc, #168]	; (8001e28 <main+0x1a0>)
 8001d7e:	f002 fa11 	bl	80041a4 <HAL_GPIO_WritePin>

		HAL_SuspendTick();
 8001d82:	f001 faf1 	bl	8003368 <HAL_SuspendTick>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);  // Just to indicate that the sleep mode is activated
 8001d86:	2200      	movs	r2, #0
 8001d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d8c:	4826      	ldr	r0, [pc, #152]	; (8001e28 <main+0x1a0>)
 8001d8e:	f002 fa09 	bl	80041a4 <HAL_GPIO_WritePin>

		HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, RTCTIME, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f245 010b 	movw	r1, #20491	; 0x500b
 8001d98:	4824      	ldr	r0, [pc, #144]	; (8001e2c <main+0x1a4>)
 8001d9a:	f003 ff6b 	bl	8005c74 <HAL_RTCEx_SetWakeUpTimer_IT>
		HAL_PWR_EnableSleepOnExit ();
 8001d9e:	f002 ffcb 	bl	8004d38 <HAL_PWR_EnableSleepOnExit>

		//	  Enter Sleep Mode , wake up is done once User push-button is pressed
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001da2:	2101      	movs	r1, #1
 8001da4:	2000      	movs	r0, #0
 8001da6:	f002 ffab 	bl	8004d00 <HAL_PWR_EnterSLEEPMode>

		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001daa:	4820      	ldr	r0, [pc, #128]	; (8001e2c <main+0x1a4>)
 8001dac:	f004 f822 	bl	8005df4 <HAL_RTCEx_DeactivateWakeUpTimer>

		SystemClock_Config();
 8001db0:	f000 f840 	bl	8001e34 <SystemClock_Config>

		//	  Resume Tick interrupt if disabled prior to sleep mode entry
		HAL_ResumeTick();
 8001db4:	f001 fae8 	bl	8003388 <HAL_ResumeTick>

		for (int i=0; i<N4; i++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	e00a      	b.n	8001dd4 <main+0x14c>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc2:	4819      	ldr	r0, [pc, #100]	; (8001e28 <main+0x1a0>)
 8001dc4:	f002 fa07 	bl	80041d6 <HAL_GPIO_TogglePin>
			HAL_Delay(HUNSEC);
 8001dc8:	2064      	movs	r0, #100	; 0x64
 8001dca:	f001 faa9 	bl	8003320 <HAL_Delay>
		for (int i=0; i<N4; i++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b13      	cmp	r3, #19
 8001dd8:	ddf1      	ble.n	8001dbe <main+0x136>
		}

		if(flag==1)
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <main+0x1a8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d1c1      	bne.n	8001d66 <main+0xde>
		{
			mood_system();
 8001de2:	f7ff fb5b 	bl	800149c <mood_system>
			flag=0;}
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <main+0x1a8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
		if(automode==1){
 8001dec:	e7bb      	b.n	8001d66 <main+0xde>
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000
 8001df4:	0800887c 	.word	0x0800887c
 8001df8:	08008884 	.word	0x08008884
 8001dfc:	0800888c 	.word	0x0800888c
 8001e00:	08008894 	.word	0x08008894
 8001e04:	0800a778 	.word	0x0800a778
 8001e08:	20000398 	.word	0x20000398
 8001e0c:	20000344 	.word	0x20000344
 8001e10:	20000224 	.word	0x20000224
 8001e14:	200001dc 	.word	0x200001dc
 8001e18:	2000026c 	.word	0x2000026c
 8001e1c:	200002b4 	.word	0x200002b4
 8001e20:	200002fc 	.word	0x200002fc
 8001e24:	20000394 	.word	0x20000394
 8001e28:	40020c00 	.word	0x40020c00
 8001e2c:	200001bc 	.word	0x200001bc
 8001e30:	20000388 	.word	0x20000388

08001e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b094      	sub	sp, #80	; 0x50
 8001e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	2230      	movs	r2, #48	; 0x30
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f006 f826 	bl	8007e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <SystemClock_Config+0xcc>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a27      	ldr	r2, [pc, #156]	; (8001f00 <SystemClock_Config+0xcc>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <SystemClock_Config+0xcc>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <SystemClock_Config+0xd0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a21      	ldr	r2, [pc, #132]	; (8001f04 <SystemClock_Config+0xd0>)
 8001e7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <SystemClock_Config+0xd0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e90:	230a      	movs	r3, #10
 8001e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e94:	2301      	movs	r3, #1
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e98:	2310      	movs	r3, #16
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001eac:	2348      	movs	r3, #72	; 0x48
 8001eae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb8:	f107 0320 	add.w	r3, r7, #32
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 ff5b 	bl	8004d78 <HAL_RCC_OscConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ec8:	f000 fba4 	bl	8002614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ecc:	230f      	movs	r3, #15
 8001ece:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001edc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 f9bd 	bl	8005268 <HAL_RCC_ClockConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ef4:	f000 fb8e 	bl	8002614 <Error_Handler>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3750      	adds	r7, #80	; 0x50
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000

08001f08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f1c:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <MX_ADC1_Init+0x9c>)
 8001f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f32:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <MX_ADC1_Init+0xa0>)
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f66:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f68:	f001 fa1e 	bl	80033a8 <HAL_ADC_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f72:	f000 fb4f 	bl	8002614 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001f76:	2309      	movs	r3, #9
 8001f78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f82:	463b      	mov	r3, r7
 8001f84:	4619      	mov	r1, r3
 8001f86:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <MX_ADC1_Init+0x98>)
 8001f88:	f001 fb9e 	bl	80036c8 <HAL_ADC_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f92:	f000 fb3f 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000120 	.word	0x20000120
 8001fa4:	40012000 	.word	0x40012000
 8001fa8:	0f000001 	.word	0x0f000001

08001fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fb2:	4a13      	ldr	r2, [pc, #76]	; (8002000 <MX_I2C1_Init+0x54>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_I2C1_Init+0x58>)
 8001fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <MX_I2C1_Init+0x50>)
 8001fea:	f002 f90f 	bl	800420c <HAL_I2C_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ff4:	f000 fb0e 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000168 	.word	0x20000168
 8002000:	40005400 	.word	0x40005400
 8002004:	00061a80 	.word	0x00061a80

08002008 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800201c:	2300      	movs	r3, #0
 800201e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <MX_RTC_Init+0xc0>)
 8002022:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <MX_RTC_Init+0xc4>)
 8002024:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002026:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <MX_RTC_Init+0xc0>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800202c:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <MX_RTC_Init+0xc0>)
 800202e:	227f      	movs	r2, #127	; 0x7f
 8002030:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002032:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <MX_RTC_Init+0xc0>)
 8002034:	22ff      	movs	r2, #255	; 0xff
 8002036:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <MX_RTC_Init+0xc0>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800203e:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <MX_RTC_Init+0xc0>)
 8002040:	2200      	movs	r2, #0
 8002042:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <MX_RTC_Init+0xc0>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800204a:	481f      	ldr	r0, [pc, #124]	; (80020c8 <MX_RTC_Init+0xc0>)
 800204c:	f003 fbdc 	bl	8005808 <HAL_RTC_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002056:	f000 fadd 	bl	8002614 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800205a:	2300      	movs	r3, #0
 800205c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800205e:	2300      	movs	r3, #0
 8002060:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002062:	2300      	movs	r3, #0
 8002064:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2201      	movs	r2, #1
 8002072:	4619      	mov	r1, r3
 8002074:	4814      	ldr	r0, [pc, #80]	; (80020c8 <MX_RTC_Init+0xc0>)
 8002076:	f003 fc3d 	bl	80058f4 <HAL_RTC_SetTime>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002080:	f000 fac8 	bl	8002614 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002084:	2301      	movs	r3, #1
 8002086:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002088:	2301      	movs	r3, #1
 800208a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800208c:	2301      	movs	r3, #1
 800208e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002090:	2300      	movs	r3, #0
 8002092:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002094:	463b      	mov	r3, r7
 8002096:	2201      	movs	r2, #1
 8002098:	4619      	mov	r1, r3
 800209a:	480b      	ldr	r0, [pc, #44]	; (80020c8 <MX_RTC_Init+0xc0>)
 800209c:	f003 fcc4 	bl	8005a28 <HAL_RTC_SetDate>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80020a6:	f000 fab5 	bl	8002614 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80020aa:	2200      	movs	r2, #0
 80020ac:	f245 010b 	movw	r1, #20491	; 0x500b
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_RTC_Init+0xc0>)
 80020b2:	f003 fddf 	bl	8005c74 <HAL_RTCEx_SetWakeUpTimer_IT>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80020bc:	f000 faaa 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200001bc 	.word	0x200001bc
 80020cc:	40002800 	.word	0x40002800

080020d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	463b      	mov	r3, r7
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ec:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <MX_TIM1_Init+0x98>)
 80020ee:	4a1f      	ldr	r2, [pc, #124]	; (800216c <MX_TIM1_Init+0x9c>)
 80020f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <MX_TIM1_Init+0x98>)
 80020f4:	2247      	movs	r2, #71	; 0x47
 80020f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <MX_TIM1_Init+0x98>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <MX_TIM1_Init+0x98>)
 8002100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002104:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <MX_TIM1_Init+0x98>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <MX_TIM1_Init+0x98>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <MX_TIM1_Init+0x98>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002118:	4813      	ldr	r0, [pc, #76]	; (8002168 <MX_TIM1_Init+0x98>)
 800211a:	f003 fef1 	bl	8005f00 <HAL_TIM_Base_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002124:	f000 fa76 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800212e:	f107 0308 	add.w	r3, r7, #8
 8002132:	4619      	mov	r1, r3
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <MX_TIM1_Init+0x98>)
 8002136:	f004 fac3 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002140:	f000 fa68 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800214c:	463b      	mov	r3, r7
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_TIM1_Init+0x98>)
 8002152:	f004 fe7b 	bl	8006e4c <HAL_TIMEx_MasterConfigSynchronization>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800215c:	f000 fa5a 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002160:	bf00      	nop
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200001dc 	.word	0x200001dc
 800216c:	40010000 	.word	0x40010000

08002170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	463b      	mov	r3, r7
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <MX_TIM2_Init+0x98>)
 800218e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <MX_TIM2_Init+0x98>)
 8002196:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800219a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <MX_TIM2_Init+0x98>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <MX_TIM2_Init+0x98>)
 80021a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <MX_TIM2_Init+0x98>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <MX_TIM2_Init+0x98>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021b6:	4814      	ldr	r0, [pc, #80]	; (8002208 <MX_TIM2_Init+0x98>)
 80021b8:	f003 fea2 	bl	8005f00 <HAL_TIM_Base_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80021c2:	f000 fa27 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021cc:	f107 0308 	add.w	r3, r7, #8
 80021d0:	4619      	mov	r1, r3
 80021d2:	480d      	ldr	r0, [pc, #52]	; (8002208 <MX_TIM2_Init+0x98>)
 80021d4:	f004 fa74 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80021de:	f000 fa19 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021e2:	2320      	movs	r3, #32
 80021e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021ea:	463b      	mov	r3, r7
 80021ec:	4619      	mov	r1, r3
 80021ee:	4806      	ldr	r0, [pc, #24]	; (8002208 <MX_TIM2_Init+0x98>)
 80021f0:	f004 fe2c 	bl	8006e4c <HAL_TIMEx_MasterConfigSynchronization>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021fa:	f000 fa0b 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000224 	.word	0x20000224

0800220c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002212:	f107 0308 	add.w	r3, r7, #8
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002220:	463b      	mov	r3, r7
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <MX_TIM3_Init+0x94>)
 800222a:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <MX_TIM3_Init+0x98>)
 800222c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <MX_TIM3_Init+0x94>)
 8002230:	2248      	movs	r2, #72	; 0x48
 8002232:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <MX_TIM3_Init+0x94>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <MX_TIM3_Init+0x94>)
 800223c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002240:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <MX_TIM3_Init+0x94>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <MX_TIM3_Init+0x94>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800224e:	4814      	ldr	r0, [pc, #80]	; (80022a0 <MX_TIM3_Init+0x94>)
 8002250:	f003 fe56 	bl	8005f00 <HAL_TIM_Base_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800225a:	f000 f9db 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002262:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	4619      	mov	r1, r3
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <MX_TIM3_Init+0x94>)
 800226c:	f004 fa28 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002276:	f000 f9cd 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002282:	463b      	mov	r3, r7
 8002284:	4619      	mov	r1, r3
 8002286:	4806      	ldr	r0, [pc, #24]	; (80022a0 <MX_TIM3_Init+0x94>)
 8002288:	f004 fde0 	bl	8006e4c <HAL_TIMEx_MasterConfigSynchronization>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002292:	f000 f9bf 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000026c 	.word	0x2000026c
 80022a4:	40000400 	.word	0x40000400

080022a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08e      	sub	sp, #56	; 0x38
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022bc:	f107 0320 	add.w	r3, r7, #32
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
 80022d4:	615a      	str	r2, [r3, #20]
 80022d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022d8:	4b2c      	ldr	r3, [pc, #176]	; (800238c <MX_TIM4_Init+0xe4>)
 80022da:	4a2d      	ldr	r2, [pc, #180]	; (8002390 <MX_TIM4_Init+0xe8>)
 80022dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80022de:	4b2b      	ldr	r3, [pc, #172]	; (800238c <MX_TIM4_Init+0xe4>)
 80022e0:	2247      	movs	r2, #71	; 0x47
 80022e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <MX_TIM4_Init+0xe4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 511;
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <MX_TIM4_Init+0xe4>)
 80022ec:	f240 12ff 	movw	r2, #511	; 0x1ff
 80022f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <MX_TIM4_Init+0xe4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <MX_TIM4_Init+0xe4>)
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022fe:	4823      	ldr	r0, [pc, #140]	; (800238c <MX_TIM4_Init+0xe4>)
 8002300:	f003 fdfe 	bl	8005f00 <HAL_TIM_Base_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800230a:	f000 f983 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800230e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002314:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002318:	4619      	mov	r1, r3
 800231a:	481c      	ldr	r0, [pc, #112]	; (800238c <MX_TIM4_Init+0xe4>)
 800231c:	f004 f9d0 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002326:	f000 f975 	bl	8002614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800232a:	4818      	ldr	r0, [pc, #96]	; (800238c <MX_TIM4_Init+0xe4>)
 800232c:	f003 fef4 	bl	8006118 <HAL_TIM_PWM_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002336:	f000 f96d 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002342:	f107 0320 	add.w	r3, r7, #32
 8002346:	4619      	mov	r1, r3
 8002348:	4810      	ldr	r0, [pc, #64]	; (800238c <MX_TIM4_Init+0xe4>)
 800234a:	f004 fd7f 	bl	8006e4c <HAL_TIMEx_MasterConfigSynchronization>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002354:	f000 f95e 	bl	8002614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002358:	2360      	movs	r3, #96	; 0x60
 800235a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	2200      	movs	r2, #0
 800236c:	4619      	mov	r1, r3
 800236e:	4807      	ldr	r0, [pc, #28]	; (800238c <MX_TIM4_Init+0xe4>)
 8002370:	f004 f8e4 	bl	800653c <HAL_TIM_PWM_ConfigChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800237a:	f000 f94b 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800237e:	4803      	ldr	r0, [pc, #12]	; (800238c <MX_TIM4_Init+0xe4>)
 8002380:	f000 fdde 	bl	8002f40 <HAL_TIM_MspPostInit>

}
 8002384:	bf00      	nop
 8002386:	3738      	adds	r7, #56	; 0x38
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200002b4 	.word	0x200002b4
 8002390:	40000800 	.word	0x40000800

08002394 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08e      	sub	sp, #56	; 0x38
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800239a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a8:	f107 0320 	add.w	r3, r7, #32
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
 80023c0:	615a      	str	r2, [r3, #20]
 80023c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023c4:	4b2c      	ldr	r3, [pc, #176]	; (8002478 <MX_TIM5_Init+0xe4>)
 80023c6:	4a2d      	ldr	r2, [pc, #180]	; (800247c <MX_TIM5_Init+0xe8>)
 80023c8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023ca:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <MX_TIM5_Init+0xe4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d0:	4b29      	ldr	r3, [pc, #164]	; (8002478 <MX_TIM5_Init+0xe4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <MX_TIM5_Init+0xe4>)
 80023d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023dc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <MX_TIM5_Init+0xe4>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e4:	4b24      	ldr	r3, [pc, #144]	; (8002478 <MX_TIM5_Init+0xe4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023ea:	4823      	ldr	r0, [pc, #140]	; (8002478 <MX_TIM5_Init+0xe4>)
 80023ec:	f003 fd88 	bl	8005f00 <HAL_TIM_Base_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80023f6:	f000 f90d 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002400:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002404:	4619      	mov	r1, r3
 8002406:	481c      	ldr	r0, [pc, #112]	; (8002478 <MX_TIM5_Init+0xe4>)
 8002408:	f004 f95a 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002412:	f000 f8ff 	bl	8002614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002416:	4818      	ldr	r0, [pc, #96]	; (8002478 <MX_TIM5_Init+0xe4>)
 8002418:	f003 fe7e 	bl	8006118 <HAL_TIM_PWM_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002422:	f000 f8f7 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800242e:	f107 0320 	add.w	r3, r7, #32
 8002432:	4619      	mov	r1, r3
 8002434:	4810      	ldr	r0, [pc, #64]	; (8002478 <MX_TIM5_Init+0xe4>)
 8002436:	f004 fd09 	bl	8006e4c <HAL_TIMEx_MasterConfigSynchronization>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002440:	f000 f8e8 	bl	8002614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002444:	2360      	movs	r3, #96	; 0x60
 8002446:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2200      	movs	r2, #0
 8002458:	4619      	mov	r1, r3
 800245a:	4807      	ldr	r0, [pc, #28]	; (8002478 <MX_TIM5_Init+0xe4>)
 800245c:	f004 f86e 	bl	800653c <HAL_TIM_PWM_ConfigChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002466:	f000 f8d5 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800246a:	4803      	ldr	r0, [pc, #12]	; (8002478 <MX_TIM5_Init+0xe4>)
 800246c:	f000 fd68 	bl	8002f40 <HAL_TIM_MspPostInit>

}
 8002470:	bf00      	nop
 8002472:	3738      	adds	r7, #56	; 0x38
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200002fc 	.word	0x200002fc
 800247c:	40000c00 	.word	0x40000c00

08002480 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <MX_USART2_UART_Init+0x50>)
 8002488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 800248c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 80024a6:	220c      	movs	r2, #12
 80024a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 80024b8:	f004 fd4a 	bl	8006f50 <HAL_UART_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024c2:	f000 f8a7 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000344 	.word	0x20000344
 80024d0:	40004400 	.word	0x40004400

080024d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b45      	ldr	r3, [pc, #276]	; (8002604 <MX_GPIO_Init+0x130>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a44      	ldr	r2, [pc, #272]	; (8002604 <MX_GPIO_Init+0x130>)
 80024f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b42      	ldr	r3, [pc, #264]	; (8002604 <MX_GPIO_Init+0x130>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b3e      	ldr	r3, [pc, #248]	; (8002604 <MX_GPIO_Init+0x130>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a3d      	ldr	r2, [pc, #244]	; (8002604 <MX_GPIO_Init+0x130>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <MX_GPIO_Init+0x130>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	4b37      	ldr	r3, [pc, #220]	; (8002604 <MX_GPIO_Init+0x130>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a36      	ldr	r2, [pc, #216]	; (8002604 <MX_GPIO_Init+0x130>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b34      	ldr	r3, [pc, #208]	; (8002604 <MX_GPIO_Init+0x130>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	4b30      	ldr	r3, [pc, #192]	; (8002604 <MX_GPIO_Init+0x130>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a2f      	ldr	r2, [pc, #188]	; (8002604 <MX_GPIO_Init+0x130>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <MX_GPIO_Init+0x130>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	4b29      	ldr	r3, [pc, #164]	; (8002604 <MX_GPIO_Init+0x130>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a28      	ldr	r2, [pc, #160]	; (8002604 <MX_GPIO_Init+0x130>)
 8002564:	f043 0308 	orr.w	r3, r3, #8
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b26      	ldr	r3, [pc, #152]	; (8002604 <MX_GPIO_Init+0x130>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	210b      	movs	r1, #11
 800257a:	4823      	ldr	r0, [pc, #140]	; (8002608 <MX_GPIO_Init+0x134>)
 800257c:	f001 fe12 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002580:	2200      	movs	r2, #0
 8002582:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002586:	4821      	ldr	r0, [pc, #132]	; (800260c <MX_GPIO_Init+0x138>)
 8002588:	f001 fe0c 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800258c:	2201      	movs	r2, #1
 800258e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002592:	481e      	ldr	r0, [pc, #120]	; (800260c <MX_GPIO_Init+0x138>)
 8002594:	f001 fe06 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800259e:	481c      	ldr	r0, [pc, #112]	; (8002610 <MX_GPIO_Init+0x13c>)
 80025a0:	f001 fe00 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80025a4:	230b      	movs	r3, #11
 80025a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	4813      	ldr	r0, [pc, #76]	; (8002608 <MX_GPIO_Init+0x134>)
 80025bc:	f001 fc56 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80025c0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80025c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	480c      	ldr	r0, [pc, #48]	; (800260c <MX_GPIO_Init+0x138>)
 80025da:	f001 fc47 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	4806      	ldr	r0, [pc, #24]	; (8002610 <MX_GPIO_Init+0x13c>)
 80025f8:	f001 fc38 	bl	8003e6c <HAL_GPIO_Init>

}
 80025fc:	bf00      	nop
 80025fe:	3728      	adds	r7, #40	; 0x28
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40020400 	.word	0x40020400

08002614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002618:	b672      	cpsid	i
}
 800261a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800261c:	e7fe      	b.n	800261c <Error_Handler+0x8>

0800261e <OLED_DrawBitmap>:

}


void OLED_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	60ba      	str	r2, [r7, #8]
 8002626:	461a      	mov	r2, r3
 8002628:	4603      	mov	r3, r0
 800262a:	81fb      	strh	r3, [r7, #14]
 800262c:	460b      	mov	r3, r1
 800262e:	81bb      	strh	r3, [r7, #12]
 8002630:	4613      	mov	r3, r2
 8002632:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scan line pad = whole byte
 8002634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002638:	3307      	adds	r3, #7
 800263a:	2b00      	cmp	r3, #0
 800263c:	da00      	bge.n	8002640 <OLED_DrawBitmap+0x22>
 800263e:	3307      	adds	r3, #7
 8002640:	10db      	asrs	r3, r3, #3
 8002642:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002648:	2300      	movs	r3, #0
 800264a:	82bb      	strh	r3, [r7, #20]
 800264c:	e044      	b.n	80026d8 <OLED_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800264e:	2300      	movs	r3, #0
 8002650:	827b      	strh	r3, [r7, #18]
 8002652:	e02f      	b.n	80026b4 <OLED_DrawBitmap+0x96>
        {
            if(i & 7)
 8002654:	8a7b      	ldrh	r3, [r7, #18]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <OLED_DrawBitmap+0x48>
            {
               byte <<= 1;
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	75fb      	strb	r3, [r7, #23]
 8002664:	e012      	b.n	800268c <OLED_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002666:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800266a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800266e:	fb03 f202 	mul.w	r2, r3, r2
 8002672:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002676:	2b00      	cmp	r3, #0
 8002678:	da00      	bge.n	800267c <OLED_DrawBitmap+0x5e>
 800267a:	3307      	adds	r3, #7
 800267c:	10db      	asrs	r3, r3, #3
 800267e:	b21b      	sxth	r3, r3
 8002680:	4413      	add	r3, r2
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4413      	add	r3, r2
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) OLED_DrawPixel(x+i, y, color);
 800268c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002690:	2b00      	cmp	r3, #0
 8002692:	da09      	bge.n	80026a8 <OLED_DrawBitmap+0x8a>
 8002694:	89fa      	ldrh	r2, [r7, #14]
 8002696:	8a7b      	ldrh	r3, [r7, #18]
 8002698:	4413      	add	r3, r2
 800269a:	b29b      	uxth	r3, r3
 800269c:	89b9      	ldrh	r1, [r7, #12]
 800269e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f928 	bl	80028f8 <OLED_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80026a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	827b      	strh	r3, [r7, #18]
 80026b4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dbc9      	blt.n	8002654 <OLED_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80026c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	82bb      	strh	r3, [r7, #20]
 80026cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	81bb      	strh	r3, [r7, #12]
 80026d8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80026dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	dbb4      	blt.n	800264e <OLED_DrawBitmap+0x30>
        }
    }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <OLED_Init>:





uint8_t OLED_Init(void) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0

	/* Init I2C */
	OLED_I2C_Init();
 80026f6:	f000 fa23 	bl	8002b40 <OLED_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, OLED_I2C_ADDR, 1, 20000) != HAL_OK) {
 80026fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80026fe:	2201      	movs	r2, #1
 8002700:	2178      	movs	r1, #120	; 0x78
 8002702:	4858      	ldr	r0, [pc, #352]	; (8002864 <OLED_Init+0x174>)
 8002704:	f001 ffc4 	bl	8004690 <HAL_I2C_IsDeviceReady>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <OLED_Init+0x22>
		/* Return false */
		return 0;
 800270e:	2300      	movs	r3, #0
 8002710:	e0a4      	b.n	800285c <OLED_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002712:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002716:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002718:	e002      	b.n	8002720 <OLED_Init+0x30>
		p--;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3b01      	subs	r3, #1
 800271e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f9      	bne.n	800271a <OLED_Init+0x2a>
	
	/* Init LCD */
	OLED_WRITECOMMAND(0xAE); //display off
 8002726:	22ae      	movs	r2, #174	; 0xae
 8002728:	2100      	movs	r1, #0
 800272a:	2078      	movs	r0, #120	; 0x78
 800272c:	f000 fa84 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002730:	2220      	movs	r2, #32
 8002732:	2100      	movs	r1, #0
 8002734:	2078      	movs	r0, #120	; 0x78
 8002736:	f000 fa7f 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800273a:	2210      	movs	r2, #16
 800273c:	2100      	movs	r1, #0
 800273e:	2078      	movs	r0, #120	; 0x78
 8002740:	f000 fa7a 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002744:	22b0      	movs	r2, #176	; 0xb0
 8002746:	2100      	movs	r1, #0
 8002748:	2078      	movs	r0, #120	; 0x78
 800274a:	f000 fa75 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800274e:	22c8      	movs	r2, #200	; 0xc8
 8002750:	2100      	movs	r1, #0
 8002752:	2078      	movs	r0, #120	; 0x78
 8002754:	f000 fa70 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //---set low column address
 8002758:	2200      	movs	r2, #0
 800275a:	2100      	movs	r1, #0
 800275c:	2078      	movs	r0, #120	; 0x78
 800275e:	f000 fa6b 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //---set high column address
 8002762:	2210      	movs	r2, #16
 8002764:	2100      	movs	r1, #0
 8002766:	2078      	movs	r0, #120	; 0x78
 8002768:	f000 fa66 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x40); //--set start line address
 800276c:	2240      	movs	r2, #64	; 0x40
 800276e:	2100      	movs	r1, #0
 8002770:	2078      	movs	r0, #120	; 0x78
 8002772:	f000 fa61 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x81); //--set contrast control register
 8002776:	2281      	movs	r2, #129	; 0x81
 8002778:	2100      	movs	r1, #0
 800277a:	2078      	movs	r0, #120	; 0x78
 800277c:	f000 fa5c 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xFF);
 8002780:	22ff      	movs	r2, #255	; 0xff
 8002782:	2100      	movs	r1, #0
 8002784:	2078      	movs	r0, #120	; 0x78
 8002786:	f000 fa57 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800278a:	22a1      	movs	r2, #161	; 0xa1
 800278c:	2100      	movs	r1, #0
 800278e:	2078      	movs	r0, #120	; 0x78
 8002790:	f000 fa52 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA6); //--set normal display
 8002794:	22a6      	movs	r2, #166	; 0xa6
 8002796:	2100      	movs	r1, #0
 8002798:	2078      	movs	r0, #120	; 0x78
 800279a:	f000 fa4d 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800279e:	22a8      	movs	r2, #168	; 0xa8
 80027a0:	2100      	movs	r1, #0
 80027a2:	2078      	movs	r0, #120	; 0x78
 80027a4:	f000 fa48 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x3F); //
 80027a8:	223f      	movs	r2, #63	; 0x3f
 80027aa:	2100      	movs	r1, #0
 80027ac:	2078      	movs	r0, #120	; 0x78
 80027ae:	f000 fa43 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80027b2:	22a4      	movs	r2, #164	; 0xa4
 80027b4:	2100      	movs	r1, #0
 80027b6:	2078      	movs	r0, #120	; 0x78
 80027b8:	f000 fa3e 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD3); //-set display offset
 80027bc:	22d3      	movs	r2, #211	; 0xd3
 80027be:	2100      	movs	r1, #0
 80027c0:	2078      	movs	r0, #120	; 0x78
 80027c2:	f000 fa39 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //-not offset
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	2078      	movs	r0, #120	; 0x78
 80027cc:	f000 fa34 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80027d0:	22d5      	movs	r2, #213	; 0xd5
 80027d2:	2100      	movs	r1, #0
 80027d4:	2078      	movs	r0, #120	; 0x78
 80027d6:	f000 fa2f 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xF0); //--set divide ratio
 80027da:	22f0      	movs	r2, #240	; 0xf0
 80027dc:	2100      	movs	r1, #0
 80027de:	2078      	movs	r0, #120	; 0x78
 80027e0:	f000 fa2a 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD9); //--set pre-charge period
 80027e4:	22d9      	movs	r2, #217	; 0xd9
 80027e6:	2100      	movs	r1, #0
 80027e8:	2078      	movs	r0, #120	; 0x78
 80027ea:	f000 fa25 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x22); //
 80027ee:	2222      	movs	r2, #34	; 0x22
 80027f0:	2100      	movs	r1, #0
 80027f2:	2078      	movs	r0, #120	; 0x78
 80027f4:	f000 fa20 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80027f8:	22da      	movs	r2, #218	; 0xda
 80027fa:	2100      	movs	r1, #0
 80027fc:	2078      	movs	r0, #120	; 0x78
 80027fe:	f000 fa1b 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x12);
 8002802:	2212      	movs	r2, #18
 8002804:	2100      	movs	r1, #0
 8002806:	2078      	movs	r0, #120	; 0x78
 8002808:	f000 fa16 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDB); //--set vcomh
 800280c:	22db      	movs	r2, #219	; 0xdb
 800280e:	2100      	movs	r1, #0
 8002810:	2078      	movs	r0, #120	; 0x78
 8002812:	f000 fa11 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002816:	2220      	movs	r2, #32
 8002818:	2100      	movs	r1, #0
 800281a:	2078      	movs	r0, #120	; 0x78
 800281c:	f000 fa0c 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002820:	228d      	movs	r2, #141	; 0x8d
 8002822:	2100      	movs	r1, #0
 8002824:	2078      	movs	r0, #120	; 0x78
 8002826:	f000 fa07 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x14); //
 800282a:	2214      	movs	r2, #20
 800282c:	2100      	movs	r1, #0
 800282e:	2078      	movs	r0, #120	; 0x78
 8002830:	f000 fa02 	bl	8002c38 <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xAF); //--turn on OLED panel
 8002834:	22af      	movs	r2, #175	; 0xaf
 8002836:	2100      	movs	r1, #0
 8002838:	2078      	movs	r0, #120	; 0x78
 800283a:	f000 f9fd 	bl	8002c38 <OLED_I2C_Write>
	


	/* Clear screen */
	OLED_Fill(OLED_COLOR_BLACK);
 800283e:	2000      	movs	r0, #0
 8002840:	f000 f842 	bl	80028c8 <OLED_Fill>
	
	/* Update screen */
	OLED_UpdateScreen();
 8002844:	f000 f812 	bl	800286c <OLED_UpdateScreen>
	
	/* Set default values */
	OLED.CurrentX = 0;
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <OLED_Init+0x178>)
 800284a:	2200      	movs	r2, #0
 800284c:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <OLED_Init+0x178>)
 8002850:	2200      	movs	r2, #0
 8002852:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	OLED.Initialized = 1;
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <OLED_Init+0x178>)
 8002856:	2201      	movs	r2, #1
 8002858:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800285a:	2301      	movs	r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000168 	.word	0x20000168
 8002868:	200007dc 	.word	0x200007dc

0800286c <OLED_UpdateScreen>:

void OLED_UpdateScreen(void) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002872:	2300      	movs	r3, #0
 8002874:	71fb      	strb	r3, [r7, #7]
 8002876:	e01d      	b.n	80028b4 <OLED_UpdateScreen+0x48>
		OLED_WRITECOMMAND(0xB0 + m);
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	3b50      	subs	r3, #80	; 0x50
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	2100      	movs	r1, #0
 8002882:	2078      	movs	r0, #120	; 0x78
 8002884:	f000 f9d8 	bl	8002c38 <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x00);
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	2078      	movs	r0, #120	; 0x78
 800288e:	f000 f9d3 	bl	8002c38 <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x10);
 8002892:	2210      	movs	r2, #16
 8002894:	2100      	movs	r1, #0
 8002896:	2078      	movs	r0, #120	; 0x78
 8002898:	f000 f9ce 	bl	8002c38 <OLED_I2C_Write>
		
		/* Write multi data */
		OLED_I2C_WriteMulti(OLED_I2C_ADDR, 0x40, &OLED_Buffer[OLED_WIDTH * m], OLED_WIDTH);
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	01db      	lsls	r3, r3, #7
 80028a0:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <OLED_UpdateScreen+0x58>)
 80028a2:	441a      	add	r2, r3
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	2140      	movs	r1, #64	; 0x40
 80028a8:	2078      	movs	r0, #120	; 0x78
 80028aa:	f000 f95f 	bl	8002b6c <OLED_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	3301      	adds	r3, #1
 80028b2:	71fb      	strb	r3, [r7, #7]
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	2b07      	cmp	r3, #7
 80028b8:	d9de      	bls.n	8002878 <OLED_UpdateScreen+0xc>
	}
}
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200003dc 	.word	0x200003dc

080028c8 <OLED_Fill>:
	for (i = 0; i < sizeof(OLED_Buffer); i++) {
		OLED_Buffer[i] = ~OLED_Buffer[i];
	}
}

void OLED_Fill(OLED_COLOR_t color) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(OLED_Buffer, (color == OLED_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(OLED_Buffer));
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <OLED_Fill+0x14>
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <OLED_Fill+0x16>
 80028dc:	23ff      	movs	r3, #255	; 0xff
 80028de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028e2:	4619      	mov	r1, r3
 80028e4:	4803      	ldr	r0, [pc, #12]	; (80028f4 <OLED_Fill+0x2c>)
 80028e6:	f005 fad5 	bl	8007e94 <memset>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200003dc 	.word	0x200003dc

080028f8 <OLED_DrawPixel>:

void OLED_DrawPixel(uint16_t x, uint16_t y, OLED_COLOR_t color) {
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]
 8002902:	460b      	mov	r3, r1
 8002904:	80bb      	strh	r3, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	70fb      	strb	r3, [r7, #3]
	if (
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	2b7f      	cmp	r3, #127	; 0x7f
 800290e:	d848      	bhi.n	80029a2 <OLED_DrawPixel+0xaa>
		x >= OLED_WIDTH ||
 8002910:	88bb      	ldrh	r3, [r7, #4]
 8002912:	2b3f      	cmp	r3, #63	; 0x3f
 8002914:	d845      	bhi.n	80029a2 <OLED_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (OLED.Inverted) {
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <OLED_DrawPixel+0xb8>)
 8002918:	791b      	ldrb	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d006      	beq.n	800292c <OLED_DrawPixel+0x34>
		color = (OLED_COLOR_t)!color;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == OLED_COLOR_WHITE) {
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d11a      	bne.n	8002968 <OLED_DrawPixel+0x70>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	88bb      	ldrh	r3, [r7, #4]
 8002936:	08db      	lsrs	r3, r3, #3
 8002938:	b298      	uxth	r0, r3
 800293a:	4603      	mov	r3, r0
 800293c:	01db      	lsls	r3, r3, #7
 800293e:	4413      	add	r3, r2
 8002940:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <OLED_DrawPixel+0xbc>)
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	b25a      	sxtb	r2, r3
 8002946:	88bb      	ldrh	r3, [r7, #4]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	b25b      	sxtb	r3, r3
 8002954:	4313      	orrs	r3, r2
 8002956:	b259      	sxtb	r1, r3
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	4603      	mov	r3, r0
 800295c:	01db      	lsls	r3, r3, #7
 800295e:	4413      	add	r3, r2
 8002960:	b2c9      	uxtb	r1, r1
 8002962:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <OLED_DrawPixel+0xbc>)
 8002964:	54d1      	strb	r1, [r2, r3]
 8002966:	e01d      	b.n	80029a4 <OLED_DrawPixel+0xac>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8002968:	88fa      	ldrh	r2, [r7, #6]
 800296a:	88bb      	ldrh	r3, [r7, #4]
 800296c:	08db      	lsrs	r3, r3, #3
 800296e:	b298      	uxth	r0, r3
 8002970:	4603      	mov	r3, r0
 8002972:	01db      	lsls	r3, r3, #7
 8002974:	4413      	add	r3, r2
 8002976:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <OLED_DrawPixel+0xbc>)
 8002978:	5cd3      	ldrb	r3, [r2, r3]
 800297a:	b25a      	sxtb	r2, r3
 800297c:	88bb      	ldrh	r3, [r7, #4]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	2101      	movs	r1, #1
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	b25b      	sxtb	r3, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	b25b      	sxtb	r3, r3
 800298e:	4013      	ands	r3, r2
 8002990:	b259      	sxtb	r1, r3
 8002992:	88fa      	ldrh	r2, [r7, #6]
 8002994:	4603      	mov	r3, r0
 8002996:	01db      	lsls	r3, r3, #7
 8002998:	4413      	add	r3, r2
 800299a:	b2c9      	uxtb	r1, r1
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <OLED_DrawPixel+0xbc>)
 800299e:	54d1      	strb	r1, [r2, r3]
 80029a0:	e000      	b.n	80029a4 <OLED_DrawPixel+0xac>
		return;
 80029a2:	bf00      	nop
	}
}
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	200007dc 	.word	0x200007dc
 80029b4:	200003dc 	.word	0x200003dc

080029b8 <OLED_GotoXY>:

void OLED_GotoXY(uint16_t x, uint16_t y) {
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	460a      	mov	r2, r1
 80029c2:	80fb      	strh	r3, [r7, #6]
 80029c4:	4613      	mov	r3, r2
 80029c6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	OLED.CurrentX = x;
 80029c8:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <OLED_GotoXY+0x28>)
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	8013      	strh	r3, [r2, #0]
	OLED.CurrentY = y;
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <OLED_GotoXY+0x28>)
 80029d0:	88bb      	ldrh	r3, [r7, #4]
 80029d2:	8053      	strh	r3, [r2, #2]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	200007dc 	.word	0x200007dc

080029e4 <OLED_Putc>:

char OLED_Putc(char ch, FontDef_t* Font, OLED_COLOR_t color) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 80029f4:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <OLED_Putc+0xfc>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4413      	add	r3, r2
	if (
 8002a00:	2b7f      	cmp	r3, #127	; 0x7f
 8002a02:	dc07      	bgt.n	8002a14 <OLED_Putc+0x30>
		OLED_HEIGHT <= (OLED.CurrentY + Font->FontHeight)
 8002a04:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <OLED_Putc+0xfc>)
 8002a06:	885b      	ldrh	r3, [r3, #2]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	4413      	add	r3, r2
		OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 8002a10:	2b3f      	cmp	r3, #63	; 0x3f
 8002a12:	dd01      	ble.n	8002a18 <OLED_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e05e      	b.n	8002ad6 <OLED_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e04b      	b.n	8002ab6 <OLED_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	3b20      	subs	r3, #32
 8002a26:	6839      	ldr	r1, [r7, #0]
 8002a28:	7849      	ldrb	r1, [r1, #1]
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4619      	mov	r1, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	440b      	add	r3, r1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	e030      	b.n	8002aa4 <OLED_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d010      	beq.n	8002a74 <OLED_Putc+0x90>
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t) color);
 8002a52:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <OLED_Putc+0xfc>)
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	b298      	uxth	r0, r3
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <OLED_Putc+0xfc>)
 8002a60:	885a      	ldrh	r2, [r3, #2]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	79ba      	ldrb	r2, [r7, #6]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f7ff ff43 	bl	80028f8 <OLED_DrawPixel>
 8002a72:	e014      	b.n	8002a9e <OLED_Putc+0xba>
			} else {
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t)!color);
 8002a74:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <OLED_Putc+0xfc>)
 8002a76:	881a      	ldrh	r2, [r3, #0]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	b298      	uxth	r0, r3
 8002a80:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <OLED_Putc+0xfc>)
 8002a82:	885a      	ldrh	r2, [r3, #2]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	b299      	uxth	r1, r3
 8002a8c:	79bb      	ldrb	r3, [r7, #6]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f7ff ff2d 	bl	80028f8 <OLED_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d3c8      	bcc.n	8002a42 <OLED_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	785b      	ldrb	r3, [r3, #1]
 8002aba:	461a      	mov	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d3ad      	bcc.n	8002a1e <OLED_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	OLED.CurrentX += Font->FontWidth;
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <OLED_Putc+0xfc>)
 8002ac4:	881a      	ldrh	r2, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <OLED_Putc+0xfc>)
 8002ad2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200007dc 	.word	0x200007dc

08002ae4 <OLED_Puts>:

char OLED_Puts(char* str, FontDef_t* Font, OLED_COLOR_t color) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002af2:	e012      	b.n	8002b1a <OLED_Puts+0x36>
		/* Write character by character */
		if (OLED_Putc(*str, Font, color) != *str) {
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	79fa      	ldrb	r2, [r7, #7]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff71 	bl	80029e4 <OLED_Putc>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461a      	mov	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d002      	beq.n	8002b14 <OLED_Puts+0x30>
			/* Return error */
			return *str;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	e008      	b.n	8002b26 <OLED_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3301      	adds	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1e8      	bne.n	8002af4 <OLED_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	781b      	ldrb	r3, [r3, #0]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <OLED_Clear>:

 


void OLED_Clear (void)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	af00      	add	r7, sp, #0
	OLED_Fill (0);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7ff fec8 	bl	80028c8 <OLED_Fill>
    OLED_UpdateScreen();
 8002b38:	f7ff fe98 	bl	800286c <OLED_UpdateScreen>
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <OLED_I2C_Init>:
	OLED_WRITECOMMAND(0x8D);
	OLED_WRITECOMMAND(0x10);
	OLED_WRITECOMMAND(0xAE);
}

void OLED_I2C_Init() {
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <OLED_I2C_Init+0x28>)
 8002b48:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002b4a:	e002      	b.n	8002b52 <OLED_I2C_Init+0x12>
		p--;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f9      	bne.n	8002b4c <OLED_I2C_Init+0xc>

}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	0003d090 	.word	0x0003d090

08002b6c <OLED_I2C_WriteMulti>:

void OLED_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b0c7      	sub	sp, #284	; 0x11c
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	4604      	mov	r4, r0
 8002b74:	4608      	mov	r0, r1
 8002b76:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002b7a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002b7e:	600a      	str	r2, [r1, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b86:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b92:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002b96:	4602      	mov	r2, r0
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ba2:	460a      	mov	r2, r1
 8002ba4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002ba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002baa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002bae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002bb2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002bb6:	7812      	ldrb	r2, [r2, #0]
 8002bb8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002bc0:	e015      	b.n	8002bee <OLED_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002bc2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002bc6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002bca:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	441a      	add	r2, r3
 8002bd2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	7811      	ldrb	r1, [r2, #0]
 8002bda:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002bde:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002be2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002be4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002be8:	3301      	adds	r3, #1
 8002bea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002bee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002bf8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002bfc:	8812      	ldrh	r2, [r2, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d8df      	bhi.n	8002bc2 <OLED_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002c02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c06:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b299      	uxth	r1, r3
 8002c0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f107 020c 	add.w	r2, r7, #12
 8002c20:	200a      	movs	r0, #10
 8002c22:	9000      	str	r0, [sp, #0]
 8002c24:	4803      	ldr	r0, [pc, #12]	; (8002c34 <OLED_I2C_WriteMulti+0xc8>)
 8002c26:	f001 fc35 	bl	8004494 <HAL_I2C_Master_Transmit>
}
 8002c2a:	bf00      	nop
 8002c2c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd90      	pop	{r4, r7, pc}
 8002c34:	20000168 	.word	0x20000168

08002c38 <OLED_I2C_Write>:


void OLED_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
 8002c42:	460b      	mov	r3, r1
 8002c44:	71bb      	strb	r3, [r7, #6]
 8002c46:	4613      	mov	r3, r2
 8002c48:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002c4a:	79bb      	ldrb	r3, [r7, #6]
 8002c4c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002c4e:	797b      	ldrb	r3, [r7, #5]
 8002c50:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	b299      	uxth	r1, r3
 8002c56:	f107 020c 	add.w	r2, r7, #12
 8002c5a:	230a      	movs	r3, #10
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2302      	movs	r3, #2
 8002c60:	4803      	ldr	r0, [pc, #12]	; (8002c70 <OLED_I2C_Write+0x38>)
 8002c62:	f001 fc17 	bl	8004494 <HAL_I2C_Master_Transmit>
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000168 	.word	0x20000168

08002c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800

08002cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_ADC_MspInit+0x7c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d127      	bne.n	8002d36 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d22:	2303      	movs	r3, #3
 8002d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4805      	ldr	r0, [pc, #20]	; (8002d48 <HAL_ADC_MspInit+0x84>)
 8002d32:	f001 f89b 	bl	8003e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d36:	bf00      	nop
 8002d38:	3728      	adds	r7, #40	; 0x28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40012000 	.word	0x40012000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020400 	.word	0x40020400

08002d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <HAL_I2C_MspInit+0x84>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d12b      	bne.n	8002dc6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <HAL_I2C_MspInit+0x88>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <HAL_I2C_MspInit+0x88>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_I2C_MspInit+0x88>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d8a:	23c0      	movs	r3, #192	; 0xc0
 8002d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d8e:	2312      	movs	r3, #18
 8002d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d96:	2303      	movs	r3, #3
 8002d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4619      	mov	r1, r3
 8002da4:	480c      	ldr	r0, [pc, #48]	; (8002dd8 <HAL_I2C_MspInit+0x8c>)
 8002da6:	f001 f861 	bl	8003e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_I2C_MspInit+0x88>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a08      	ldr	r2, [pc, #32]	; (8002dd4 <HAL_I2C_MspInit+0x88>)
 8002db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_I2C_MspInit+0x88>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002dc6:	bf00      	nop
 8002dc8:	3728      	adds	r7, #40	; 0x28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40005400 	.word	0x40005400
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40020400 	.word	0x40020400

08002ddc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002de4:	f107 0308 	add.w	r3, r7, #8
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
 8002df4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a10      	ldr	r2, [pc, #64]	; (8002e3c <HAL_RTC_MspInit+0x60>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d119      	bne.n	8002e34 <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e00:	2302      	movs	r3, #2
 8002e02:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e08:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e0a:	f107 0308 	add.w	r3, r7, #8
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 fc0a 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002e1a:	f7ff fbfb 	bl	8002614 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_RTC_MspInit+0x64>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2100      	movs	r1, #0
 8002e28:	2003      	movs	r0, #3
 8002e2a:	f000 ff56 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002e2e:	2003      	movs	r0, #3
 8002e30:	f000 ff6f 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e34:	bf00      	nop
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40002800 	.word	0x40002800
 8002e40:	42470e3c 	.word	0x42470e3c

08002e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a36      	ldr	r2, [pc, #216]	; (8002f2c <HAL_TIM_Base_MspInit+0xe8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10e      	bne.n	8002e74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	4b35      	ldr	r3, [pc, #212]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	4a34      	ldr	r2, [pc, #208]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6453      	str	r3, [r2, #68]	; 0x44
 8002e66:	4b32      	ldr	r3, [pc, #200]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002e72:	e056      	b.n	8002f22 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7c:	d116      	bne.n	8002eac <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8e:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	201c      	movs	r0, #28
 8002ea0:	f000 ff1b 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ea4:	201c      	movs	r0, #28
 8002ea6:	f000 ff34 	bl	8003d12 <HAL_NVIC_EnableIRQ>
}
 8002eaa:	e03a      	b.n	8002f22 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <HAL_TIM_Base_MspInit+0xf0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697b      	ldr	r3, [r7, #20]
}
 8002ed2:	e026      	b.n	8002f22 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_TIM_Base_MspInit+0xf4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10e      	bne.n	8002efc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002ee8:	f043 0304 	orr.w	r3, r3, #4
 8002eec:	6413      	str	r3, [r2, #64]	; 0x40
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]
}
 8002efa:	e012      	b.n	8002f22 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM5)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <HAL_TIM_Base_MspInit+0xf8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10d      	bne.n	8002f22 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002f10:	f043 0308 	orr.w	r3, r3, #8
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_TIM_Base_MspInit+0xec>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800
 8002f3c:	40000c00 	.word	0x40000c00

08002f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <HAL_TIM_MspPostInit+0xb0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d11f      	bne.n	8002fa2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <HAL_TIM_MspPostInit+0xb4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a22      	ldr	r2, [pc, #136]	; (8002ff4 <HAL_TIM_MspPostInit+0xb4>)
 8002f6c:	f043 0308 	orr.w	r3, r3, #8
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_TIM_MspPostInit+0xb4>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f84:	2302      	movs	r3, #2
 8002f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f90:	2302      	movs	r3, #2
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4817      	ldr	r0, [pc, #92]	; (8002ff8 <HAL_TIM_MspPostInit+0xb8>)
 8002f9c:	f000 ff66 	bl	8003e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002fa0:	e022      	b.n	8002fe8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <HAL_TIM_MspPostInit+0xbc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d11d      	bne.n	8002fe8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <HAL_TIM_MspPostInit+0xb4>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <HAL_TIM_MspPostInit+0xb4>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <HAL_TIM_MspPostInit+0xb4>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4807      	ldr	r0, [pc, #28]	; (8003000 <HAL_TIM_MspPostInit+0xc0>)
 8002fe4:	f000 ff42 	bl	8003e6c <HAL_GPIO_Init>
}
 8002fe8:	bf00      	nop
 8002fea:	3728      	adds	r7, #40	; 0x28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40020c00 	.word	0x40020c00
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40020000 	.word	0x40020000

08003004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a25      	ldr	r2, [pc, #148]	; (80030b8 <HAL_UART_MspInit+0xb4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d143      	bne.n	80030ae <HAL_UART_MspInit+0xaa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_UART_MspInit+0xb8>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a23      	ldr	r2, [pc, #140]	; (80030bc <HAL_UART_MspInit+0xb8>)
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
 8003036:	4b21      	ldr	r3, [pc, #132]	; (80030bc <HAL_UART_MspInit+0xb8>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_UART_MspInit+0xb8>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <HAL_UART_MspInit+0xb8>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <HAL_UART_MspInit+0xb8>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800305e:	2304      	movs	r3, #4
 8003060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800306e:	2307      	movs	r3, #7
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003072:	f107 0314 	add.w	r3, r7, #20
 8003076:	4619      	mov	r1, r3
 8003078:	4811      	ldr	r0, [pc, #68]	; (80030c0 <HAL_UART_MspInit+0xbc>)
 800307a:	f000 fef7 	bl	8003e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800307e:	2308      	movs	r3, #8
 8003080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003086:	2301      	movs	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308a:	2303      	movs	r3, #3
 800308c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800308e:	2307      	movs	r3, #7
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	4619      	mov	r1, r3
 8003098:	4809      	ldr	r0, [pc, #36]	; (80030c0 <HAL_UART_MspInit+0xbc>)
 800309a:	f000 fee7 	bl	8003e6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2100      	movs	r1, #0
 80030a2:	2026      	movs	r0, #38	; 0x26
 80030a4:	f000 fe19 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030a8:	2026      	movs	r0, #38	; 0x26
 80030aa:	f000 fe32 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030ae:	bf00      	nop
 80030b0:	3728      	adds	r7, #40	; 0x28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40004400 	.word	0x40004400
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020000 	.word	0x40020000

080030c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <NMI_Handler+0x4>

080030ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ce:	e7fe      	b.n	80030ce <HardFault_Handler+0x4>

080030d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <MemManage_Handler+0x4>

080030d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030da:	e7fe      	b.n	80030da <BusFault_Handler+0x4>

080030dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e0:	e7fe      	b.n	80030e0 <UsageFault_Handler+0x4>

080030e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003110:	f000 f8e6 	bl	80032e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003114:	bf00      	nop
 8003116:	bd80      	pop	{r7, pc}

08003118 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */
	HAL_PWR_DisableSleepOnExit ();
 800311c:	f001 fe1c 	bl	8004d58 <HAL_PWR_DisableSleepOnExit>
  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <RTC_WKUP_IRQHandler+0x14>)
 8003122:	f002 febf 	bl	8005ea4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	200001bc 	.word	0x200001bc

08003130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <TIM2_IRQHandler+0x10>)
 8003136:	f003 f8f9 	bl	800632c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000224 	.word	0x20000224

08003144 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <USART2_IRQHandler+0x10>)
 800314a:	f003 ff7f 	bl	800704c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000344 	.word	0x20000344

08003158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003160:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <_sbrk+0x5c>)
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <_sbrk+0x60>)
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800316c:	4b13      	ldr	r3, [pc, #76]	; (80031bc <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <_sbrk+0x64>)
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <_sbrk+0x68>)
 8003178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <_sbrk+0x64>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	429a      	cmp	r2, r3
 8003186:	d207      	bcs.n	8003198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003188:	f004 fe5a 	bl	8007e40 <__errno>
 800318c:	4603      	mov	r3, r0
 800318e:	220c      	movs	r2, #12
 8003190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e009      	b.n	80031ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <_sbrk+0x64>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <_sbrk+0x64>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <_sbrk+0x64>)
 80031a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031aa:	68fb      	ldr	r3, [r7, #12]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20020000 	.word	0x20020000
 80031b8:	00000400 	.word	0x00000400
 80031bc:	200007e4 	.word	0x200007e4
 80031c0:	20000800 	.word	0x20000800

080031c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <SystemInit+0x20>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <SystemInit+0x20>)
 80031d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003220 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031ec:	480d      	ldr	r0, [pc, #52]	; (8003224 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031ee:	490e      	ldr	r1, [pc, #56]	; (8003228 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031f0:	4a0e      	ldr	r2, [pc, #56]	; (800322c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f4:	e002      	b.n	80031fc <LoopCopyDataInit>

080031f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031fa:	3304      	adds	r3, #4

080031fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003200:	d3f9      	bcc.n	80031f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003204:	4c0b      	ldr	r4, [pc, #44]	; (8003234 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003208:	e001      	b.n	800320e <LoopFillZerobss>

0800320a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800320a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800320c:	3204      	adds	r2, #4

0800320e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800320e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003210:	d3fb      	bcc.n	800320a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003212:	f7ff ffd7 	bl	80031c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003216:	f004 fe19 	bl	8007e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800321a:	f7fe fd35 	bl	8001c88 <main>
  bx  lr    
 800321e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003228:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800322c:	0800b154 	.word	0x0800b154
  ldr r2, =_sbss
 8003230:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003234:	200007fc 	.word	0x200007fc

08003238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003238:	e7fe      	b.n	8003238 <ADC_IRQHandler>
	...

0800323c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <HAL_Init+0x40>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0d      	ldr	r2, [pc, #52]	; (800327c <HAL_Init+0x40>)
 8003246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800324a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_Init+0x40>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a0a      	ldr	r2, [pc, #40]	; (800327c <HAL_Init+0x40>)
 8003252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <HAL_Init+0x40>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a07      	ldr	r2, [pc, #28]	; (800327c <HAL_Init+0x40>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003264:	2003      	movs	r0, #3
 8003266:	f000 fd2d 	bl	8003cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800326a:	200f      	movs	r0, #15
 800326c:	f000 f808 	bl	8003280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003270:	f7ff fd00 	bl	8002c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023c00 	.word	0x40023c00

08003280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003288:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_InitTick+0x54>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_InitTick+0x58>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	4619      	mov	r1, r3
 8003292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003296:	fbb3 f3f1 	udiv	r3, r3, r1
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fd45 	bl	8003d2e <HAL_SYSTICK_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00e      	b.n	80032cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b0f      	cmp	r3, #15
 80032b2:	d80a      	bhi.n	80032ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032b4:	2200      	movs	r2, #0
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	f000 fd0d 	bl	8003cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032c0:	4a06      	ldr	r2, [pc, #24]	; (80032dc <HAL_InitTick+0x5c>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e000      	b.n	80032cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000010 	.word	0x20000010
 80032d8:	20000018 	.word	0x20000018
 80032dc:	20000014 	.word	0x20000014

080032e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_IncTick+0x20>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_IncTick+0x24>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4413      	add	r3, r2
 80032f0:	4a04      	ldr	r2, [pc, #16]	; (8003304 <HAL_IncTick+0x24>)
 80032f2:	6013      	str	r3, [r2, #0]
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000018 	.word	0x20000018
 8003304:	200007e8 	.word	0x200007e8

08003308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return uwTick;
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <HAL_GetTick+0x14>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	200007e8 	.word	0x200007e8

08003320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7ff ffee 	bl	8003308 <HAL_GetTick>
 800332c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d005      	beq.n	8003346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <HAL_Delay+0x44>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003346:	bf00      	nop
 8003348:	f7ff ffde 	bl	8003308 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	429a      	cmp	r2, r3
 8003356:	d8f7      	bhi.n	8003348 <HAL_Delay+0x28>
  {
  }
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000018 	.word	0x20000018

08003368 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_SuspendTick+0x1c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a04      	ldr	r2, [pc, #16]	; (8003384 <HAL_SuspendTick+0x1c>)
 8003372:	f023 0302 	bic.w	r3, r3, #2
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000e010 	.word	0xe000e010

08003388 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_ResumeTick+0x1c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <HAL_ResumeTick+0x1c>)
 8003392:	f043 0302 	orr.w	r3, r3, #2
 8003396:	6013      	str	r3, [r2, #0]
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000e010 	.word	0xe000e010

080033a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e033      	b.n	8003426 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff fc7c 	bl	8002cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d118      	bne.n	8003418 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033ee:	f023 0302 	bic.w	r3, r3, #2
 80033f2:	f043 0202 	orr.w	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa96 	bl	800392c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
 8003416:	e001      	b.n	800341c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_ADC_Start+0x1a>
 8003446:	2302      	movs	r3, #2
 8003448:	e097      	b.n	800357a <HAL_ADC_Start+0x14a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d018      	beq.n	8003492 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003470:	4b45      	ldr	r3, [pc, #276]	; (8003588 <HAL_ADC_Start+0x158>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a45      	ldr	r2, [pc, #276]	; (800358c <HAL_ADC_Start+0x15c>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	0c9a      	lsrs	r2, r3, #18
 800347c:	4613      	mov	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4413      	add	r3, r2
 8003482:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003484:	e002      	b.n	800348c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3b01      	subs	r3, #1
 800348a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f9      	bne.n	8003486 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d15f      	bne.n	8003560 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034de:	d106      	bne.n	80034ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f023 0206 	bic.w	r2, r3, #6
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44
 80034ec:	e002      	b.n	80034f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034fc:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_ADC_Start+0x160>)
 80034fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003508:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10f      	bne.n	8003536 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d129      	bne.n	8003578 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	e020      	b.n	8003578 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a16      	ldr	r2, [pc, #88]	; (8003594 <HAL_ADC_Start+0x164>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d11b      	bne.n	8003578 <HAL_ADC_Start+0x148>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d114      	bne.n	8003578 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	e00b      	b.n	8003578 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f043 0210 	orr.w	r2, r3, #16
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000010 	.word	0x20000010
 800358c:	431bde83 	.word	0x431bde83
 8003590:	40012300 	.word	0x40012300
 8003594:	40012000 	.word	0x40012000

08003598 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b4:	d113      	bne.n	80035de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d10b      	bne.n	80035de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e063      	b.n	80036a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80035de:	f7ff fe93 	bl	8003308 <HAL_GetTick>
 80035e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035e4:	e021      	b.n	800362a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d01d      	beq.n	800362a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_ADC_PollForConversion+0x6c>
 80035f4:	f7ff fe88 	bl	8003308 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d212      	bcs.n	800362a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d00b      	beq.n	800362a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f043 0204 	orr.w	r2, r3, #4
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e03d      	b.n	80036a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b02      	cmp	r3, #2
 8003636:	d1d6      	bne.n	80035e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0212 	mvn.w	r2, #18
 8003640:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d123      	bne.n	80036a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11f      	bne.n	80036a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800366e:	2b00      	cmp	r3, #0
 8003670:	d006      	beq.n	8003680 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f043 0201 	orr.w	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x1c>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e113      	b.n	800390c <HAL_ADC_ConfigChannel+0x244>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b09      	cmp	r3, #9
 80036f2:	d925      	bls.n	8003740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68d9      	ldr	r1, [r3, #12]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	3b1e      	subs	r3, #30
 800370a:	2207      	movs	r2, #7
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43da      	mvns	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	400a      	ands	r2, r1
 8003718:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68d9      	ldr	r1, [r3, #12]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	4618      	mov	r0, r3
 800372c:	4603      	mov	r3, r0
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4403      	add	r3, r0
 8003732:	3b1e      	subs	r3, #30
 8003734:	409a      	lsls	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	e022      	b.n	8003786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6919      	ldr	r1, [r3, #16]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	2207      	movs	r2, #7
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	400a      	ands	r2, r1
 8003762:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6919      	ldr	r1, [r3, #16]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	4618      	mov	r0, r3
 8003776:	4603      	mov	r3, r0
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4403      	add	r3, r0
 800377c:	409a      	lsls	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b06      	cmp	r3, #6
 800378c:	d824      	bhi.n	80037d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	3b05      	subs	r3, #5
 80037a0:	221f      	movs	r2, #31
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43da      	mvns	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	400a      	ands	r2, r1
 80037ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4618      	mov	r0, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	3b05      	subs	r3, #5
 80037ca:	fa00 f203 	lsl.w	r2, r0, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
 80037d6:	e04c      	b.n	8003872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d824      	bhi.n	800382a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	3b23      	subs	r3, #35	; 0x23
 80037f2:	221f      	movs	r2, #31
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43da      	mvns	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	400a      	ands	r2, r1
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	4618      	mov	r0, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	3b23      	subs	r3, #35	; 0x23
 800381c:	fa00 f203 	lsl.w	r2, r0, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
 8003828:	e023      	b.n	8003872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	3b41      	subs	r3, #65	; 0x41
 800383c:	221f      	movs	r2, #31
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	400a      	ands	r2, r1
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	4618      	mov	r0, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	3b41      	subs	r3, #65	; 0x41
 8003866:	fa00 f203 	lsl.w	r2, r0, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003872:	4b29      	ldr	r3, [pc, #164]	; (8003918 <HAL_ADC_ConfigChannel+0x250>)
 8003874:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a28      	ldr	r2, [pc, #160]	; (800391c <HAL_ADC_ConfigChannel+0x254>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d10f      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x1d8>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b12      	cmp	r3, #18
 8003886:	d10b      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <HAL_ADC_ConfigChannel+0x254>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d12b      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x23a>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_ADC_ConfigChannel+0x258>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <HAL_ADC_ConfigChannel+0x1f4>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b11      	cmp	r3, #17
 80038ba:	d122      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a11      	ldr	r2, [pc, #68]	; (8003920 <HAL_ADC_ConfigChannel+0x258>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d111      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <HAL_ADC_ConfigChannel+0x25c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a11      	ldr	r2, [pc, #68]	; (8003928 <HAL_ADC_ConfigChannel+0x260>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	0c9a      	lsrs	r2, r3, #18
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038f4:	e002      	b.n	80038fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f9      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	40012300 	.word	0x40012300
 800391c:	40012000 	.word	0x40012000
 8003920:	10000012 	.word	0x10000012
 8003924:	20000010 	.word	0x20000010
 8003928:	431bde83 	.word	0x431bde83

0800392c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003934:	4b79      	ldr	r3, [pc, #484]	; (8003b1c <ADC_Init+0x1f0>)
 8003936:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	021a      	lsls	r2, r3, #8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6899      	ldr	r1, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	4a58      	ldr	r2, [pc, #352]	; (8003b20 <ADC_Init+0x1f4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d022      	beq.n	8003a0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6899      	ldr	r1, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6899      	ldr	r1, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	e00f      	b.n	8003a2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0202 	bic.w	r2, r2, #2
 8003a38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6899      	ldr	r1, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	7e1b      	ldrb	r3, [r3, #24]
 8003a44:	005a      	lsls	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01b      	beq.n	8003a90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	3b01      	subs	r3, #1
 8003a84:	035a      	lsls	r2, r3, #13
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	e007      	b.n	8003aa0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	051a      	lsls	r2, r3, #20
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ad4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ae2:	025a      	lsls	r2, r3, #9
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6899      	ldr	r1, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	029a      	lsls	r2, r3, #10
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	40012300 	.word	0x40012300
 8003b20:	0f000001 	.word	0x0f000001

08003b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <__NVIC_SetPriorityGrouping+0x44>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b40:	4013      	ands	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b56:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <__NVIC_SetPriorityGrouping+0x44>)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	60d3      	str	r3, [r2, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <__NVIC_GetPriorityGrouping+0x18>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	f003 0307 	and.w	r3, r3, #7
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	db0b      	blt.n	8003bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	f003 021f 	and.w	r2, r3, #31
 8003ba0:	4907      	ldr	r1, [pc, #28]	; (8003bc0 <__NVIC_EnableIRQ+0x38>)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2001      	movs	r0, #1
 8003baa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	e000e100 	.word	0xe000e100

08003bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	6039      	str	r1, [r7, #0]
 8003bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	db0a      	blt.n	8003bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	490c      	ldr	r1, [pc, #48]	; (8003c10 <__NVIC_SetPriority+0x4c>)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	0112      	lsls	r2, r2, #4
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	440b      	add	r3, r1
 8003be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bec:	e00a      	b.n	8003c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4908      	ldr	r1, [pc, #32]	; (8003c14 <__NVIC_SetPriority+0x50>)
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	3b04      	subs	r3, #4
 8003bfc:	0112      	lsls	r2, r2, #4
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	440b      	add	r3, r1
 8003c02:	761a      	strb	r2, [r3, #24]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	e000e100 	.word	0xe000e100
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b089      	sub	sp, #36	; 0x24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f1c3 0307 	rsb	r3, r3, #7
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	bf28      	it	cs
 8003c36:	2304      	movcs	r3, #4
 8003c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d902      	bls.n	8003c48 <NVIC_EncodePriority+0x30>
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3b03      	subs	r3, #3
 8003c46:	e000      	b.n	8003c4a <NVIC_EncodePriority+0x32>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43da      	mvns	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c60:	f04f 31ff 	mov.w	r1, #4294967295
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	43d9      	mvns	r1, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c70:	4313      	orrs	r3, r2
         );
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c90:	d301      	bcc.n	8003c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c92:	2301      	movs	r3, #1
 8003c94:	e00f      	b.n	8003cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c96:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <SysTick_Config+0x40>)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c9e:	210f      	movs	r1, #15
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	f7ff ff8e 	bl	8003bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <SysTick_Config+0x40>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cae:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <SysTick_Config+0x40>)
 8003cb0:	2207      	movs	r2, #7
 8003cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	e000e010 	.word	0xe000e010

08003cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ff29 	bl	8003b24 <__NVIC_SetPriorityGrouping>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cec:	f7ff ff3e 	bl	8003b6c <__NVIC_GetPriorityGrouping>
 8003cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	6978      	ldr	r0, [r7, #20]
 8003cf8:	f7ff ff8e 	bl	8003c18 <NVIC_EncodePriority>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff5d 	bl	8003bc4 <__NVIC_SetPriority>
}
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	4603      	mov	r3, r0
 8003d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ff31 	bl	8003b88 <__NVIC_EnableIRQ>
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff ffa2 	bl	8003c80 <SysTick_Config>
 8003d3c:	4603      	mov	r3, r0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d54:	f7ff fad8 	bl	8003308 <HAL_GetTick>
 8003d58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d008      	beq.n	8003d78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2280      	movs	r2, #128	; 0x80
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e052      	b.n	8003e1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0216 	bic.w	r2, r2, #22
 8003d86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <HAL_DMA_Abort+0x62>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0208 	bic.w	r2, r2, #8
 8003db6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dc8:	e013      	b.n	8003df2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dca:	f7ff fa9d 	bl	8003308 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b05      	cmp	r3, #5
 8003dd6:	d90c      	bls.n	8003df2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2203      	movs	r2, #3
 8003de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e015      	b.n	8003e1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e4      	bne.n	8003dca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	223f      	movs	r2, #63	; 0x3f
 8003e06:	409a      	lsls	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d004      	beq.n	8003e44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e00c      	b.n	8003e5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2205      	movs	r2, #5
 8003e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b089      	sub	sp, #36	; 0x24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	e159      	b.n	800413c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e88:	2201      	movs	r2, #1
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	f040 8148 	bne.w	8004136 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d005      	beq.n	8003ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d130      	bne.n	8003f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2203      	movs	r2, #3
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 0201 	and.w	r2, r3, #1
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d017      	beq.n	8003f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	2203      	movs	r2, #3
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d123      	bne.n	8003fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	08da      	lsrs	r2, r3, #3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3208      	adds	r2, #8
 8003f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	220f      	movs	r2, #15
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	08da      	lsrs	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3208      	adds	r2, #8
 8003faa:	69b9      	ldr	r1, [r7, #24]
 8003fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	2203      	movs	r2, #3
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 0203 	and.w	r2, r3, #3
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80a2 	beq.w	8004136 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	4b57      	ldr	r3, [pc, #348]	; (8004154 <HAL_GPIO_Init+0x2e8>)
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	4a56      	ldr	r2, [pc, #344]	; (8004154 <HAL_GPIO_Init+0x2e8>)
 8003ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004000:	6453      	str	r3, [r2, #68]	; 0x44
 8004002:	4b54      	ldr	r3, [pc, #336]	; (8004154 <HAL_GPIO_Init+0x2e8>)
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800400e:	4a52      	ldr	r2, [pc, #328]	; (8004158 <HAL_GPIO_Init+0x2ec>)
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	3302      	adds	r3, #2
 8004016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	220f      	movs	r2, #15
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a49      	ldr	r2, [pc, #292]	; (800415c <HAL_GPIO_Init+0x2f0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d019      	beq.n	800406e <HAL_GPIO_Init+0x202>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a48      	ldr	r2, [pc, #288]	; (8004160 <HAL_GPIO_Init+0x2f4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_GPIO_Init+0x1fe>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a47      	ldr	r2, [pc, #284]	; (8004164 <HAL_GPIO_Init+0x2f8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00d      	beq.n	8004066 <HAL_GPIO_Init+0x1fa>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a46      	ldr	r2, [pc, #280]	; (8004168 <HAL_GPIO_Init+0x2fc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d007      	beq.n	8004062 <HAL_GPIO_Init+0x1f6>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a45      	ldr	r2, [pc, #276]	; (800416c <HAL_GPIO_Init+0x300>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d101      	bne.n	800405e <HAL_GPIO_Init+0x1f2>
 800405a:	2304      	movs	r3, #4
 800405c:	e008      	b.n	8004070 <HAL_GPIO_Init+0x204>
 800405e:	2307      	movs	r3, #7
 8004060:	e006      	b.n	8004070 <HAL_GPIO_Init+0x204>
 8004062:	2303      	movs	r3, #3
 8004064:	e004      	b.n	8004070 <HAL_GPIO_Init+0x204>
 8004066:	2302      	movs	r3, #2
 8004068:	e002      	b.n	8004070 <HAL_GPIO_Init+0x204>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <HAL_GPIO_Init+0x204>
 800406e:	2300      	movs	r3, #0
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	f002 0203 	and.w	r2, r2, #3
 8004076:	0092      	lsls	r2, r2, #2
 8004078:	4093      	lsls	r3, r2
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004080:	4935      	ldr	r1, [pc, #212]	; (8004158 <HAL_GPIO_Init+0x2ec>)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	089b      	lsrs	r3, r3, #2
 8004086:	3302      	adds	r3, #2
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800408e:	4b38      	ldr	r3, [pc, #224]	; (8004170 <HAL_GPIO_Init+0x304>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040b2:	4a2f      	ldr	r2, [pc, #188]	; (8004170 <HAL_GPIO_Init+0x304>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b8:	4b2d      	ldr	r3, [pc, #180]	; (8004170 <HAL_GPIO_Init+0x304>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040dc:	4a24      	ldr	r2, [pc, #144]	; (8004170 <HAL_GPIO_Init+0x304>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040e2:	4b23      	ldr	r3, [pc, #140]	; (8004170 <HAL_GPIO_Init+0x304>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004106:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <HAL_GPIO_Init+0x304>)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800410c:	4b18      	ldr	r3, [pc, #96]	; (8004170 <HAL_GPIO_Init+0x304>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004130:	4a0f      	ldr	r2, [pc, #60]	; (8004170 <HAL_GPIO_Init+0x304>)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3301      	adds	r3, #1
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	f67f aea2 	bls.w	8003e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	3724      	adds	r7, #36	; 0x24
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800
 8004158:	40013800 	.word	0x40013800
 800415c:	40020000 	.word	0x40020000
 8004160:	40020400 	.word	0x40020400
 8004164:	40020800 	.word	0x40020800
 8004168:	40020c00 	.word	0x40020c00
 800416c:	40021000 	.word	0x40021000
 8004170:	40013c00 	.word	0x40013c00

08004174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e001      	b.n	8004196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
 80041b0:	4613      	mov	r3, r2
 80041b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041b4:	787b      	ldrb	r3, [r7, #1]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ba:	887a      	ldrh	r2, [r7, #2]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041c0:	e003      	b.n	80041ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	041a      	lsls	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	619a      	str	r2, [r3, #24]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	460b      	mov	r3, r1
 80041e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041e8:	887a      	ldrh	r2, [r7, #2]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4013      	ands	r3, r2
 80041ee:	041a      	lsls	r2, r3, #16
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	43d9      	mvns	r1, r3
 80041f4:	887b      	ldrh	r3, [r7, #2]
 80041f6:	400b      	ands	r3, r1
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	619a      	str	r2, [r3, #24]
}
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e12b      	b.n	8004476 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fe fd8a 	bl	8002d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2224      	movs	r2, #36	; 0x24
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800425e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800426e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004270:	f001 f9b2 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 8004274:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4a81      	ldr	r2, [pc, #516]	; (8004480 <HAL_I2C_Init+0x274>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d807      	bhi.n	8004290 <HAL_I2C_Init+0x84>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a80      	ldr	r2, [pc, #512]	; (8004484 <HAL_I2C_Init+0x278>)
 8004284:	4293      	cmp	r3, r2
 8004286:	bf94      	ite	ls
 8004288:	2301      	movls	r3, #1
 800428a:	2300      	movhi	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e006      	b.n	800429e <HAL_I2C_Init+0x92>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a7d      	ldr	r2, [pc, #500]	; (8004488 <HAL_I2C_Init+0x27c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	bf94      	ite	ls
 8004298:	2301      	movls	r3, #1
 800429a:	2300      	movhi	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e0e7      	b.n	8004476 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4a78      	ldr	r2, [pc, #480]	; (800448c <HAL_I2C_Init+0x280>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	0c9b      	lsrs	r3, r3, #18
 80042b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a6a      	ldr	r2, [pc, #424]	; (8004480 <HAL_I2C_Init+0x274>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d802      	bhi.n	80042e0 <HAL_I2C_Init+0xd4>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3301      	adds	r3, #1
 80042de:	e009      	b.n	80042f4 <HAL_I2C_Init+0xe8>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	4a69      	ldr	r2, [pc, #420]	; (8004490 <HAL_I2C_Init+0x284>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	099b      	lsrs	r3, r3, #6
 80042f2:	3301      	adds	r3, #1
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004306:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	495c      	ldr	r1, [pc, #368]	; (8004480 <HAL_I2C_Init+0x274>)
 8004310:	428b      	cmp	r3, r1
 8004312:	d819      	bhi.n	8004348 <HAL_I2C_Init+0x13c>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1e59      	subs	r1, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004322:	1c59      	adds	r1, r3, #1
 8004324:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004328:	400b      	ands	r3, r1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_I2C_Init+0x138>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1e59      	subs	r1, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	fbb1 f3f3 	udiv	r3, r1, r3
 800433c:	3301      	adds	r3, #1
 800433e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004342:	e051      	b.n	80043e8 <HAL_I2C_Init+0x1dc>
 8004344:	2304      	movs	r3, #4
 8004346:	e04f      	b.n	80043e8 <HAL_I2C_Init+0x1dc>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d111      	bne.n	8004374 <HAL_I2C_Init+0x168>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1e58      	subs	r0, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	440b      	add	r3, r1
 800435e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004362:	3301      	adds	r3, #1
 8004364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	e012      	b.n	800439a <HAL_I2C_Init+0x18e>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1e58      	subs	r0, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	0099      	lsls	r1, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	fbb0 f3f3 	udiv	r3, r0, r3
 800438a:	3301      	adds	r3, #1
 800438c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_I2C_Init+0x196>
 800439e:	2301      	movs	r3, #1
 80043a0:	e022      	b.n	80043e8 <HAL_I2C_Init+0x1dc>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10e      	bne.n	80043c8 <HAL_I2C_Init+0x1bc>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1e58      	subs	r0, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6859      	ldr	r1, [r3, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	440b      	add	r3, r1
 80043b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80043bc:	3301      	adds	r3, #1
 80043be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c6:	e00f      	b.n	80043e8 <HAL_I2C_Init+0x1dc>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e58      	subs	r0, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	0099      	lsls	r1, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	fbb0 f3f3 	udiv	r3, r0, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	6809      	ldr	r1, [r1, #0]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69da      	ldr	r2, [r3, #28]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004416:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6911      	ldr	r1, [r2, #16]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68d2      	ldr	r2, [r2, #12]
 8004422:	4311      	orrs	r1, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	430b      	orrs	r3, r1
 800442a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	000186a0 	.word	0x000186a0
 8004484:	001e847f 	.word	0x001e847f
 8004488:	003d08ff 	.word	0x003d08ff
 800448c:	431bde83 	.word	0x431bde83
 8004490:	10624dd3 	.word	0x10624dd3

08004494 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	461a      	mov	r2, r3
 80044a0:	460b      	mov	r3, r1
 80044a2:	817b      	strh	r3, [r7, #10]
 80044a4:	4613      	mov	r3, r2
 80044a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044a8:	f7fe ff2e 	bl	8003308 <HAL_GetTick>
 80044ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	f040 80e0 	bne.w	800467c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2319      	movs	r3, #25
 80044c2:	2201      	movs	r2, #1
 80044c4:	4970      	ldr	r1, [pc, #448]	; (8004688 <HAL_I2C_Master_Transmit+0x1f4>)
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fa92 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
 80044d4:	e0d3      	b.n	800467e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_I2C_Master_Transmit+0x50>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e0cc      	b.n	800467e <HAL_I2C_Master_Transmit+0x1ea>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d007      	beq.n	800450a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004518:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2221      	movs	r2, #33	; 0x21
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2210      	movs	r2, #16
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	893a      	ldrh	r2, [r7, #8]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4a50      	ldr	r2, [pc, #320]	; (800468c <HAL_I2C_Master_Transmit+0x1f8>)
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800454c:	8979      	ldrh	r1, [r7, #10]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	6a3a      	ldr	r2, [r7, #32]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f9ca 	bl	80048ec <I2C_MasterRequestWrite>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e08d      	b.n	800467e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004578:	e066      	b.n	8004648 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	6a39      	ldr	r1, [r7, #32]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fb0c 	bl	8004b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	2b04      	cmp	r3, #4
 8004590:	d107      	bne.n	80045a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e06b      	b.n	800467e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d11b      	bne.n	800461c <HAL_I2C_Master_Transmit+0x188>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d017      	beq.n	800461c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	6a39      	ldr	r1, [r7, #32]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fafc 	bl	8004c1e <I2C_WaitOnBTFFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	2b04      	cmp	r3, #4
 8004632:	d107      	bne.n	8004644 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004642:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e01a      	b.n	800467e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	d194      	bne.n	800457a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800465e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	00100002 	.word	0x00100002
 800468c:	ffff0000 	.word	0xffff0000

08004690 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	460b      	mov	r3, r1
 800469e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80046a0:	f7fe fe32 	bl	8003308 <HAL_GetTick>
 80046a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	f040 8111 	bne.w	80048da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	2319      	movs	r3, #25
 80046be:	2201      	movs	r2, #1
 80046c0:	4988      	ldr	r1, [pc, #544]	; (80048e4 <HAL_I2C_IsDeviceReady+0x254>)
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f994 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
 80046d0:	e104      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_I2C_IsDeviceReady+0x50>
 80046dc:	2302      	movs	r3, #2
 80046de:	e0fd      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d007      	beq.n	8004706 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0201 	orr.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2224      	movs	r2, #36	; 0x24
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a70      	ldr	r2, [pc, #448]	; (80048e8 <HAL_I2C_IsDeviceReady+0x258>)
 8004728:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2200      	movs	r2, #0
 8004742:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f952 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004760:	d103      	bne.n	800476a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e0b6      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800476e:	897b      	ldrh	r3, [r7, #10]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800477c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800477e:	f7fe fdc3 	bl	8003308 <HAL_GetTick>
 8004782:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b02      	cmp	r3, #2
 8004790:	bf0c      	ite	eq
 8004792:	2301      	moveq	r3, #1
 8004794:	2300      	movne	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047b2:	e025      	b.n	8004800 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7fe fda8 	bl	8003308 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d302      	bcc.n	80047ca <HAL_I2C_IsDeviceReady+0x13a>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	22a0      	movs	r2, #160	; 0xa0
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b02      	cmp	r3, #2
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2ba0      	cmp	r3, #160	; 0xa0
 800480a:	d005      	beq.n	8004818 <HAL_I2C_IsDeviceReady+0x188>
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <HAL_I2C_IsDeviceReady+0x188>
 8004812:	7dbb      	ldrb	r3, [r7, #22]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0cd      	beq.n	80047b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b02      	cmp	r3, #2
 800482c:	d129      	bne.n	8004882 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2319      	movs	r3, #25
 800485a:	2201      	movs	r2, #1
 800485c:	4921      	ldr	r1, [pc, #132]	; (80048e4 <HAL_I2C_IsDeviceReady+0x254>)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f8c6 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e036      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e02c      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004890:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800489a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2319      	movs	r3, #25
 80048a2:	2201      	movs	r2, #1
 80048a4:	490f      	ldr	r1, [pc, #60]	; (80048e4 <HAL_I2C_IsDeviceReady+0x254>)
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f8a2 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e012      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	f4ff af32 	bcc.w	800472a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	00100002 	.word	0x00100002
 80048e8:	ffff0000 	.word	0xffff0000

080048ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	460b      	mov	r3, r1
 80048fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b08      	cmp	r3, #8
 8004906:	d006      	beq.n	8004916 <I2C_MasterRequestWrite+0x2a>
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d003      	beq.n	8004916 <I2C_MasterRequestWrite+0x2a>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004914:	d108      	bne.n	8004928 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	e00b      	b.n	8004940 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	2b12      	cmp	r3, #18
 800492e:	d107      	bne.n	8004940 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800493e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f84f 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004966:	d103      	bne.n	8004970 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e035      	b.n	80049e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800497c:	d108      	bne.n	8004990 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800497e:	897b      	ldrh	r3, [r7, #10]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800498c:	611a      	str	r2, [r3, #16]
 800498e:	e01b      	b.n	80049c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004990:	897b      	ldrh	r3, [r7, #10]
 8004992:	11db      	asrs	r3, r3, #7
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 0306 	and.w	r3, r3, #6
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f063 030f 	orn	r3, r3, #15
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	490e      	ldr	r1, [pc, #56]	; (80049e8 <I2C_MasterRequestWrite+0xfc>)
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f875 	bl	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e010      	b.n	80049e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4907      	ldr	r1, [pc, #28]	; (80049ec <I2C_MasterRequestWrite+0x100>)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f865 	bl	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	00010008 	.word	0x00010008
 80049ec:	00010002 	.word	0x00010002

080049f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a00:	e025      	b.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d021      	beq.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0a:	f7fe fc7d 	bl	8003308 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d302      	bcc.n	8004a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d116      	bne.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e023      	b.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d10d      	bne.n	8004a74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	43da      	mvns	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	e00c      	b.n	8004a8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d0b6      	beq.n	8004a02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aac:	e051      	b.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abc:	d123      	bne.n	8004b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004acc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ad6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f043 0204 	orr.w	r2, r3, #4
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e046      	b.n	8004b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d021      	beq.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fe fbfb 	bl	8003308 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d116      	bne.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f043 0220 	orr.w	r2, r3, #32
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e020      	b.n	8004b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10c      	bne.n	8004b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	43da      	mvns	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bf14      	ite	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	2300      	moveq	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e00b      	b.n	8004b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	43da      	mvns	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d18d      	bne.n	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ba8:	e02d      	b.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f878 	bl	8004ca0 <I2C_IsAcknowledgeFailed>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e02d      	b.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d021      	beq.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc2:	f7fe fba1 	bl	8003308 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d302      	bcc.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d116      	bne.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e007      	b.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b80      	cmp	r3, #128	; 0x80
 8004c12:	d1ca      	bne.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c2a:	e02d      	b.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f837 	bl	8004ca0 <I2C_IsAcknowledgeFailed>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e02d      	b.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d021      	beq.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c44:	f7fe fb60 	bl	8003308 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d302      	bcc.n	8004c5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d116      	bne.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	f043 0220 	orr.w	r2, r3, #32
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e007      	b.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d1ca      	bne.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb6:	d11b      	bne.n	8004cf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	f043 0204 	orr.w	r2, r3, #4
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004d12:	f023 0304 	bic.w	r3, r3, #4
 8004d16:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004d1e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004d20:	e002      	b.n	8004d28 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8004d22:	bf40      	sev
    __WFE();
 8004d24:	bf20      	wfe
    __WFE();
 8004d26:	bf20      	wfe
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	e000ed00 	.word	0xe000ed00

08004d38 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8004d42:	f043 0302 	orr.w	r3, r3, #2
 8004d46:	6113      	str	r3, [r2, #16]
}
 8004d48:	bf00      	nop
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	e000ed00 	.word	0xe000ed00

08004d58 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	4a04      	ldr	r2, [pc, #16]	; (8004d74 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8004d62:	f023 0302 	bic.w	r3, r3, #2
 8004d66:	6113      	str	r3, [r2, #16]
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	e000ed00 	.word	0xe000ed00

08004d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e267      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d075      	beq.n	8004e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d96:	4b88      	ldr	r3, [pc, #544]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 030c 	and.w	r3, r3, #12
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d00c      	beq.n	8004dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004da2:	4b85      	ldr	r3, [pc, #532]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d112      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dae:	4b82      	ldr	r3, [pc, #520]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dba:	d10b      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	4b7e      	ldr	r3, [pc, #504]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d05b      	beq.n	8004e80 <HAL_RCC_OscConfig+0x108>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d157      	bne.n	8004e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e242      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ddc:	d106      	bne.n	8004dec <HAL_RCC_OscConfig+0x74>
 8004dde:	4b76      	ldr	r3, [pc, #472]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a75      	ldr	r2, [pc, #468]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	e01d      	b.n	8004e28 <HAL_RCC_OscConfig+0xb0>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCC_OscConfig+0x98>
 8004df6:	4b70      	ldr	r3, [pc, #448]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6f      	ldr	r2, [pc, #444]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	4b6d      	ldr	r3, [pc, #436]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a6c      	ldr	r2, [pc, #432]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCC_OscConfig+0xb0>
 8004e10:	4b69      	ldr	r3, [pc, #420]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a68      	ldr	r2, [pc, #416]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	4b66      	ldr	r3, [pc, #408]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a65      	ldr	r2, [pc, #404]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d013      	beq.n	8004e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e30:	f7fe fa6a 	bl	8003308 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e38:	f7fe fa66 	bl	8003308 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	; 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e207      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4a:	4b5b      	ldr	r3, [pc, #364]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0xc0>
 8004e56:	e014      	b.n	8004e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e58:	f7fe fa56 	bl	8003308 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e60:	f7fe fa52 	bl	8003308 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	; 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e1f3      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e72:	4b51      	ldr	r3, [pc, #324]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0xe8>
 8004e7e:	e000      	b.n	8004e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d063      	beq.n	8004f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e8e:	4b4a      	ldr	r3, [pc, #296]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 030c 	and.w	r3, r3, #12
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e9a:	4b47      	ldr	r3, [pc, #284]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d11c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ea6:	4b44      	ldr	r3, [pc, #272]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d116      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eb2:	4b41      	ldr	r3, [pc, #260]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <HAL_RCC_OscConfig+0x152>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d001      	beq.n	8004eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e1c7      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eca:	4b3b      	ldr	r3, [pc, #236]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4937      	ldr	r1, [pc, #220]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ede:	e03a      	b.n	8004f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d020      	beq.n	8004f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee8:	4b34      	ldr	r3, [pc, #208]	; (8004fbc <HAL_RCC_OscConfig+0x244>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eee:	f7fe fa0b 	bl	8003308 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ef6:	f7fe fa07 	bl	8003308 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e1a8      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f08:	4b2b      	ldr	r3, [pc, #172]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f14:	4b28      	ldr	r3, [pc, #160]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4925      	ldr	r1, [pc, #148]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	600b      	str	r3, [r1, #0]
 8004f28:	e015      	b.n	8004f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <HAL_RCC_OscConfig+0x244>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fe f9ea 	bl	8003308 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f38:	f7fe f9e6 	bl	8003308 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e187      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d036      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d016      	beq.n	8004f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <HAL_RCC_OscConfig+0x248>)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fe f9ca 	bl	8003308 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f78:	f7fe f9c6 	bl	8003308 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e167      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f0      	beq.n	8004f78 <HAL_RCC_OscConfig+0x200>
 8004f96:	e01b      	b.n	8004fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <HAL_RCC_OscConfig+0x248>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f9e:	f7fe f9b3 	bl	8003308 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa4:	e00e      	b.n	8004fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fa6:	f7fe f9af 	bl	8003308 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d907      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e150      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	42470000 	.word	0x42470000
 8004fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc4:	4b88      	ldr	r3, [pc, #544]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8004fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1ea      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8097 	beq.w	800510c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe2:	4b81      	ldr	r3, [pc, #516]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10f      	bne.n	800500e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	4b7d      	ldr	r3, [pc, #500]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	4a7c      	ldr	r2, [pc, #496]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffe:	4b7a      	ldr	r3, [pc, #488]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800500a:	2301      	movs	r3, #1
 800500c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500e:	4b77      	ldr	r3, [pc, #476]	; (80051ec <HAL_RCC_OscConfig+0x474>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d118      	bne.n	800504c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800501a:	4b74      	ldr	r3, [pc, #464]	; (80051ec <HAL_RCC_OscConfig+0x474>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a73      	ldr	r2, [pc, #460]	; (80051ec <HAL_RCC_OscConfig+0x474>)
 8005020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005026:	f7fe f96f 	bl	8003308 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502e:	f7fe f96b 	bl	8003308 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e10c      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005040:	4b6a      	ldr	r3, [pc, #424]	; (80051ec <HAL_RCC_OscConfig+0x474>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d106      	bne.n	8005062 <HAL_RCC_OscConfig+0x2ea>
 8005054:	4b64      	ldr	r3, [pc, #400]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005058:	4a63      	ldr	r2, [pc, #396]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	6713      	str	r3, [r2, #112]	; 0x70
 8005060:	e01c      	b.n	800509c <HAL_RCC_OscConfig+0x324>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b05      	cmp	r3, #5
 8005068:	d10c      	bne.n	8005084 <HAL_RCC_OscConfig+0x30c>
 800506a:	4b5f      	ldr	r3, [pc, #380]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	4a5e      	ldr	r2, [pc, #376]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8005070:	f043 0304 	orr.w	r3, r3, #4
 8005074:	6713      	str	r3, [r2, #112]	; 0x70
 8005076:	4b5c      	ldr	r3, [pc, #368]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	4a5b      	ldr	r2, [pc, #364]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	6713      	str	r3, [r2, #112]	; 0x70
 8005082:	e00b      	b.n	800509c <HAL_RCC_OscConfig+0x324>
 8005084:	4b58      	ldr	r3, [pc, #352]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	4a57      	ldr	r2, [pc, #348]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	6713      	str	r3, [r2, #112]	; 0x70
 8005090:	4b55      	ldr	r3, [pc, #340]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	4a54      	ldr	r2, [pc, #336]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8005096:	f023 0304 	bic.w	r3, r3, #4
 800509a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a4:	f7fe f930 	bl	8003308 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ac:	f7fe f92c 	bl	8003308 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e0cb      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c2:	4b49      	ldr	r3, [pc, #292]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0ee      	beq.n	80050ac <HAL_RCC_OscConfig+0x334>
 80050ce:	e014      	b.n	80050fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d0:	f7fe f91a 	bl	8003308 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d6:	e00a      	b.n	80050ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d8:	f7fe f916 	bl	8003308 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e0b5      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ee:	4b3e      	ldr	r3, [pc, #248]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1ee      	bne.n	80050d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d105      	bne.n	800510c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005100:	4b39      	ldr	r3, [pc, #228]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	4a38      	ldr	r2, [pc, #224]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8005106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80a1 	beq.w	8005258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005116:	4b34      	ldr	r3, [pc, #208]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b08      	cmp	r3, #8
 8005120:	d05c      	beq.n	80051dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d141      	bne.n	80051ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512a:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <HAL_RCC_OscConfig+0x478>)
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fe f8ea 	bl	8003308 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005138:	f7fe f8e6 	bl	8003308 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e087      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514a:	4b27      	ldr	r3, [pc, #156]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69da      	ldr	r2, [r3, #28]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	019b      	lsls	r3, r3, #6
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	3b01      	subs	r3, #1
 8005170:	041b      	lsls	r3, r3, #16
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	061b      	lsls	r3, r3, #24
 800517a:	491b      	ldr	r1, [pc, #108]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 800517c:	4313      	orrs	r3, r2
 800517e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005180:	4b1b      	ldr	r3, [pc, #108]	; (80051f0 <HAL_RCC_OscConfig+0x478>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005186:	f7fe f8bf 	bl	8003308 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518e:	f7fe f8bb 	bl	8003308 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e05c      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a0:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x416>
 80051ac:	e054      	b.n	8005258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ae:	4b10      	ldr	r3, [pc, #64]	; (80051f0 <HAL_RCC_OscConfig+0x478>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b4:	f7fe f8a8 	bl	8003308 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051bc:	f7fe f8a4 	bl	8003308 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e045      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_RCC_OscConfig+0x470>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x444>
 80051da:	e03d      	b.n	8005258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d107      	bne.n	80051f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e038      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
 80051e8:	40023800 	.word	0x40023800
 80051ec:	40007000 	.word	0x40007000
 80051f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051f4:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <HAL_RCC_OscConfig+0x4ec>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d028      	beq.n	8005254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800520c:	429a      	cmp	r2, r3
 800520e:	d121      	bne.n	8005254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521a:	429a      	cmp	r2, r3
 800521c:	d11a      	bne.n	8005254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005224:	4013      	ands	r3, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800522a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800522c:	4293      	cmp	r3, r2
 800522e:	d111      	bne.n	8005254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	3b01      	subs	r3, #1
 800523e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d107      	bne.n	8005254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005250:	429a      	cmp	r2, r3
 8005252:	d001      	beq.n	8005258 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40023800 	.word	0x40023800

08005268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e0cc      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800527c:	4b68      	ldr	r3, [pc, #416]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d90c      	bls.n	80052a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528a:	4b65      	ldr	r3, [pc, #404]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005292:	4b63      	ldr	r3, [pc, #396]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d001      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0b8      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d020      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052bc:	4b59      	ldr	r3, [pc, #356]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4a58      	ldr	r2, [pc, #352]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052d4:	4b53      	ldr	r3, [pc, #332]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4a52      	ldr	r2, [pc, #328]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e0:	4b50      	ldr	r3, [pc, #320]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	494d      	ldr	r1, [pc, #308]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d044      	beq.n	8005388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d107      	bne.n	8005316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005306:	4b47      	ldr	r3, [pc, #284]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d119      	bne.n	8005346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e07f      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d003      	beq.n	8005326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005322:	2b03      	cmp	r3, #3
 8005324:	d107      	bne.n	8005336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005326:	4b3f      	ldr	r3, [pc, #252]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e06f      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005336:	4b3b      	ldr	r3, [pc, #236]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e067      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005346:	4b37      	ldr	r3, [pc, #220]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 0203 	bic.w	r2, r3, #3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4934      	ldr	r1, [pc, #208]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005354:	4313      	orrs	r3, r2
 8005356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005358:	f7fd ffd6 	bl	8003308 <HAL_GetTick>
 800535c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535e:	e00a      	b.n	8005376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005360:	f7fd ffd2 	bl	8003308 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	; 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e04f      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005376:	4b2b      	ldr	r3, [pc, #172]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 020c 	and.w	r2, r3, #12
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	429a      	cmp	r2, r3
 8005386:	d1eb      	bne.n	8005360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005388:	4b25      	ldr	r3, [pc, #148]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d20c      	bcs.n	80053b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005396:	4b22      	ldr	r3, [pc, #136]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539e:	4b20      	ldr	r3, [pc, #128]	; (8005420 <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d001      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e032      	b.n	8005416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053bc:	4b19      	ldr	r3, [pc, #100]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4916      	ldr	r1, [pc, #88]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053da:	4b12      	ldr	r3, [pc, #72]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	490e      	ldr	r1, [pc, #56]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ee:	f000 f821 	bl	8005434 <HAL_RCC_GetSysClockFreq>
 80053f2:	4602      	mov	r2, r0
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	490a      	ldr	r1, [pc, #40]	; (8005428 <HAL_RCC_ClockConfig+0x1c0>)
 8005400:	5ccb      	ldrb	r3, [r1, r3]
 8005402:	fa22 f303 	lsr.w	r3, r2, r3
 8005406:	4a09      	ldr	r2, [pc, #36]	; (800542c <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800540a:	4b09      	ldr	r3, [pc, #36]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f7fd ff36 	bl	8003280 <HAL_InitTick>

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40023c00 	.word	0x40023c00
 8005424:	40023800 	.word	0x40023800
 8005428:	0800b0f8 	.word	0x0800b0f8
 800542c:	20000010 	.word	0x20000010
 8005430:	20000014 	.word	0x20000014

08005434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005438:	b090      	sub	sp, #64	; 0x40
 800543a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	637b      	str	r3, [r7, #52]	; 0x34
 8005440:	2300      	movs	r3, #0
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005444:	2300      	movs	r3, #0
 8005446:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800544c:	4b59      	ldr	r3, [pc, #356]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f003 030c 	and.w	r3, r3, #12
 8005454:	2b08      	cmp	r3, #8
 8005456:	d00d      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0x40>
 8005458:	2b08      	cmp	r3, #8
 800545a:	f200 80a1 	bhi.w	80055a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0x34>
 8005462:	2b04      	cmp	r3, #4
 8005464:	d003      	beq.n	800546e <HAL_RCC_GetSysClockFreq+0x3a>
 8005466:	e09b      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005468:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800546a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800546c:	e09b      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800546e:	4b53      	ldr	r3, [pc, #332]	; (80055bc <HAL_RCC_GetSysClockFreq+0x188>)
 8005470:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005472:	e098      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005474:	4b4f      	ldr	r3, [pc, #316]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800547c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800547e:	4b4d      	ldr	r3, [pc, #308]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d028      	beq.n	80054dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800548a:	4b4a      	ldr	r3, [pc, #296]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	099b      	lsrs	r3, r3, #6
 8005490:	2200      	movs	r2, #0
 8005492:	623b      	str	r3, [r7, #32]
 8005494:	627a      	str	r2, [r7, #36]	; 0x24
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800549c:	2100      	movs	r1, #0
 800549e:	4b47      	ldr	r3, [pc, #284]	; (80055bc <HAL_RCC_GetSysClockFreq+0x188>)
 80054a0:	fb03 f201 	mul.w	r2, r3, r1
 80054a4:	2300      	movs	r3, #0
 80054a6:	fb00 f303 	mul.w	r3, r0, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	4a43      	ldr	r2, [pc, #268]	; (80055bc <HAL_RCC_GetSysClockFreq+0x188>)
 80054ae:	fba0 1202 	umull	r1, r2, r0, r2
 80054b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054b4:	460a      	mov	r2, r1
 80054b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80054b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ba:	4413      	add	r3, r2
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c0:	2200      	movs	r2, #0
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	61fa      	str	r2, [r7, #28]
 80054c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80054ce:	f7fb faf5 	bl	8000abc <__aeabi_uldivmod>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4613      	mov	r3, r2
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054da:	e053      	b.n	8005584 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054dc:	4b35      	ldr	r3, [pc, #212]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	099b      	lsrs	r3, r3, #6
 80054e2:	2200      	movs	r2, #0
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	617a      	str	r2, [r7, #20]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80054ee:	f04f 0b00 	mov.w	fp, #0
 80054f2:	4652      	mov	r2, sl
 80054f4:	465b      	mov	r3, fp
 80054f6:	f04f 0000 	mov.w	r0, #0
 80054fa:	f04f 0100 	mov.w	r1, #0
 80054fe:	0159      	lsls	r1, r3, #5
 8005500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005504:	0150      	lsls	r0, r2, #5
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	ebb2 080a 	subs.w	r8, r2, sl
 800550e:	eb63 090b 	sbc.w	r9, r3, fp
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800551e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005522:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005526:	ebb2 0408 	subs.w	r4, r2, r8
 800552a:	eb63 0509 	sbc.w	r5, r3, r9
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	00eb      	lsls	r3, r5, #3
 8005538:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800553c:	00e2      	lsls	r2, r4, #3
 800553e:	4614      	mov	r4, r2
 8005540:	461d      	mov	r5, r3
 8005542:	eb14 030a 	adds.w	r3, r4, sl
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	eb45 030b 	adc.w	r3, r5, fp
 800554c:	607b      	str	r3, [r7, #4]
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800555a:	4629      	mov	r1, r5
 800555c:	028b      	lsls	r3, r1, #10
 800555e:	4621      	mov	r1, r4
 8005560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005564:	4621      	mov	r1, r4
 8005566:	028a      	lsls	r2, r1, #10
 8005568:	4610      	mov	r0, r2
 800556a:	4619      	mov	r1, r3
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	2200      	movs	r2, #0
 8005570:	60bb      	str	r3, [r7, #8]
 8005572:	60fa      	str	r2, [r7, #12]
 8005574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005578:	f7fb faa0 	bl	8000abc <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4613      	mov	r3, r2
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005584:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	3301      	adds	r3, #1
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005594:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800559e:	e002      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80055a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3740      	adds	r7, #64	; 0x40
 80055ac:	46bd      	mov	sp, r7
 80055ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b2:	bf00      	nop
 80055b4:	40023800 	.word	0x40023800
 80055b8:	00f42400 	.word	0x00f42400
 80055bc:	017d7840 	.word	0x017d7840

080055c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80055c6:	681b      	ldr	r3, [r3, #0]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20000010 	.word	0x20000010

080055d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055dc:	f7ff fff0 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 80055e0:	4602      	mov	r2, r0
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	0a9b      	lsrs	r3, r3, #10
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	4903      	ldr	r1, [pc, #12]	; (80055fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ee:	5ccb      	ldrb	r3, [r1, r3]
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40023800 	.word	0x40023800
 80055fc:	0800b108 	.word	0x0800b108

08005600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005604:	f7ff ffdc 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	0b5b      	lsrs	r3, r3, #13
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	4903      	ldr	r1, [pc, #12]	; (8005624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005616:	5ccb      	ldrb	r3, [r1, r3]
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800561c:	4618      	mov	r0, r3
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40023800 	.word	0x40023800
 8005624:	0800b108 	.word	0x0800b108

08005628 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800564c:	2b00      	cmp	r3, #0
 800564e:	d038      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005650:	4b68      	ldr	r3, [pc, #416]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005656:	f7fd fe57 	bl	8003308 <HAL_GetTick>
 800565a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800565c:	e008      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800565e:	f7fd fe53 	bl	8003308 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e0bd      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005670:	4b61      	ldr	r3, [pc, #388]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1f0      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	019b      	lsls	r3, r3, #6
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	071b      	lsls	r3, r3, #28
 800568e:	495a      	ldr	r1, [pc, #360]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005696:	4b57      	ldr	r3, [pc, #348]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005698:	2201      	movs	r2, #1
 800569a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800569c:	f7fd fe34 	bl	8003308 <HAL_GetTick>
 80056a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056a4:	f7fd fe30 	bl	8003308 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e09a      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056b6:	4b50      	ldr	r3, [pc, #320]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 8083 	beq.w	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	4b48      	ldr	r3, [pc, #288]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	4a47      	ldr	r2, [pc, #284]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056de:	6413      	str	r3, [r2, #64]	; 0x40
 80056e0:	4b45      	ldr	r3, [pc, #276]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056ec:	4b43      	ldr	r3, [pc, #268]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a42      	ldr	r2, [pc, #264]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056f8:	f7fd fe06 	bl	8003308 <HAL_GetTick>
 80056fc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005700:	f7fd fe02 	bl	8003308 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e06c      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005712:	4b3a      	ldr	r3, [pc, #232]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800571e:	4b36      	ldr	r3, [pc, #216]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005726:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d02f      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	d028      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800573c:	4b2e      	ldr	r3, [pc, #184]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005744:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005746:	4b2e      	ldr	r3, [pc, #184]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800574c:	4b2c      	ldr	r3, [pc, #176]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005752:	4a29      	ldr	r2, [pc, #164]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005758:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b01      	cmp	r3, #1
 8005762:	d114      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005764:	f7fd fdd0 	bl	8003308 <HAL_GetTick>
 8005768:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576a:	e00a      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800576c:	f7fd fdcc 	bl	8003308 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	; 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e034      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005782:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0ee      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579a:	d10d      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800579c:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b0:	4911      	ldr	r1, [pc, #68]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	608b      	str	r3, [r1, #8]
 80057b6:	e005      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a0e      	ldr	r2, [pc, #56]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057c2:	6093      	str	r3, [r2, #8]
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d0:	4909      	ldr	r1, [pc, #36]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	7d1a      	ldrb	r2, [r3, #20]
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80057e8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	42470068 	.word	0x42470068
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40007000 	.word	0x40007000
 8005800:	42470e40 	.word	0x42470e40
 8005804:	424711e0 	.word	0x424711e0

08005808 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e066      	b.n	80058ec <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	7f5b      	ldrb	r3, [r3, #29]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d105      	bne.n	8005834 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fd fad4 	bl	8002ddc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	22ca      	movs	r2, #202	; 0xca
 8005840:	625a      	str	r2, [r3, #36]	; 0x24
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2253      	movs	r2, #83	; 0x53
 8005848:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f998 	bl	8005b80 <RTC_EnterInitMode>
 8005850:	4603      	mov	r3, r0
 8005852:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d12c      	bne.n	80058b4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800586c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6899      	ldr	r1, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	68d2      	ldr	r2, [r2, #12]
 8005894:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6919      	ldr	r1, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	041a      	lsls	r2, r3, #16
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f99f 	bl	8005bee <RTC_ExitInitMode>
 80058b0:	4603      	mov	r3, r0
 80058b2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d113      	bne.n	80058e2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	22ff      	movs	r2, #255	; 0xff
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	7f1b      	ldrb	r3, [r3, #28]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_RTC_SetTime+0x1c>
 800590c:	2302      	movs	r3, #2
 800590e:	e087      	b.n	8005a20 <HAL_RTC_SetTime+0x12c>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2202      	movs	r2, #2
 800591a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d126      	bne.n	8005970 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2200      	movs	r2, #0
 8005934:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 f97c 	bl	8005c38 <RTC_ByteToBcd2>
 8005940:	4603      	mov	r3, r0
 8005942:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f975 	bl	8005c38 <RTC_ByteToBcd2>
 800594e:	4603      	mov	r3, r0
 8005950:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005952:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	789b      	ldrb	r3, [r3, #2]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 f96d 	bl	8005c38 <RTC_ByteToBcd2>
 800595e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005960:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	78db      	ldrb	r3, [r3, #3]
 8005968:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e018      	b.n	80059a2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2200      	movs	r2, #0
 8005982:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005990:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005996:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	78db      	ldrb	r3, [r3, #3]
 800599c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	22ca      	movs	r2, #202	; 0xca
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2253      	movs	r2, #83	; 0x53
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f8e4 	bl	8005b80 <RTC_EnterInitMode>
 80059b8:	4603      	mov	r3, r0
 80059ba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80059bc:	7cfb      	ldrb	r3, [r7, #19]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d120      	bne.n	8005a04 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80059cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80059d0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6899      	ldr	r1, [r3, #8]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 f8f7 	bl	8005bee <RTC_ExitInitMode>
 8005a00:	4603      	mov	r3, r0
 8005a02:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005a04:	7cfb      	ldrb	r3, [r7, #19]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d102      	bne.n	8005a10 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	22ff      	movs	r2, #255	; 0xff
 8005a16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	771a      	strb	r2, [r3, #28]

  return status;
 8005a1e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd90      	pop	{r4, r7, pc}

08005a28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a28:	b590      	push	{r4, r7, lr}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	7f1b      	ldrb	r3, [r3, #28]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_RTC_SetDate+0x1c>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e071      	b.n	8005b28 <HAL_RTC_SetDate+0x100>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10e      	bne.n	8005a74 <HAL_RTC_SetDate+0x4c>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	785b      	ldrb	r3, [r3, #1]
 8005a5a:	f003 0310 	and.w	r3, r3, #16
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	785b      	ldrb	r3, [r3, #1]
 8005a66:	f023 0310 	bic.w	r3, r3, #16
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	330a      	adds	r3, #10
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d11c      	bne.n	8005ab4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	78db      	ldrb	r3, [r3, #3]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f8da 	bl	8005c38 <RTC_ByteToBcd2>
 8005a84:	4603      	mov	r3, r0
 8005a86:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 f8d3 	bl	8005c38 <RTC_ByteToBcd2>
 8005a92:	4603      	mov	r3, r0
 8005a94:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a96:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	789b      	ldrb	r3, [r3, #2]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 f8cb 	bl	8005c38 <RTC_ByteToBcd2>
 8005aa2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005aa4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e00e      	b.n	8005ad2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ac0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ac6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	22ca      	movs	r2, #202	; 0xca
 8005ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2253      	movs	r2, #83	; 0x53
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f84c 	bl	8005b80 <RTC_EnterInitMode>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005aec:	7cfb      	ldrb	r3, [r7, #19]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10c      	bne.n	8005b0c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005afc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b00:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 f873 	bl	8005bee <RTC_ExitInitMode>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d102      	bne.n	8005b18 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	22ff      	movs	r2, #255	; 0xff
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	771a      	strb	r2, [r3, #28]

  return status;
 8005b26:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd90      	pop	{r4, r7, pc}

08005b30 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b4a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b4c:	f7fd fbdc 	bl	8003308 <HAL_GetTick>
 8005b50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b52:	e009      	b.n	8005b68 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b54:	f7fd fbd8 	bl	8003308 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b62:	d901      	bls.n	8005b68 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e007      	b.n	8005b78 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0ee      	beq.n	8005b54 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d122      	bne.n	8005be4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bae:	f7fd fbab 	bl	8003308 <HAL_GetTick>
 8005bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005bb4:	e00c      	b.n	8005bd0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bb6:	f7fd fba7 	bl	8003308 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bc4:	d904      	bls.n	8005bd0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2204      	movs	r2, #4
 8005bca:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d102      	bne.n	8005be4 <RTC_EnterInitMode+0x64>
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d1e8      	bne.n	8005bb6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c08:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff ff89 	bl	8005b30 <HAL_RTC_WaitForSynchro>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2204      	movs	r2, #4
 8005c28:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005c46:	e005      	b.n	8005c54 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
 8005c50:	3b0a      	subs	r3, #10
 8005c52:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005c54:	79fb      	ldrb	r3, [r7, #7]
 8005c56:	2b09      	cmp	r3, #9
 8005c58:	d8f6      	bhi.n	8005c48 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	b2db      	uxtb	r3, r3
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005c80:	4b59      	ldr	r3, [pc, #356]	; (8005de8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a59      	ldr	r2, [pc, #356]	; (8005dec <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	0adb      	lsrs	r3, r3, #11
 8005c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
 8005c94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	7f1b      	ldrb	r3, [r3, #28]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e09b      	b.n	8005dda <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2202      	movs	r2, #2
 8005cac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	22ca      	movs	r2, #202	; 0xca
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2253      	movs	r2, #83	; 0x53
 8005cbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d017      	beq.n	8005cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	1e5a      	subs	r2, r3, #1
 8005cd0:	617a      	str	r2, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10b      	bne.n	8005cee <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	22ff      	movs	r2, #255	; 0xff
 8005cdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2203      	movs	r2, #3
 8005ce2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e075      	b.n	8005dda <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e7      	bne.n	8005ccc <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d0a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005d1c:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005d1e:	4b32      	ldr	r3, [pc, #200]	; (8005de8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a32      	ldr	r2, [pc, #200]	; (8005dec <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005d24:	fba2 2303 	umull	r2, r3, r2, r3
 8005d28:	0adb      	lsrs	r3, r3, #11
 8005d2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d2e:	fb02 f303 	mul.w	r3, r2, r3
 8005d32:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	1e5a      	subs	r2, r3, #1
 8005d38:	617a      	str	r2, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	22ff      	movs	r2, #255	; 0xff
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2203      	movs	r2, #3
 8005d4a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e041      	b.n	8005dda <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0e7      	beq.n	8005d34 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0207 	bic.w	r2, r2, #7
 8005d72:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6899      	ldr	r1, [r3, #8]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005d8c:	4b18      	ldr	r3, [pc, #96]	; (8005df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a17      	ldr	r2, [pc, #92]	; (8005df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d96:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005d98:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	4a14      	ldr	r2, [pc, #80]	; (8005df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005da2:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005db2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dc2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	22ff      	movs	r2, #255	; 0xff
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000010 	.word	0x20000010
 8005dec:	10624dd3 	.word	0x10624dd3
 8005df0:	40013c00 	.word	0x40013c00

08005df4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	7f1b      	ldrb	r3, [r3, #28]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e047      	b.n	8005e9c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	22ca      	movs	r2, #202	; 0xca
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2253      	movs	r2, #83	; 0x53
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e36:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e46:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e48:	f7fd fa5e 	bl	8003308 <HAL_GetTick>
 8005e4c:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005e4e:	e013      	b.n	8005e78 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e50:	f7fd fa5a 	bl	8003308 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e5e:	d90b      	bls.n	8005e78 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	22ff      	movs	r2, #255	; 0xff
 8005e66:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e011      	b.n	8005e9c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0e4      	beq.n	8005e50 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	22ff      	movs	r2, #255	; 0xff
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f816 	bl	8005eec <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005ed0:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005ed2:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8005ed4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005ed8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	775a      	strb	r2, [r3, #29]
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40013c00 	.word	0x40013c00

08005eec <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e041      	b.n	8005f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fc ff8c 	bl	8002e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	f000 fcb8 	bl	80068b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d001      	beq.n	8005fb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e03c      	b.n	8006032 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <HAL_TIM_Base_Start+0xa0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d018      	beq.n	8005ffc <HAL_TIM_Base_Start+0x5c>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd2:	d013      	beq.n	8005ffc <HAL_TIM_Base_Start+0x5c>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1a      	ldr	r2, [pc, #104]	; (8006044 <HAL_TIM_Base_Start+0xa4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00e      	beq.n	8005ffc <HAL_TIM_Base_Start+0x5c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a19      	ldr	r2, [pc, #100]	; (8006048 <HAL_TIM_Base_Start+0xa8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d009      	beq.n	8005ffc <HAL_TIM_Base_Start+0x5c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a17      	ldr	r2, [pc, #92]	; (800604c <HAL_TIM_Base_Start+0xac>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <HAL_TIM_Base_Start+0x5c>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a16      	ldr	r2, [pc, #88]	; (8006050 <HAL_TIM_Base_Start+0xb0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d111      	bne.n	8006020 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b06      	cmp	r3, #6
 800600c:	d010      	beq.n	8006030 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 0201 	orr.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601e:	e007      	b.n	8006030 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40010000 	.word	0x40010000
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00
 8006050:	40014000 	.word	0x40014000

08006054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d001      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e044      	b.n	80060f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1e      	ldr	r2, [pc, #120]	; (8006104 <HAL_TIM_Base_Start_IT+0xb0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d018      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x6c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d013      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x6c>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1a      	ldr	r2, [pc, #104]	; (8006108 <HAL_TIM_Base_Start_IT+0xb4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00e      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x6c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a19      	ldr	r2, [pc, #100]	; (800610c <HAL_TIM_Base_Start_IT+0xb8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d009      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x6c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a17      	ldr	r2, [pc, #92]	; (8006110 <HAL_TIM_Base_Start_IT+0xbc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d004      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x6c>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a16      	ldr	r2, [pc, #88]	; (8006114 <HAL_TIM_Base_Start_IT+0xc0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d111      	bne.n	80060e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b06      	cmp	r3, #6
 80060d0:	d010      	beq.n	80060f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0201 	orr.w	r2, r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e2:	e007      	b.n	80060f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40010000 	.word	0x40010000
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800
 8006110:	40000c00 	.word	0x40000c00
 8006114:	40014000 	.word	0x40014000

08006118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e041      	b.n	80061ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f839 	bl	80061b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f000 fbac 	bl	80068b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <HAL_TIM_PWM_Start+0x24>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e022      	b.n	8006236 <HAL_TIM_PWM_Start+0x6a>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d109      	bne.n	800620a <HAL_TIM_PWM_Start+0x3e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b01      	cmp	r3, #1
 8006200:	bf14      	ite	ne
 8006202:	2301      	movne	r3, #1
 8006204:	2300      	moveq	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	e015      	b.n	8006236 <HAL_TIM_PWM_Start+0x6a>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b08      	cmp	r3, #8
 800620e:	d109      	bne.n	8006224 <HAL_TIM_PWM_Start+0x58>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e008      	b.n	8006236 <HAL_TIM_PWM_Start+0x6a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e068      	b.n	8006310 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <HAL_TIM_PWM_Start+0x82>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800624c:	e013      	b.n	8006276 <HAL_TIM_PWM_Start+0xaa>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b04      	cmp	r3, #4
 8006252:	d104      	bne.n	800625e <HAL_TIM_PWM_Start+0x92>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800625c:	e00b      	b.n	8006276 <HAL_TIM_PWM_Start+0xaa>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b08      	cmp	r3, #8
 8006262:	d104      	bne.n	800626e <HAL_TIM_PWM_Start+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800626c:	e003      	b.n	8006276 <HAL_TIM_PWM_Start+0xaa>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2201      	movs	r2, #1
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fdbe 	bl	8006e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a23      	ldr	r2, [pc, #140]	; (8006318 <HAL_TIM_PWM_Start+0x14c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d107      	bne.n	800629e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800629c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <HAL_TIM_PWM_Start+0x14c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d018      	beq.n	80062da <HAL_TIM_PWM_Start+0x10e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b0:	d013      	beq.n	80062da <HAL_TIM_PWM_Start+0x10e>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a19      	ldr	r2, [pc, #100]	; (800631c <HAL_TIM_PWM_Start+0x150>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_TIM_PWM_Start+0x10e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a17      	ldr	r2, [pc, #92]	; (8006320 <HAL_TIM_PWM_Start+0x154>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_TIM_PWM_Start+0x10e>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a16      	ldr	r2, [pc, #88]	; (8006324 <HAL_TIM_PWM_Start+0x158>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_TIM_PWM_Start+0x10e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a14      	ldr	r2, [pc, #80]	; (8006328 <HAL_TIM_PWM_Start+0x15c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d111      	bne.n	80062fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b06      	cmp	r3, #6
 80062ea:	d010      	beq.n	800630e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fc:	e007      	b.n	800630e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40010000 	.word	0x40010000
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40000c00 	.word	0x40000c00
 8006328:	40014000 	.word	0x40014000

0800632c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d122      	bne.n	8006388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b02      	cmp	r3, #2
 800634e:	d11b      	bne.n	8006388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0202 	mvn.w	r2, #2
 8006358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa81 	bl	8006876 <HAL_TIM_IC_CaptureCallback>
 8006374:	e005      	b.n	8006382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fa73 	bl	8006862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fa84 	bl	800688a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b04      	cmp	r3, #4
 8006394:	d122      	bne.n	80063dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d11b      	bne.n	80063dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0204 	mvn.w	r2, #4
 80063ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa57 	bl	8006876 <HAL_TIM_IC_CaptureCallback>
 80063c8:	e005      	b.n	80063d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa49 	bl	8006862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fa5a 	bl	800688a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d122      	bne.n	8006430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d11b      	bne.n	8006430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0208 	mvn.w	r2, #8
 8006400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2204      	movs	r2, #4
 8006406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa2d 	bl	8006876 <HAL_TIM_IC_CaptureCallback>
 800641c:	e005      	b.n	800642a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa1f 	bl	8006862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fa30 	bl	800688a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b10      	cmp	r3, #16
 800643c:	d122      	bne.n	8006484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b10      	cmp	r3, #16
 800644a:	d11b      	bne.n	8006484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0210 	mvn.w	r2, #16
 8006454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2208      	movs	r2, #8
 800645a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fa03 	bl	8006876 <HAL_TIM_IC_CaptureCallback>
 8006470:	e005      	b.n	800647e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9f5 	bl	8006862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fa06 	bl	800688a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10e      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d107      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0201 	mvn.w	r2, #1
 80064a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9cf 	bl	800684e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ba:	2b80      	cmp	r3, #128	; 0x80
 80064bc:	d10e      	bne.n	80064dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c8:	2b80      	cmp	r3, #128	; 0x80
 80064ca:	d107      	bne.n	80064dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fd30 	bl	8006f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d10e      	bne.n	8006508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d107      	bne.n	8006508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f9cb 	bl	800689e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b20      	cmp	r3, #32
 8006514:	d10e      	bne.n	8006534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b20      	cmp	r3, #32
 8006522:	d107      	bne.n	8006534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0220 	mvn.w	r2, #32
 800652c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fcfa 	bl	8006f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006556:	2302      	movs	r3, #2
 8006558:	e0ae      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b0c      	cmp	r3, #12
 8006566:	f200 809f 	bhi.w	80066a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080066a9 	.word	0x080066a9
 8006578:	080066a9 	.word	0x080066a9
 800657c:	080066a9 	.word	0x080066a9
 8006580:	080065e5 	.word	0x080065e5
 8006584:	080066a9 	.word	0x080066a9
 8006588:	080066a9 	.word	0x080066a9
 800658c:	080066a9 	.word	0x080066a9
 8006590:	08006627 	.word	0x08006627
 8006594:	080066a9 	.word	0x080066a9
 8006598:	080066a9 	.word	0x080066a9
 800659c:	080066a9 	.word	0x080066a9
 80065a0:	08006667 	.word	0x08006667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fa02 	bl	80069b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0208 	orr.w	r2, r2, #8
 80065be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0204 	bic.w	r2, r2, #4
 80065ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6999      	ldr	r1, [r3, #24]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	691a      	ldr	r2, [r3, #16]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	619a      	str	r2, [r3, #24]
      break;
 80065e2:	e064      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fa48 	bl	8006a80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6999      	ldr	r1, [r3, #24]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	021a      	lsls	r2, r3, #8
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	619a      	str	r2, [r3, #24]
      break;
 8006624:	e043      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fa93 	bl	8006b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0208 	orr.w	r2, r2, #8
 8006640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0204 	bic.w	r2, r2, #4
 8006650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69d9      	ldr	r1, [r3, #28]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	61da      	str	r2, [r3, #28]
      break;
 8006664:	e023      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fadd 	bl	8006c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69d9      	ldr	r1, [r3, #28]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	021a      	lsls	r2, r3, #8
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	61da      	str	r2, [r3, #28]
      break;
 80066a6:	e002      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
      break;
 80066ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_TIM_ConfigClockSource+0x1c>
 80066d8:	2302      	movs	r3, #2
 80066da:	e0b4      	b.n	8006846 <HAL_TIM_ConfigClockSource+0x186>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006714:	d03e      	beq.n	8006794 <HAL_TIM_ConfigClockSource+0xd4>
 8006716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800671a:	f200 8087 	bhi.w	800682c <HAL_TIM_ConfigClockSource+0x16c>
 800671e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006722:	f000 8086 	beq.w	8006832 <HAL_TIM_ConfigClockSource+0x172>
 8006726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672a:	d87f      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 800672c:	2b70      	cmp	r3, #112	; 0x70
 800672e:	d01a      	beq.n	8006766 <HAL_TIM_ConfigClockSource+0xa6>
 8006730:	2b70      	cmp	r3, #112	; 0x70
 8006732:	d87b      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 8006734:	2b60      	cmp	r3, #96	; 0x60
 8006736:	d050      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x11a>
 8006738:	2b60      	cmp	r3, #96	; 0x60
 800673a:	d877      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 800673c:	2b50      	cmp	r3, #80	; 0x50
 800673e:	d03c      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0xfa>
 8006740:	2b50      	cmp	r3, #80	; 0x50
 8006742:	d873      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 8006744:	2b40      	cmp	r3, #64	; 0x40
 8006746:	d058      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x13a>
 8006748:	2b40      	cmp	r3, #64	; 0x40
 800674a:	d86f      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 800674c:	2b30      	cmp	r3, #48	; 0x30
 800674e:	d064      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15a>
 8006750:	2b30      	cmp	r3, #48	; 0x30
 8006752:	d86b      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 8006754:	2b20      	cmp	r3, #32
 8006756:	d060      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15a>
 8006758:	2b20      	cmp	r3, #32
 800675a:	d867      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d05c      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15a>
 8006760:	2b10      	cmp	r3, #16
 8006762:	d05a      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15a>
 8006764:	e062      	b.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	6899      	ldr	r1, [r3, #8]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f000 fb23 	bl	8006dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	609a      	str	r2, [r3, #8]
      break;
 8006792:	e04f      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	6899      	ldr	r1, [r3, #8]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f000 fb0c 	bl	8006dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067b6:	609a      	str	r2, [r3, #8]
      break;
 80067b8:	e03c      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6859      	ldr	r1, [r3, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f000 fa80 	bl	8006ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2150      	movs	r1, #80	; 0x50
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fad9 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 80067d8:	e02c      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6859      	ldr	r1, [r3, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f000 fa9f 	bl	8006d2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2160      	movs	r1, #96	; 0x60
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fac9 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 80067f8:	e01c      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6859      	ldr	r1, [r3, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	461a      	mov	r2, r3
 8006808:	f000 fa60 	bl	8006ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2140      	movs	r1, #64	; 0x40
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fab9 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 8006818:	e00c      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4619      	mov	r1, r3
 8006824:	4610      	mov	r0, r2
 8006826:	f000 fab0 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 800682a:	e003      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]
      break;
 8006830:	e000      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a34      	ldr	r2, [pc, #208]	; (8006998 <TIM_Base_SetConfig+0xe4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00f      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d2:	d00b      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a31      	ldr	r2, [pc, #196]	; (800699c <TIM_Base_SetConfig+0xe8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d007      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a30      	ldr	r2, [pc, #192]	; (80069a0 <TIM_Base_SetConfig+0xec>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a2f      	ldr	r2, [pc, #188]	; (80069a4 <TIM_Base_SetConfig+0xf0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d108      	bne.n	80068fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a25      	ldr	r2, [pc, #148]	; (8006998 <TIM_Base_SetConfig+0xe4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01b      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690c:	d017      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a22      	ldr	r2, [pc, #136]	; (800699c <TIM_Base_SetConfig+0xe8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a21      	ldr	r2, [pc, #132]	; (80069a0 <TIM_Base_SetConfig+0xec>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00f      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <TIM_Base_SetConfig+0xf0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00b      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1f      	ldr	r2, [pc, #124]	; (80069a8 <TIM_Base_SetConfig+0xf4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d007      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1e      	ldr	r2, [pc, #120]	; (80069ac <TIM_Base_SetConfig+0xf8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d003      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <TIM_Base_SetConfig+0xfc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d108      	bne.n	8006950 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a08      	ldr	r2, [pc, #32]	; (8006998 <TIM_Base_SetConfig+0xe4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d103      	bne.n	8006984 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	615a      	str	r2, [r3, #20]
}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	40014000 	.word	0x40014000
 80069ac:	40014400 	.word	0x40014400
 80069b0:	40014800 	.word	0x40014800

080069b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0201 	bic.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f023 0302 	bic.w	r3, r3, #2
 80069fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a1c      	ldr	r2, [pc, #112]	; (8006a7c <TIM_OC1_SetConfig+0xc8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d10c      	bne.n	8006a2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f023 0308 	bic.w	r3, r3, #8
 8006a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f023 0304 	bic.w	r3, r3, #4
 8006a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <TIM_OC1_SetConfig+0xc8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d111      	bne.n	8006a56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	621a      	str	r2, [r3, #32]
}
 8006a70:	bf00      	nop
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	40010000 	.word	0x40010000

08006a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f023 0210 	bic.w	r2, r3, #16
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f023 0320 	bic.w	r3, r3, #32
 8006aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a1e      	ldr	r2, [pc, #120]	; (8006b54 <TIM_OC2_SetConfig+0xd4>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d10d      	bne.n	8006afc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006afa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a15      	ldr	r2, [pc, #84]	; (8006b54 <TIM_OC2_SetConfig+0xd4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d113      	bne.n	8006b2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	621a      	str	r2, [r3, #32]
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40010000 	.word	0x40010000

08006b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1d      	ldr	r2, [pc, #116]	; (8006c28 <TIM_OC3_SetConfig+0xd0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d10d      	bne.n	8006bd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a14      	ldr	r2, [pc, #80]	; (8006c28 <TIM_OC3_SetConfig+0xd0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d113      	bne.n	8006c02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	621a      	str	r2, [r3, #32]
}
 8006c1c:	bf00      	nop
 8006c1e:	371c      	adds	r7, #28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	40010000 	.word	0x40010000

08006c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	031b      	lsls	r3, r3, #12
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a10      	ldr	r2, [pc, #64]	; (8006cc8 <TIM_OC4_SetConfig+0x9c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d109      	bne.n	8006ca0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	019b      	lsls	r3, r3, #6
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	621a      	str	r2, [r3, #32]
}
 8006cba:	bf00      	nop
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40010000 	.word	0x40010000

08006ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f023 0201 	bic.w	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f023 030a 	bic.w	r3, r3, #10
 8006d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b087      	sub	sp, #28
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f023 0210 	bic.w	r2, r3, #16
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	031b      	lsls	r3, r3, #12
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f043 0307 	orr.w	r3, r3, #7
 8006dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	609a      	str	r2, [r3, #8]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	021a      	lsls	r2, r3, #8
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	609a      	str	r2, [r3, #8]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f003 031f 	and.w	r3, r3, #31
 8006e12:	2201      	movs	r2, #1
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1a      	ldr	r2, [r3, #32]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	43db      	mvns	r3, r3
 8006e22:	401a      	ands	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a1a      	ldr	r2, [r3, #32]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f003 031f 	and.w	r3, r3, #31
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	fa01 f303 	lsl.w	r3, r1, r3
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e050      	b.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1c      	ldr	r2, [pc, #112]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d018      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb0:	d013      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00e      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a16      	ldr	r2, [pc, #88]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a13      	ldr	r2, [pc, #76]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d10c      	bne.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40000800 	.word	0x40000800
 8006f20:	40000c00 	.word	0x40000c00
 8006f24:	40014000 	.word	0x40014000

08006f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e03f      	b.n	8006fe2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d106      	bne.n	8006f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7fc f844 	bl	8003004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2224      	movs	r2, #36	; 0x24
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fcdf 	bl	8007958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695a      	ldr	r2, [r3, #20]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b20      	cmp	r3, #32
 8007002:	d11d      	bne.n	8007040 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <HAL_UART_Receive_IT+0x26>
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e016      	b.n	8007042 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800701a:	2b01      	cmp	r3, #1
 800701c:	d101      	bne.n	8007022 <HAL_UART_Receive_IT+0x38>
 800701e:	2302      	movs	r3, #2
 8007020:	e00f      	b.n	8007042 <HAL_UART_Receive_IT+0x58>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007030:	88fb      	ldrh	r3, [r7, #6]
 8007032:	461a      	mov	r2, r3
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 fab6 	bl	80075a8 <UART_Start_Receive_IT>
 800703c:	4603      	mov	r3, r0
 800703e:	e000      	b.n	8007042 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007040:	2302      	movs	r3, #2
  }
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b0ba      	sub	sp, #232	; 0xe8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007072:	2300      	movs	r3, #0
 8007074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007078:	2300      	movs	r3, #0
 800707a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800707e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800708a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10f      	bne.n	80070b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <HAL_UART_IRQHandler+0x66>
 800709e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fb99 	bl	80077e2 <UART_Receive_IT>
      return;
 80070b0:	e256      	b.n	8007560 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80de 	beq.w	8007278 <HAL_UART_IRQHandler+0x22c>
 80070bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d106      	bne.n	80070d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80d1 	beq.w	8007278 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <HAL_UART_IRQHandler+0xae>
 80070e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	f043 0201 	orr.w	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00b      	beq.n	800711e <HAL_UART_IRQHandler+0xd2>
 8007106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d005      	beq.n	800711e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f043 0202 	orr.w	r2, r3, #2
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00b      	beq.n	8007142 <HAL_UART_IRQHandler+0xf6>
 800712a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	d005      	beq.n	8007142 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f043 0204 	orr.w	r2, r3, #4
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d011      	beq.n	8007172 <HAL_UART_IRQHandler+0x126>
 800714e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d105      	bne.n	8007166 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800715a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f043 0208 	orr.w	r2, r3, #8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 81ed 	beq.w	8007556 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800717c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d008      	beq.n	800719a <HAL_UART_IRQHandler+0x14e>
 8007188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fb24 	bl	80077e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	bf0c      	ite	eq
 80071a8:	2301      	moveq	r3, #1
 80071aa:	2300      	movne	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d103      	bne.n	80071c6 <HAL_UART_IRQHandler+0x17a>
 80071be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d04f      	beq.n	8007266 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa2c 	bl	8007624 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d6:	2b40      	cmp	r3, #64	; 0x40
 80071d8:	d141      	bne.n	800725e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3314      	adds	r3, #20
 80071e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3314      	adds	r3, #20
 8007202:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007206:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800720a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007212:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800721e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1d9      	bne.n	80071da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	2b00      	cmp	r3, #0
 800722c:	d013      	beq.n	8007256 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	4a7d      	ldr	r2, [pc, #500]	; (8007428 <HAL_UART_IRQHandler+0x3dc>)
 8007234:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	4618      	mov	r0, r3
 800723c:	f7fc fdf3 	bl	8003e26 <HAL_DMA_Abort_IT>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d016      	beq.n	8007274 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007250:	4610      	mov	r0, r2
 8007252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007254:	e00e      	b.n	8007274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f990 	bl	800757c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725c:	e00a      	b.n	8007274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f98c 	bl	800757c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007264:	e006      	b.n	8007274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f988 	bl	800757c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007272:	e170      	b.n	8007556 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007274:	bf00      	nop
    return;
 8007276:	e16e      	b.n	8007556 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727c:	2b01      	cmp	r3, #1
 800727e:	f040 814a 	bne.w	8007516 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007286:	f003 0310 	and.w	r3, r3, #16
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 8143 	beq.w	8007516 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007294:	f003 0310 	and.w	r3, r3, #16
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 813c 	beq.w	8007516 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60bb      	str	r3, [r7, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	f040 80b4 	bne.w	800742c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8140 	beq.w	800755a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072e2:	429a      	cmp	r2, r3
 80072e4:	f080 8139 	bcs.w	800755a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fa:	f000 8088 	beq.w	800740e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	330c      	adds	r3, #12
 8007304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800731c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	330c      	adds	r3, #12
 8007326:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800732a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800732e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007336:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1d9      	bne.n	80072fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3314      	adds	r3, #20
 8007350:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800735a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800735c:	f023 0301 	bic.w	r3, r3, #1
 8007360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3314      	adds	r3, #20
 800736a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800736e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007372:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007376:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e1      	bne.n	800734a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3314      	adds	r3, #20
 800738c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3314      	adds	r3, #20
 80073a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e3      	bne.n	8007386 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	330c      	adds	r3, #12
 80073d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073de:	f023 0310 	bic.w	r3, r3, #16
 80073e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	330c      	adds	r3, #12
 80073ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80073f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e3      	bne.n	80073cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007408:	4618      	mov	r0, r3
 800740a:	f7fc fc9c 	bl	8003d46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007416:	b29b      	uxth	r3, r3
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	b29b      	uxth	r3, r3
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f8b6 	bl	8007590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007424:	e099      	b.n	800755a <HAL_UART_IRQHandler+0x50e>
 8007426:	bf00      	nop
 8007428:	080076eb 	.word	0x080076eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007434:	b29b      	uxth	r3, r3
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 808b 	beq.w	800755e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8086 	beq.w	800755e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007464:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007476:	647a      	str	r2, [r7, #68]	; 0x44
 8007478:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800747c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e3      	bne.n	8007452 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3314      	adds	r3, #20
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	623b      	str	r3, [r7, #32]
   return(result);
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3314      	adds	r3, #20
 80074aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074ae:	633a      	str	r2, [r7, #48]	; 0x30
 80074b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e3      	bne.n	800748a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	330c      	adds	r3, #12
 80074d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	60fb      	str	r3, [r7, #12]
   return(result);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0310 	bic.w	r3, r3, #16
 80074e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	330c      	adds	r3, #12
 80074f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074f4:	61fa      	str	r2, [r7, #28]
 80074f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	69b9      	ldr	r1, [r7, #24]
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	617b      	str	r3, [r7, #20]
   return(result);
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e3      	bne.n	80074d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007508:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f83e 	bl	8007590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007514:	e023      	b.n	800755e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800751a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <HAL_UART_IRQHandler+0x4ea>
 8007522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f8ef 	bl	8007712 <UART_Transmit_IT>
    return;
 8007534:	e014      	b.n	8007560 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00e      	beq.n	8007560 <HAL_UART_IRQHandler+0x514>
 8007542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d008      	beq.n	8007560 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f92f 	bl	80077b2 <UART_EndTransmit_IT>
    return;
 8007554:	e004      	b.n	8007560 <HAL_UART_IRQHandler+0x514>
    return;
 8007556:	bf00      	nop
 8007558:	e002      	b.n	8007560 <HAL_UART_IRQHandler+0x514>
      return;
 800755a:	bf00      	nop
 800755c:	e000      	b.n	8007560 <HAL_UART_IRQHandler+0x514>
      return;
 800755e:	bf00      	nop
  }
}
 8007560:	37e8      	adds	r7, #232	; 0xe8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop

08007568 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4613      	mov	r3, r2
 80075b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	88fa      	ldrh	r2, [r7, #6]
 80075c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	88fa      	ldrh	r2, [r7, #6]
 80075c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2222      	movs	r2, #34	; 0x22
 80075d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d007      	beq.n	80075f6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695a      	ldr	r2, [r3, #20]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f042 0201 	orr.w	r2, r2, #1
 8007604:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0220 	orr.w	r2, r2, #32
 8007614:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007624:	b480      	push	{r7}
 8007626:	b095      	sub	sp, #84	; 0x54
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	330c      	adds	r3, #12
 8007632:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800764c:	643a      	str	r2, [r7, #64]	; 0x40
 800764e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e5      	bne.n	800762c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3314      	adds	r3, #20
 8007666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	e853 3f00 	ldrex	r3, [r3]
 800766e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f023 0301 	bic.w	r3, r3, #1
 8007676:	64bb      	str	r3, [r7, #72]	; 0x48
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3314      	adds	r3, #20
 800767e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007680:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e5      	bne.n	8007660 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	2b01      	cmp	r3, #1
 800769a:	d119      	bne.n	80076d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f023 0310 	bic.w	r3, r3, #16
 80076b2:	647b      	str	r3, [r7, #68]	; 0x44
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076bc:	61ba      	str	r2, [r7, #24]
 80076be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6979      	ldr	r1, [r7, #20]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	613b      	str	r3, [r7, #16]
   return(result);
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e5      	bne.n	800769c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076de:	bf00      	nop
 80076e0:	3754      	adds	r7, #84	; 0x54
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f7ff ff39 	bl	800757c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800770a:	bf00      	nop
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b21      	cmp	r3, #33	; 0x21
 8007724:	d13e      	bne.n	80077a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772e:	d114      	bne.n	800775a <UART_Transmit_IT+0x48>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d110      	bne.n	800775a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800774c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	1c9a      	adds	r2, r3, #2
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	621a      	str	r2, [r3, #32]
 8007758:	e008      	b.n	800776c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	1c59      	adds	r1, r3, #1
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6211      	str	r1, [r2, #32]
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	b29b      	uxth	r3, r3
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	4619      	mov	r1, r3
 800777a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10f      	bne.n	80077a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68da      	ldr	r2, [r3, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800778e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800779e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e000      	b.n	80077a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077a4:	2302      	movs	r3, #2
  }
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7ff fec8 	bl	8007568 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b08c      	sub	sp, #48	; 0x30
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b22      	cmp	r3, #34	; 0x22
 80077f4:	f040 80ab 	bne.w	800794e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007800:	d117      	bne.n	8007832 <UART_Receive_IT+0x50>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d113      	bne.n	8007832 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	b29b      	uxth	r3, r3
 800781c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007820:	b29a      	uxth	r2, r3
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782a:	1c9a      	adds	r2, r3, #2
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	629a      	str	r2, [r3, #40]	; 0x28
 8007830:	e026      	b.n	8007880 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007838:	2300      	movs	r3, #0
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007844:	d007      	beq.n	8007856 <UART_Receive_IT+0x74>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <UART_Receive_IT+0x82>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	b2da      	uxtb	r2, r3
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e008      	b.n	8007876 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007870:	b2da      	uxtb	r2, r3
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29b      	uxth	r3, r3
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	4619      	mov	r1, r3
 800788e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007890:	2b00      	cmp	r3, #0
 8007892:	d15a      	bne.n	800794a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0220 	bic.w	r2, r2, #32
 80078a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	695a      	ldr	r2, [r3, #20]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d135      	bne.n	8007940 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	330c      	adds	r3, #12
 80078e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f023 0310 	bic.w	r3, r3, #16
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	330c      	adds	r3, #12
 80078f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fa:	623a      	str	r2, [r7, #32]
 80078fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	69f9      	ldr	r1, [r7, #28]
 8007900:	6a3a      	ldr	r2, [r7, #32]
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	61bb      	str	r3, [r7, #24]
   return(result);
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e5      	bne.n	80078da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	2b10      	cmp	r3, #16
 800791a:	d10a      	bne.n	8007932 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff fe29 	bl	8007590 <HAL_UARTEx_RxEventCallback>
 800793e:	e002      	b.n	8007946 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7fa f971 	bl	8001c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	e002      	b.n	8007950 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	e000      	b.n	8007950 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800794e:	2302      	movs	r3, #2
  }
}
 8007950:	4618      	mov	r0, r3
 8007952:	3730      	adds	r7, #48	; 0x30
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800795c:	b0c0      	sub	sp, #256	; 0x100
 800795e:	af00      	add	r7, sp, #0
 8007960:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007974:	68d9      	ldr	r1, [r3, #12]
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	ea40 0301 	orr.w	r3, r0, r1
 8007980:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	431a      	orrs	r2, r3
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	431a      	orrs	r2, r3
 8007998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	4313      	orrs	r3, r2
 80079a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079b0:	f021 010c 	bic.w	r1, r1, #12
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079be:	430b      	orrs	r3, r1
 80079c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d2:	6999      	ldr	r1, [r3, #24]
 80079d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	ea40 0301 	orr.w	r3, r0, r1
 80079de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	4b8f      	ldr	r3, [pc, #572]	; (8007c24 <UART_SetConfig+0x2cc>)
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d005      	beq.n	80079f8 <UART_SetConfig+0xa0>
 80079ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4b8d      	ldr	r3, [pc, #564]	; (8007c28 <UART_SetConfig+0x2d0>)
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d104      	bne.n	8007a02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079f8:	f7fd fe02 	bl	8005600 <HAL_RCC_GetPCLK2Freq>
 80079fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007a00:	e003      	b.n	8007a0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a02:	f7fd fde9 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 8007a06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a14:	f040 810c 	bne.w	8007c30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	462b      	mov	r3, r5
 8007a2e:	1891      	adds	r1, r2, r2
 8007a30:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a32:	415b      	adcs	r3, r3
 8007a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	eb12 0801 	adds.w	r8, r2, r1
 8007a40:	4629      	mov	r1, r5
 8007a42:	eb43 0901 	adc.w	r9, r3, r1
 8007a46:	f04f 0200 	mov.w	r2, #0
 8007a4a:	f04f 0300 	mov.w	r3, #0
 8007a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a5a:	4690      	mov	r8, r2
 8007a5c:	4699      	mov	r9, r3
 8007a5e:	4623      	mov	r3, r4
 8007a60:	eb18 0303 	adds.w	r3, r8, r3
 8007a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a68:	462b      	mov	r3, r5
 8007a6a:	eb49 0303 	adc.w	r3, r9, r3
 8007a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a86:	460b      	mov	r3, r1
 8007a88:	18db      	adds	r3, r3, r3
 8007a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	eb42 0303 	adc.w	r3, r2, r3
 8007a92:	657b      	str	r3, [r7, #84]	; 0x54
 8007a94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a9c:	f7f9 f80e 	bl	8000abc <__aeabi_uldivmod>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4b61      	ldr	r3, [pc, #388]	; (8007c2c <UART_SetConfig+0x2d4>)
 8007aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	011c      	lsls	r4, r3, #4
 8007aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ab8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007abc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	1891      	adds	r1, r2, r2
 8007ac6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ac8:	415b      	adcs	r3, r3
 8007aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007acc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	eb12 0a01 	adds.w	sl, r2, r1
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	eb43 0b01 	adc.w	fp, r3, r1
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	f04f 0300 	mov.w	r3, #0
 8007ae4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ae8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007af0:	4692      	mov	sl, r2
 8007af2:	469b      	mov	fp, r3
 8007af4:	4643      	mov	r3, r8
 8007af6:	eb1a 0303 	adds.w	r3, sl, r3
 8007afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007afe:	464b      	mov	r3, r9
 8007b00:	eb4b 0303 	adc.w	r3, fp, r3
 8007b04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	18db      	adds	r3, r3, r3
 8007b20:	643b      	str	r3, [r7, #64]	; 0x40
 8007b22:	4613      	mov	r3, r2
 8007b24:	eb42 0303 	adc.w	r3, r2, r3
 8007b28:	647b      	str	r3, [r7, #68]	; 0x44
 8007b2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b32:	f7f8 ffc3 	bl	8000abc <__aeabi_uldivmod>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	4b3b      	ldr	r3, [pc, #236]	; (8007c2c <UART_SetConfig+0x2d4>)
 8007b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b42:	095b      	lsrs	r3, r3, #5
 8007b44:	2264      	movs	r2, #100	; 0x64
 8007b46:	fb02 f303 	mul.w	r3, r2, r3
 8007b4a:	1acb      	subs	r3, r1, r3
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b52:	4b36      	ldr	r3, [pc, #216]	; (8007c2c <UART_SetConfig+0x2d4>)
 8007b54:	fba3 2302 	umull	r2, r3, r3, r2
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b60:	441c      	add	r4, r3
 8007b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	1891      	adds	r1, r2, r2
 8007b7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b7c:	415b      	adcs	r3, r3
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b84:	4641      	mov	r1, r8
 8007b86:	1851      	adds	r1, r2, r1
 8007b88:	6339      	str	r1, [r7, #48]	; 0x30
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	414b      	adcs	r3, r1
 8007b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b90:	f04f 0200 	mov.w	r2, #0
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b9c:	4659      	mov	r1, fp
 8007b9e:	00cb      	lsls	r3, r1, #3
 8007ba0:	4651      	mov	r1, sl
 8007ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ba6:	4651      	mov	r1, sl
 8007ba8:	00ca      	lsls	r2, r1, #3
 8007baa:	4610      	mov	r0, r2
 8007bac:	4619      	mov	r1, r3
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	189b      	adds	r3, r3, r2
 8007bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bb8:	464b      	mov	r3, r9
 8007bba:	460a      	mov	r2, r1
 8007bbc:	eb42 0303 	adc.w	r3, r2, r3
 8007bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007bd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007bd8:	460b      	mov	r3, r1
 8007bda:	18db      	adds	r3, r3, r3
 8007bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bde:	4613      	mov	r3, r2
 8007be0:	eb42 0303 	adc.w	r3, r2, r3
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007bee:	f7f8 ff65 	bl	8000abc <__aeabi_uldivmod>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <UART_SetConfig+0x2d4>)
 8007bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bfc:	095b      	lsrs	r3, r3, #5
 8007bfe:	2164      	movs	r1, #100	; 0x64
 8007c00:	fb01 f303 	mul.w	r3, r1, r3
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	3332      	adds	r3, #50	; 0x32
 8007c0a:	4a08      	ldr	r2, [pc, #32]	; (8007c2c <UART_SetConfig+0x2d4>)
 8007c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	f003 0207 	and.w	r2, r3, #7
 8007c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4422      	add	r2, r4
 8007c1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c20:	e105      	b.n	8007e2e <UART_SetConfig+0x4d6>
 8007c22:	bf00      	nop
 8007c24:	40011000 	.word	0x40011000
 8007c28:	40011400 	.word	0x40011400
 8007c2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c42:	4642      	mov	r2, r8
 8007c44:	464b      	mov	r3, r9
 8007c46:	1891      	adds	r1, r2, r2
 8007c48:	6239      	str	r1, [r7, #32]
 8007c4a:	415b      	adcs	r3, r3
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c52:	4641      	mov	r1, r8
 8007c54:	1854      	adds	r4, r2, r1
 8007c56:	4649      	mov	r1, r9
 8007c58:	eb43 0501 	adc.w	r5, r3, r1
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	00eb      	lsls	r3, r5, #3
 8007c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c6a:	00e2      	lsls	r2, r4, #3
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	461d      	mov	r5, r3
 8007c70:	4643      	mov	r3, r8
 8007c72:	18e3      	adds	r3, r4, r3
 8007c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c78:	464b      	mov	r3, r9
 8007c7a:	eb45 0303 	adc.w	r3, r5, r3
 8007c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	008b      	lsls	r3, r1, #2
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ca8:	4621      	mov	r1, r4
 8007caa:	008a      	lsls	r2, r1, #2
 8007cac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007cb0:	f7f8 ff04 	bl	8000abc <__aeabi_uldivmod>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4b60      	ldr	r3, [pc, #384]	; (8007e3c <UART_SetConfig+0x4e4>)
 8007cba:	fba3 2302 	umull	r2, r3, r3, r2
 8007cbe:	095b      	lsrs	r3, r3, #5
 8007cc0:	011c      	lsls	r4, r3, #4
 8007cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ccc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007cd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	1891      	adds	r1, r2, r2
 8007cda:	61b9      	str	r1, [r7, #24]
 8007cdc:	415b      	adcs	r3, r3
 8007cde:	61fb      	str	r3, [r7, #28]
 8007ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	1851      	adds	r1, r2, r1
 8007ce8:	6139      	str	r1, [r7, #16]
 8007cea:	4649      	mov	r1, r9
 8007cec:	414b      	adcs	r3, r1
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	f04f 0300 	mov.w	r3, #0
 8007cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	00cb      	lsls	r3, r1, #3
 8007d00:	4651      	mov	r1, sl
 8007d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d06:	4651      	mov	r1, sl
 8007d08:	00ca      	lsls	r2, r1, #3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4603      	mov	r3, r0
 8007d10:	4642      	mov	r2, r8
 8007d12:	189b      	adds	r3, r3, r2
 8007d14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d18:	464b      	mov	r3, r9
 8007d1a:	460a      	mov	r2, r1
 8007d1c:	eb42 0303 	adc.w	r3, r2, r3
 8007d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	008b      	lsls	r3, r1, #2
 8007d40:	4641      	mov	r1, r8
 8007d42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d46:	4641      	mov	r1, r8
 8007d48:	008a      	lsls	r2, r1, #2
 8007d4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d4e:	f7f8 feb5 	bl	8000abc <__aeabi_uldivmod>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4b39      	ldr	r3, [pc, #228]	; (8007e3c <UART_SetConfig+0x4e4>)
 8007d58:	fba3 1302 	umull	r1, r3, r3, r2
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	2164      	movs	r1, #100	; 0x64
 8007d60:	fb01 f303 	mul.w	r3, r1, r3
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	3332      	adds	r3, #50	; 0x32
 8007d6a:	4a34      	ldr	r2, [pc, #208]	; (8007e3c <UART_SetConfig+0x4e4>)
 8007d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d76:	441c      	add	r4, r3
 8007d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	673b      	str	r3, [r7, #112]	; 0x70
 8007d80:	677a      	str	r2, [r7, #116]	; 0x74
 8007d82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d86:	4642      	mov	r2, r8
 8007d88:	464b      	mov	r3, r9
 8007d8a:	1891      	adds	r1, r2, r2
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	415b      	adcs	r3, r3
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d96:	4641      	mov	r1, r8
 8007d98:	1851      	adds	r1, r2, r1
 8007d9a:	6039      	str	r1, [r7, #0]
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	414b      	adcs	r3, r1
 8007da0:	607b      	str	r3, [r7, #4]
 8007da2:	f04f 0200 	mov.w	r2, #0
 8007da6:	f04f 0300 	mov.w	r3, #0
 8007daa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007dae:	4659      	mov	r1, fp
 8007db0:	00cb      	lsls	r3, r1, #3
 8007db2:	4651      	mov	r1, sl
 8007db4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007db8:	4651      	mov	r1, sl
 8007dba:	00ca      	lsls	r2, r1, #3
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	4642      	mov	r2, r8
 8007dc4:	189b      	adds	r3, r3, r2
 8007dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dc8:	464b      	mov	r3, r9
 8007dca:	460a      	mov	r2, r1
 8007dcc:	eb42 0303 	adc.w	r3, r2, r3
 8007dd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	663b      	str	r3, [r7, #96]	; 0x60
 8007ddc:	667a      	str	r2, [r7, #100]	; 0x64
 8007dde:	f04f 0200 	mov.w	r2, #0
 8007de2:	f04f 0300 	mov.w	r3, #0
 8007de6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007dea:	4649      	mov	r1, r9
 8007dec:	008b      	lsls	r3, r1, #2
 8007dee:	4641      	mov	r1, r8
 8007df0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007df4:	4641      	mov	r1, r8
 8007df6:	008a      	lsls	r2, r1, #2
 8007df8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007dfc:	f7f8 fe5e 	bl	8000abc <__aeabi_uldivmod>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <UART_SetConfig+0x4e4>)
 8007e06:	fba3 1302 	umull	r1, r3, r3, r2
 8007e0a:	095b      	lsrs	r3, r3, #5
 8007e0c:	2164      	movs	r1, #100	; 0x64
 8007e0e:	fb01 f303 	mul.w	r3, r1, r3
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	3332      	adds	r3, #50	; 0x32
 8007e18:	4a08      	ldr	r2, [pc, #32]	; (8007e3c <UART_SetConfig+0x4e4>)
 8007e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	f003 020f 	and.w	r2, r3, #15
 8007e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4422      	add	r2, r4
 8007e2c:	609a      	str	r2, [r3, #8]
}
 8007e2e:	bf00      	nop
 8007e30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e34:	46bd      	mov	sp, r7
 8007e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e3a:	bf00      	nop
 8007e3c:	51eb851f 	.word	0x51eb851f

08007e40 <__errno>:
 8007e40:	4b01      	ldr	r3, [pc, #4]	; (8007e48 <__errno+0x8>)
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	2000001c 	.word	0x2000001c

08007e4c <__libc_init_array>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	4d0d      	ldr	r5, [pc, #52]	; (8007e84 <__libc_init_array+0x38>)
 8007e50:	4c0d      	ldr	r4, [pc, #52]	; (8007e88 <__libc_init_array+0x3c>)
 8007e52:	1b64      	subs	r4, r4, r5
 8007e54:	10a4      	asrs	r4, r4, #2
 8007e56:	2600      	movs	r6, #0
 8007e58:	42a6      	cmp	r6, r4
 8007e5a:	d109      	bne.n	8007e70 <__libc_init_array+0x24>
 8007e5c:	4d0b      	ldr	r5, [pc, #44]	; (8007e8c <__libc_init_array+0x40>)
 8007e5e:	4c0c      	ldr	r4, [pc, #48]	; (8007e90 <__libc_init_array+0x44>)
 8007e60:	f000 fc8e 	bl	8008780 <_init>
 8007e64:	1b64      	subs	r4, r4, r5
 8007e66:	10a4      	asrs	r4, r4, #2
 8007e68:	2600      	movs	r6, #0
 8007e6a:	42a6      	cmp	r6, r4
 8007e6c:	d105      	bne.n	8007e7a <__libc_init_array+0x2e>
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e74:	4798      	blx	r3
 8007e76:	3601      	adds	r6, #1
 8007e78:	e7ee      	b.n	8007e58 <__libc_init_array+0xc>
 8007e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e7e:	4798      	blx	r3
 8007e80:	3601      	adds	r6, #1
 8007e82:	e7f2      	b.n	8007e6a <__libc_init_array+0x1e>
 8007e84:	0800b14c 	.word	0x0800b14c
 8007e88:	0800b14c 	.word	0x0800b14c
 8007e8c:	0800b14c 	.word	0x0800b14c
 8007e90:	0800b150 	.word	0x0800b150

08007e94 <memset>:
 8007e94:	4402      	add	r2, r0
 8007e96:	4603      	mov	r3, r0
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d100      	bne.n	8007e9e <memset+0xa>
 8007e9c:	4770      	bx	lr
 8007e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007ea2:	e7f9      	b.n	8007e98 <memset+0x4>

08007ea4 <siprintf>:
 8007ea4:	b40e      	push	{r1, r2, r3}
 8007ea6:	b500      	push	{lr}
 8007ea8:	b09c      	sub	sp, #112	; 0x70
 8007eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8007eac:	9002      	str	r0, [sp, #8]
 8007eae:	9006      	str	r0, [sp, #24]
 8007eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eb4:	4809      	ldr	r0, [pc, #36]	; (8007edc <siprintf+0x38>)
 8007eb6:	9107      	str	r1, [sp, #28]
 8007eb8:	9104      	str	r1, [sp, #16]
 8007eba:	4909      	ldr	r1, [pc, #36]	; (8007ee0 <siprintf+0x3c>)
 8007ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec0:	9105      	str	r1, [sp, #20]
 8007ec2:	6800      	ldr	r0, [r0, #0]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	a902      	add	r1, sp, #8
 8007ec8:	f000 f868 	bl	8007f9c <_svfiprintf_r>
 8007ecc:	9b02      	ldr	r3, [sp, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	b01c      	add	sp, #112	; 0x70
 8007ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ed8:	b003      	add	sp, #12
 8007eda:	4770      	bx	lr
 8007edc:	2000001c 	.word	0x2000001c
 8007ee0:	ffff0208 	.word	0xffff0208

08007ee4 <__ssputs_r>:
 8007ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee8:	688e      	ldr	r6, [r1, #8]
 8007eea:	429e      	cmp	r6, r3
 8007eec:	4682      	mov	sl, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	4690      	mov	r8, r2
 8007ef2:	461f      	mov	r7, r3
 8007ef4:	d838      	bhi.n	8007f68 <__ssputs_r+0x84>
 8007ef6:	898a      	ldrh	r2, [r1, #12]
 8007ef8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007efc:	d032      	beq.n	8007f64 <__ssputs_r+0x80>
 8007efe:	6825      	ldr	r5, [r4, #0]
 8007f00:	6909      	ldr	r1, [r1, #16]
 8007f02:	eba5 0901 	sub.w	r9, r5, r1
 8007f06:	6965      	ldr	r5, [r4, #20]
 8007f08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f10:	3301      	adds	r3, #1
 8007f12:	444b      	add	r3, r9
 8007f14:	106d      	asrs	r5, r5, #1
 8007f16:	429d      	cmp	r5, r3
 8007f18:	bf38      	it	cc
 8007f1a:	461d      	movcc	r5, r3
 8007f1c:	0553      	lsls	r3, r2, #21
 8007f1e:	d531      	bpl.n	8007f84 <__ssputs_r+0xa0>
 8007f20:	4629      	mov	r1, r5
 8007f22:	f000 fb63 	bl	80085ec <_malloc_r>
 8007f26:	4606      	mov	r6, r0
 8007f28:	b950      	cbnz	r0, 8007f40 <__ssputs_r+0x5c>
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	f8ca 3000 	str.w	r3, [sl]
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f36:	81a3      	strh	r3, [r4, #12]
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f40:	6921      	ldr	r1, [r4, #16]
 8007f42:	464a      	mov	r2, r9
 8007f44:	f000 fabe 	bl	80084c4 <memcpy>
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f52:	81a3      	strh	r3, [r4, #12]
 8007f54:	6126      	str	r6, [r4, #16]
 8007f56:	6165      	str	r5, [r4, #20]
 8007f58:	444e      	add	r6, r9
 8007f5a:	eba5 0509 	sub.w	r5, r5, r9
 8007f5e:	6026      	str	r6, [r4, #0]
 8007f60:	60a5      	str	r5, [r4, #8]
 8007f62:	463e      	mov	r6, r7
 8007f64:	42be      	cmp	r6, r7
 8007f66:	d900      	bls.n	8007f6a <__ssputs_r+0x86>
 8007f68:	463e      	mov	r6, r7
 8007f6a:	6820      	ldr	r0, [r4, #0]
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	4641      	mov	r1, r8
 8007f70:	f000 fab6 	bl	80084e0 <memmove>
 8007f74:	68a3      	ldr	r3, [r4, #8]
 8007f76:	1b9b      	subs	r3, r3, r6
 8007f78:	60a3      	str	r3, [r4, #8]
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	4433      	add	r3, r6
 8007f7e:	6023      	str	r3, [r4, #0]
 8007f80:	2000      	movs	r0, #0
 8007f82:	e7db      	b.n	8007f3c <__ssputs_r+0x58>
 8007f84:	462a      	mov	r2, r5
 8007f86:	f000 fba5 	bl	80086d4 <_realloc_r>
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d1e1      	bne.n	8007f54 <__ssputs_r+0x70>
 8007f90:	6921      	ldr	r1, [r4, #16]
 8007f92:	4650      	mov	r0, sl
 8007f94:	f000 fabe 	bl	8008514 <_free_r>
 8007f98:	e7c7      	b.n	8007f2a <__ssputs_r+0x46>
	...

08007f9c <_svfiprintf_r>:
 8007f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	4698      	mov	r8, r3
 8007fa2:	898b      	ldrh	r3, [r1, #12]
 8007fa4:	061b      	lsls	r3, r3, #24
 8007fa6:	b09d      	sub	sp, #116	; 0x74
 8007fa8:	4607      	mov	r7, r0
 8007faa:	460d      	mov	r5, r1
 8007fac:	4614      	mov	r4, r2
 8007fae:	d50e      	bpl.n	8007fce <_svfiprintf_r+0x32>
 8007fb0:	690b      	ldr	r3, [r1, #16]
 8007fb2:	b963      	cbnz	r3, 8007fce <_svfiprintf_r+0x32>
 8007fb4:	2140      	movs	r1, #64	; 0x40
 8007fb6:	f000 fb19 	bl	80085ec <_malloc_r>
 8007fba:	6028      	str	r0, [r5, #0]
 8007fbc:	6128      	str	r0, [r5, #16]
 8007fbe:	b920      	cbnz	r0, 8007fca <_svfiprintf_r+0x2e>
 8007fc0:	230c      	movs	r3, #12
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc8:	e0d1      	b.n	800816e <_svfiprintf_r+0x1d2>
 8007fca:	2340      	movs	r3, #64	; 0x40
 8007fcc:	616b      	str	r3, [r5, #20]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd2:	2320      	movs	r3, #32
 8007fd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fdc:	2330      	movs	r3, #48	; 0x30
 8007fde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008188 <_svfiprintf_r+0x1ec>
 8007fe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fe6:	f04f 0901 	mov.w	r9, #1
 8007fea:	4623      	mov	r3, r4
 8007fec:	469a      	mov	sl, r3
 8007fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ff2:	b10a      	cbz	r2, 8007ff8 <_svfiprintf_r+0x5c>
 8007ff4:	2a25      	cmp	r2, #37	; 0x25
 8007ff6:	d1f9      	bne.n	8007fec <_svfiprintf_r+0x50>
 8007ff8:	ebba 0b04 	subs.w	fp, sl, r4
 8007ffc:	d00b      	beq.n	8008016 <_svfiprintf_r+0x7a>
 8007ffe:	465b      	mov	r3, fp
 8008000:	4622      	mov	r2, r4
 8008002:	4629      	mov	r1, r5
 8008004:	4638      	mov	r0, r7
 8008006:	f7ff ff6d 	bl	8007ee4 <__ssputs_r>
 800800a:	3001      	adds	r0, #1
 800800c:	f000 80aa 	beq.w	8008164 <_svfiprintf_r+0x1c8>
 8008010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008012:	445a      	add	r2, fp
 8008014:	9209      	str	r2, [sp, #36]	; 0x24
 8008016:	f89a 3000 	ldrb.w	r3, [sl]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 80a2 	beq.w	8008164 <_svfiprintf_r+0x1c8>
 8008020:	2300      	movs	r3, #0
 8008022:	f04f 32ff 	mov.w	r2, #4294967295
 8008026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800802a:	f10a 0a01 	add.w	sl, sl, #1
 800802e:	9304      	str	r3, [sp, #16]
 8008030:	9307      	str	r3, [sp, #28]
 8008032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008036:	931a      	str	r3, [sp, #104]	; 0x68
 8008038:	4654      	mov	r4, sl
 800803a:	2205      	movs	r2, #5
 800803c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008040:	4851      	ldr	r0, [pc, #324]	; (8008188 <_svfiprintf_r+0x1ec>)
 8008042:	f7f8 f8cd 	bl	80001e0 <memchr>
 8008046:	9a04      	ldr	r2, [sp, #16]
 8008048:	b9d8      	cbnz	r0, 8008082 <_svfiprintf_r+0xe6>
 800804a:	06d0      	lsls	r0, r2, #27
 800804c:	bf44      	itt	mi
 800804e:	2320      	movmi	r3, #32
 8008050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008054:	0711      	lsls	r1, r2, #28
 8008056:	bf44      	itt	mi
 8008058:	232b      	movmi	r3, #43	; 0x2b
 800805a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800805e:	f89a 3000 	ldrb.w	r3, [sl]
 8008062:	2b2a      	cmp	r3, #42	; 0x2a
 8008064:	d015      	beq.n	8008092 <_svfiprintf_r+0xf6>
 8008066:	9a07      	ldr	r2, [sp, #28]
 8008068:	4654      	mov	r4, sl
 800806a:	2000      	movs	r0, #0
 800806c:	f04f 0c0a 	mov.w	ip, #10
 8008070:	4621      	mov	r1, r4
 8008072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008076:	3b30      	subs	r3, #48	; 0x30
 8008078:	2b09      	cmp	r3, #9
 800807a:	d94e      	bls.n	800811a <_svfiprintf_r+0x17e>
 800807c:	b1b0      	cbz	r0, 80080ac <_svfiprintf_r+0x110>
 800807e:	9207      	str	r2, [sp, #28]
 8008080:	e014      	b.n	80080ac <_svfiprintf_r+0x110>
 8008082:	eba0 0308 	sub.w	r3, r0, r8
 8008086:	fa09 f303 	lsl.w	r3, r9, r3
 800808a:	4313      	orrs	r3, r2
 800808c:	9304      	str	r3, [sp, #16]
 800808e:	46a2      	mov	sl, r4
 8008090:	e7d2      	b.n	8008038 <_svfiprintf_r+0x9c>
 8008092:	9b03      	ldr	r3, [sp, #12]
 8008094:	1d19      	adds	r1, r3, #4
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	9103      	str	r1, [sp, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	bfbb      	ittet	lt
 800809e:	425b      	neglt	r3, r3
 80080a0:	f042 0202 	orrlt.w	r2, r2, #2
 80080a4:	9307      	strge	r3, [sp, #28]
 80080a6:	9307      	strlt	r3, [sp, #28]
 80080a8:	bfb8      	it	lt
 80080aa:	9204      	strlt	r2, [sp, #16]
 80080ac:	7823      	ldrb	r3, [r4, #0]
 80080ae:	2b2e      	cmp	r3, #46	; 0x2e
 80080b0:	d10c      	bne.n	80080cc <_svfiprintf_r+0x130>
 80080b2:	7863      	ldrb	r3, [r4, #1]
 80080b4:	2b2a      	cmp	r3, #42	; 0x2a
 80080b6:	d135      	bne.n	8008124 <_svfiprintf_r+0x188>
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	1d1a      	adds	r2, r3, #4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	9203      	str	r2, [sp, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bfb8      	it	lt
 80080c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80080c8:	3402      	adds	r4, #2
 80080ca:	9305      	str	r3, [sp, #20]
 80080cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008198 <_svfiprintf_r+0x1fc>
 80080d0:	7821      	ldrb	r1, [r4, #0]
 80080d2:	2203      	movs	r2, #3
 80080d4:	4650      	mov	r0, sl
 80080d6:	f7f8 f883 	bl	80001e0 <memchr>
 80080da:	b140      	cbz	r0, 80080ee <_svfiprintf_r+0x152>
 80080dc:	2340      	movs	r3, #64	; 0x40
 80080de:	eba0 000a 	sub.w	r0, r0, sl
 80080e2:	fa03 f000 	lsl.w	r0, r3, r0
 80080e6:	9b04      	ldr	r3, [sp, #16]
 80080e8:	4303      	orrs	r3, r0
 80080ea:	3401      	adds	r4, #1
 80080ec:	9304      	str	r3, [sp, #16]
 80080ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f2:	4826      	ldr	r0, [pc, #152]	; (800818c <_svfiprintf_r+0x1f0>)
 80080f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080f8:	2206      	movs	r2, #6
 80080fa:	f7f8 f871 	bl	80001e0 <memchr>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d038      	beq.n	8008174 <_svfiprintf_r+0x1d8>
 8008102:	4b23      	ldr	r3, [pc, #140]	; (8008190 <_svfiprintf_r+0x1f4>)
 8008104:	bb1b      	cbnz	r3, 800814e <_svfiprintf_r+0x1b2>
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	3307      	adds	r3, #7
 800810a:	f023 0307 	bic.w	r3, r3, #7
 800810e:	3308      	adds	r3, #8
 8008110:	9303      	str	r3, [sp, #12]
 8008112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008114:	4433      	add	r3, r6
 8008116:	9309      	str	r3, [sp, #36]	; 0x24
 8008118:	e767      	b.n	8007fea <_svfiprintf_r+0x4e>
 800811a:	fb0c 3202 	mla	r2, ip, r2, r3
 800811e:	460c      	mov	r4, r1
 8008120:	2001      	movs	r0, #1
 8008122:	e7a5      	b.n	8008070 <_svfiprintf_r+0xd4>
 8008124:	2300      	movs	r3, #0
 8008126:	3401      	adds	r4, #1
 8008128:	9305      	str	r3, [sp, #20]
 800812a:	4619      	mov	r1, r3
 800812c:	f04f 0c0a 	mov.w	ip, #10
 8008130:	4620      	mov	r0, r4
 8008132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008136:	3a30      	subs	r2, #48	; 0x30
 8008138:	2a09      	cmp	r2, #9
 800813a:	d903      	bls.n	8008144 <_svfiprintf_r+0x1a8>
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0c5      	beq.n	80080cc <_svfiprintf_r+0x130>
 8008140:	9105      	str	r1, [sp, #20]
 8008142:	e7c3      	b.n	80080cc <_svfiprintf_r+0x130>
 8008144:	fb0c 2101 	mla	r1, ip, r1, r2
 8008148:	4604      	mov	r4, r0
 800814a:	2301      	movs	r3, #1
 800814c:	e7f0      	b.n	8008130 <_svfiprintf_r+0x194>
 800814e:	ab03      	add	r3, sp, #12
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	462a      	mov	r2, r5
 8008154:	4b0f      	ldr	r3, [pc, #60]	; (8008194 <_svfiprintf_r+0x1f8>)
 8008156:	a904      	add	r1, sp, #16
 8008158:	4638      	mov	r0, r7
 800815a:	f3af 8000 	nop.w
 800815e:	1c42      	adds	r2, r0, #1
 8008160:	4606      	mov	r6, r0
 8008162:	d1d6      	bne.n	8008112 <_svfiprintf_r+0x176>
 8008164:	89ab      	ldrh	r3, [r5, #12]
 8008166:	065b      	lsls	r3, r3, #25
 8008168:	f53f af2c 	bmi.w	8007fc4 <_svfiprintf_r+0x28>
 800816c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800816e:	b01d      	add	sp, #116	; 0x74
 8008170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008174:	ab03      	add	r3, sp, #12
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	462a      	mov	r2, r5
 800817a:	4b06      	ldr	r3, [pc, #24]	; (8008194 <_svfiprintf_r+0x1f8>)
 800817c:	a904      	add	r1, sp, #16
 800817e:	4638      	mov	r0, r7
 8008180:	f000 f87a 	bl	8008278 <_printf_i>
 8008184:	e7eb      	b.n	800815e <_svfiprintf_r+0x1c2>
 8008186:	bf00      	nop
 8008188:	0800b110 	.word	0x0800b110
 800818c:	0800b11a 	.word	0x0800b11a
 8008190:	00000000 	.word	0x00000000
 8008194:	08007ee5 	.word	0x08007ee5
 8008198:	0800b116 	.word	0x0800b116

0800819c <_printf_common>:
 800819c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a0:	4616      	mov	r6, r2
 80081a2:	4699      	mov	r9, r3
 80081a4:	688a      	ldr	r2, [r1, #8]
 80081a6:	690b      	ldr	r3, [r1, #16]
 80081a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	bfb8      	it	lt
 80081b0:	4613      	movlt	r3, r2
 80081b2:	6033      	str	r3, [r6, #0]
 80081b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081b8:	4607      	mov	r7, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	b10a      	cbz	r2, 80081c2 <_printf_common+0x26>
 80081be:	3301      	adds	r3, #1
 80081c0:	6033      	str	r3, [r6, #0]
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	0699      	lsls	r1, r3, #26
 80081c6:	bf42      	ittt	mi
 80081c8:	6833      	ldrmi	r3, [r6, #0]
 80081ca:	3302      	addmi	r3, #2
 80081cc:	6033      	strmi	r3, [r6, #0]
 80081ce:	6825      	ldr	r5, [r4, #0]
 80081d0:	f015 0506 	ands.w	r5, r5, #6
 80081d4:	d106      	bne.n	80081e4 <_printf_common+0x48>
 80081d6:	f104 0a19 	add.w	sl, r4, #25
 80081da:	68e3      	ldr	r3, [r4, #12]
 80081dc:	6832      	ldr	r2, [r6, #0]
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	dc26      	bgt.n	8008232 <_printf_common+0x96>
 80081e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081e8:	1e13      	subs	r3, r2, #0
 80081ea:	6822      	ldr	r2, [r4, #0]
 80081ec:	bf18      	it	ne
 80081ee:	2301      	movne	r3, #1
 80081f0:	0692      	lsls	r2, r2, #26
 80081f2:	d42b      	bmi.n	800824c <_printf_common+0xb0>
 80081f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081f8:	4649      	mov	r1, r9
 80081fa:	4638      	mov	r0, r7
 80081fc:	47c0      	blx	r8
 80081fe:	3001      	adds	r0, #1
 8008200:	d01e      	beq.n	8008240 <_printf_common+0xa4>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	68e5      	ldr	r5, [r4, #12]
 8008206:	6832      	ldr	r2, [r6, #0]
 8008208:	f003 0306 	and.w	r3, r3, #6
 800820c:	2b04      	cmp	r3, #4
 800820e:	bf08      	it	eq
 8008210:	1aad      	subeq	r5, r5, r2
 8008212:	68a3      	ldr	r3, [r4, #8]
 8008214:	6922      	ldr	r2, [r4, #16]
 8008216:	bf0c      	ite	eq
 8008218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800821c:	2500      	movne	r5, #0
 800821e:	4293      	cmp	r3, r2
 8008220:	bfc4      	itt	gt
 8008222:	1a9b      	subgt	r3, r3, r2
 8008224:	18ed      	addgt	r5, r5, r3
 8008226:	2600      	movs	r6, #0
 8008228:	341a      	adds	r4, #26
 800822a:	42b5      	cmp	r5, r6
 800822c:	d11a      	bne.n	8008264 <_printf_common+0xc8>
 800822e:	2000      	movs	r0, #0
 8008230:	e008      	b.n	8008244 <_printf_common+0xa8>
 8008232:	2301      	movs	r3, #1
 8008234:	4652      	mov	r2, sl
 8008236:	4649      	mov	r1, r9
 8008238:	4638      	mov	r0, r7
 800823a:	47c0      	blx	r8
 800823c:	3001      	adds	r0, #1
 800823e:	d103      	bne.n	8008248 <_printf_common+0xac>
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008248:	3501      	adds	r5, #1
 800824a:	e7c6      	b.n	80081da <_printf_common+0x3e>
 800824c:	18e1      	adds	r1, r4, r3
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	2030      	movs	r0, #48	; 0x30
 8008252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008256:	4422      	add	r2, r4
 8008258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800825c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008260:	3302      	adds	r3, #2
 8008262:	e7c7      	b.n	80081f4 <_printf_common+0x58>
 8008264:	2301      	movs	r3, #1
 8008266:	4622      	mov	r2, r4
 8008268:	4649      	mov	r1, r9
 800826a:	4638      	mov	r0, r7
 800826c:	47c0      	blx	r8
 800826e:	3001      	adds	r0, #1
 8008270:	d0e6      	beq.n	8008240 <_printf_common+0xa4>
 8008272:	3601      	adds	r6, #1
 8008274:	e7d9      	b.n	800822a <_printf_common+0x8e>
	...

08008278 <_printf_i>:
 8008278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	7e0f      	ldrb	r7, [r1, #24]
 800827e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008280:	2f78      	cmp	r7, #120	; 0x78
 8008282:	4691      	mov	r9, r2
 8008284:	4680      	mov	r8, r0
 8008286:	460c      	mov	r4, r1
 8008288:	469a      	mov	sl, r3
 800828a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800828e:	d807      	bhi.n	80082a0 <_printf_i+0x28>
 8008290:	2f62      	cmp	r7, #98	; 0x62
 8008292:	d80a      	bhi.n	80082aa <_printf_i+0x32>
 8008294:	2f00      	cmp	r7, #0
 8008296:	f000 80d8 	beq.w	800844a <_printf_i+0x1d2>
 800829a:	2f58      	cmp	r7, #88	; 0x58
 800829c:	f000 80a3 	beq.w	80083e6 <_printf_i+0x16e>
 80082a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082a8:	e03a      	b.n	8008320 <_printf_i+0xa8>
 80082aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082ae:	2b15      	cmp	r3, #21
 80082b0:	d8f6      	bhi.n	80082a0 <_printf_i+0x28>
 80082b2:	a101      	add	r1, pc, #4	; (adr r1, 80082b8 <_printf_i+0x40>)
 80082b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082b8:	08008311 	.word	0x08008311
 80082bc:	08008325 	.word	0x08008325
 80082c0:	080082a1 	.word	0x080082a1
 80082c4:	080082a1 	.word	0x080082a1
 80082c8:	080082a1 	.word	0x080082a1
 80082cc:	080082a1 	.word	0x080082a1
 80082d0:	08008325 	.word	0x08008325
 80082d4:	080082a1 	.word	0x080082a1
 80082d8:	080082a1 	.word	0x080082a1
 80082dc:	080082a1 	.word	0x080082a1
 80082e0:	080082a1 	.word	0x080082a1
 80082e4:	08008431 	.word	0x08008431
 80082e8:	08008355 	.word	0x08008355
 80082ec:	08008413 	.word	0x08008413
 80082f0:	080082a1 	.word	0x080082a1
 80082f4:	080082a1 	.word	0x080082a1
 80082f8:	08008453 	.word	0x08008453
 80082fc:	080082a1 	.word	0x080082a1
 8008300:	08008355 	.word	0x08008355
 8008304:	080082a1 	.word	0x080082a1
 8008308:	080082a1 	.word	0x080082a1
 800830c:	0800841b 	.word	0x0800841b
 8008310:	682b      	ldr	r3, [r5, #0]
 8008312:	1d1a      	adds	r2, r3, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	602a      	str	r2, [r5, #0]
 8008318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800831c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008320:	2301      	movs	r3, #1
 8008322:	e0a3      	b.n	800846c <_printf_i+0x1f4>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	6829      	ldr	r1, [r5, #0]
 8008328:	0606      	lsls	r6, r0, #24
 800832a:	f101 0304 	add.w	r3, r1, #4
 800832e:	d50a      	bpl.n	8008346 <_printf_i+0xce>
 8008330:	680e      	ldr	r6, [r1, #0]
 8008332:	602b      	str	r3, [r5, #0]
 8008334:	2e00      	cmp	r6, #0
 8008336:	da03      	bge.n	8008340 <_printf_i+0xc8>
 8008338:	232d      	movs	r3, #45	; 0x2d
 800833a:	4276      	negs	r6, r6
 800833c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008340:	485e      	ldr	r0, [pc, #376]	; (80084bc <_printf_i+0x244>)
 8008342:	230a      	movs	r3, #10
 8008344:	e019      	b.n	800837a <_printf_i+0x102>
 8008346:	680e      	ldr	r6, [r1, #0]
 8008348:	602b      	str	r3, [r5, #0]
 800834a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800834e:	bf18      	it	ne
 8008350:	b236      	sxthne	r6, r6
 8008352:	e7ef      	b.n	8008334 <_printf_i+0xbc>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	6820      	ldr	r0, [r4, #0]
 8008358:	1d19      	adds	r1, r3, #4
 800835a:	6029      	str	r1, [r5, #0]
 800835c:	0601      	lsls	r1, r0, #24
 800835e:	d501      	bpl.n	8008364 <_printf_i+0xec>
 8008360:	681e      	ldr	r6, [r3, #0]
 8008362:	e002      	b.n	800836a <_printf_i+0xf2>
 8008364:	0646      	lsls	r6, r0, #25
 8008366:	d5fb      	bpl.n	8008360 <_printf_i+0xe8>
 8008368:	881e      	ldrh	r6, [r3, #0]
 800836a:	4854      	ldr	r0, [pc, #336]	; (80084bc <_printf_i+0x244>)
 800836c:	2f6f      	cmp	r7, #111	; 0x6f
 800836e:	bf0c      	ite	eq
 8008370:	2308      	moveq	r3, #8
 8008372:	230a      	movne	r3, #10
 8008374:	2100      	movs	r1, #0
 8008376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800837a:	6865      	ldr	r5, [r4, #4]
 800837c:	60a5      	str	r5, [r4, #8]
 800837e:	2d00      	cmp	r5, #0
 8008380:	bfa2      	ittt	ge
 8008382:	6821      	ldrge	r1, [r4, #0]
 8008384:	f021 0104 	bicge.w	r1, r1, #4
 8008388:	6021      	strge	r1, [r4, #0]
 800838a:	b90e      	cbnz	r6, 8008390 <_printf_i+0x118>
 800838c:	2d00      	cmp	r5, #0
 800838e:	d04d      	beq.n	800842c <_printf_i+0x1b4>
 8008390:	4615      	mov	r5, r2
 8008392:	fbb6 f1f3 	udiv	r1, r6, r3
 8008396:	fb03 6711 	mls	r7, r3, r1, r6
 800839a:	5dc7      	ldrb	r7, [r0, r7]
 800839c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083a0:	4637      	mov	r7, r6
 80083a2:	42bb      	cmp	r3, r7
 80083a4:	460e      	mov	r6, r1
 80083a6:	d9f4      	bls.n	8008392 <_printf_i+0x11a>
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	d10b      	bne.n	80083c4 <_printf_i+0x14c>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	07de      	lsls	r6, r3, #31
 80083b0:	d508      	bpl.n	80083c4 <_printf_i+0x14c>
 80083b2:	6923      	ldr	r3, [r4, #16]
 80083b4:	6861      	ldr	r1, [r4, #4]
 80083b6:	4299      	cmp	r1, r3
 80083b8:	bfde      	ittt	le
 80083ba:	2330      	movle	r3, #48	; 0x30
 80083bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083c4:	1b52      	subs	r2, r2, r5
 80083c6:	6122      	str	r2, [r4, #16]
 80083c8:	f8cd a000 	str.w	sl, [sp]
 80083cc:	464b      	mov	r3, r9
 80083ce:	aa03      	add	r2, sp, #12
 80083d0:	4621      	mov	r1, r4
 80083d2:	4640      	mov	r0, r8
 80083d4:	f7ff fee2 	bl	800819c <_printf_common>
 80083d8:	3001      	adds	r0, #1
 80083da:	d14c      	bne.n	8008476 <_printf_i+0x1fe>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	b004      	add	sp, #16
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	4835      	ldr	r0, [pc, #212]	; (80084bc <_printf_i+0x244>)
 80083e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083ec:	6829      	ldr	r1, [r5, #0]
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80083f4:	6029      	str	r1, [r5, #0]
 80083f6:	061d      	lsls	r5, r3, #24
 80083f8:	d514      	bpl.n	8008424 <_printf_i+0x1ac>
 80083fa:	07df      	lsls	r7, r3, #31
 80083fc:	bf44      	itt	mi
 80083fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008402:	6023      	strmi	r3, [r4, #0]
 8008404:	b91e      	cbnz	r6, 800840e <_printf_i+0x196>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	f023 0320 	bic.w	r3, r3, #32
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	2310      	movs	r3, #16
 8008410:	e7b0      	b.n	8008374 <_printf_i+0xfc>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	f043 0320 	orr.w	r3, r3, #32
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	2378      	movs	r3, #120	; 0x78
 800841c:	4828      	ldr	r0, [pc, #160]	; (80084c0 <_printf_i+0x248>)
 800841e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008422:	e7e3      	b.n	80083ec <_printf_i+0x174>
 8008424:	0659      	lsls	r1, r3, #25
 8008426:	bf48      	it	mi
 8008428:	b2b6      	uxthmi	r6, r6
 800842a:	e7e6      	b.n	80083fa <_printf_i+0x182>
 800842c:	4615      	mov	r5, r2
 800842e:	e7bb      	b.n	80083a8 <_printf_i+0x130>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	6826      	ldr	r6, [r4, #0]
 8008434:	6961      	ldr	r1, [r4, #20]
 8008436:	1d18      	adds	r0, r3, #4
 8008438:	6028      	str	r0, [r5, #0]
 800843a:	0635      	lsls	r5, r6, #24
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	d501      	bpl.n	8008444 <_printf_i+0x1cc>
 8008440:	6019      	str	r1, [r3, #0]
 8008442:	e002      	b.n	800844a <_printf_i+0x1d2>
 8008444:	0670      	lsls	r0, r6, #25
 8008446:	d5fb      	bpl.n	8008440 <_printf_i+0x1c8>
 8008448:	8019      	strh	r1, [r3, #0]
 800844a:	2300      	movs	r3, #0
 800844c:	6123      	str	r3, [r4, #16]
 800844e:	4615      	mov	r5, r2
 8008450:	e7ba      	b.n	80083c8 <_printf_i+0x150>
 8008452:	682b      	ldr	r3, [r5, #0]
 8008454:	1d1a      	adds	r2, r3, #4
 8008456:	602a      	str	r2, [r5, #0]
 8008458:	681d      	ldr	r5, [r3, #0]
 800845a:	6862      	ldr	r2, [r4, #4]
 800845c:	2100      	movs	r1, #0
 800845e:	4628      	mov	r0, r5
 8008460:	f7f7 febe 	bl	80001e0 <memchr>
 8008464:	b108      	cbz	r0, 800846a <_printf_i+0x1f2>
 8008466:	1b40      	subs	r0, r0, r5
 8008468:	6060      	str	r0, [r4, #4]
 800846a:	6863      	ldr	r3, [r4, #4]
 800846c:	6123      	str	r3, [r4, #16]
 800846e:	2300      	movs	r3, #0
 8008470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008474:	e7a8      	b.n	80083c8 <_printf_i+0x150>
 8008476:	6923      	ldr	r3, [r4, #16]
 8008478:	462a      	mov	r2, r5
 800847a:	4649      	mov	r1, r9
 800847c:	4640      	mov	r0, r8
 800847e:	47d0      	blx	sl
 8008480:	3001      	adds	r0, #1
 8008482:	d0ab      	beq.n	80083dc <_printf_i+0x164>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	079b      	lsls	r3, r3, #30
 8008488:	d413      	bmi.n	80084b2 <_printf_i+0x23a>
 800848a:	68e0      	ldr	r0, [r4, #12]
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	4298      	cmp	r0, r3
 8008490:	bfb8      	it	lt
 8008492:	4618      	movlt	r0, r3
 8008494:	e7a4      	b.n	80083e0 <_printf_i+0x168>
 8008496:	2301      	movs	r3, #1
 8008498:	4632      	mov	r2, r6
 800849a:	4649      	mov	r1, r9
 800849c:	4640      	mov	r0, r8
 800849e:	47d0      	blx	sl
 80084a0:	3001      	adds	r0, #1
 80084a2:	d09b      	beq.n	80083dc <_printf_i+0x164>
 80084a4:	3501      	adds	r5, #1
 80084a6:	68e3      	ldr	r3, [r4, #12]
 80084a8:	9903      	ldr	r1, [sp, #12]
 80084aa:	1a5b      	subs	r3, r3, r1
 80084ac:	42ab      	cmp	r3, r5
 80084ae:	dcf2      	bgt.n	8008496 <_printf_i+0x21e>
 80084b0:	e7eb      	b.n	800848a <_printf_i+0x212>
 80084b2:	2500      	movs	r5, #0
 80084b4:	f104 0619 	add.w	r6, r4, #25
 80084b8:	e7f5      	b.n	80084a6 <_printf_i+0x22e>
 80084ba:	bf00      	nop
 80084bc:	0800b121 	.word	0x0800b121
 80084c0:	0800b132 	.word	0x0800b132

080084c4 <memcpy>:
 80084c4:	440a      	add	r2, r1
 80084c6:	4291      	cmp	r1, r2
 80084c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084cc:	d100      	bne.n	80084d0 <memcpy+0xc>
 80084ce:	4770      	bx	lr
 80084d0:	b510      	push	{r4, lr}
 80084d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084da:	4291      	cmp	r1, r2
 80084dc:	d1f9      	bne.n	80084d2 <memcpy+0xe>
 80084de:	bd10      	pop	{r4, pc}

080084e0 <memmove>:
 80084e0:	4288      	cmp	r0, r1
 80084e2:	b510      	push	{r4, lr}
 80084e4:	eb01 0402 	add.w	r4, r1, r2
 80084e8:	d902      	bls.n	80084f0 <memmove+0x10>
 80084ea:	4284      	cmp	r4, r0
 80084ec:	4623      	mov	r3, r4
 80084ee:	d807      	bhi.n	8008500 <memmove+0x20>
 80084f0:	1e43      	subs	r3, r0, #1
 80084f2:	42a1      	cmp	r1, r4
 80084f4:	d008      	beq.n	8008508 <memmove+0x28>
 80084f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084fe:	e7f8      	b.n	80084f2 <memmove+0x12>
 8008500:	4402      	add	r2, r0
 8008502:	4601      	mov	r1, r0
 8008504:	428a      	cmp	r2, r1
 8008506:	d100      	bne.n	800850a <memmove+0x2a>
 8008508:	bd10      	pop	{r4, pc}
 800850a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800850e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008512:	e7f7      	b.n	8008504 <memmove+0x24>

08008514 <_free_r>:
 8008514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008516:	2900      	cmp	r1, #0
 8008518:	d044      	beq.n	80085a4 <_free_r+0x90>
 800851a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800851e:	9001      	str	r0, [sp, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	f1a1 0404 	sub.w	r4, r1, #4
 8008526:	bfb8      	it	lt
 8008528:	18e4      	addlt	r4, r4, r3
 800852a:	f000 f913 	bl	8008754 <__malloc_lock>
 800852e:	4a1e      	ldr	r2, [pc, #120]	; (80085a8 <_free_r+0x94>)
 8008530:	9801      	ldr	r0, [sp, #4]
 8008532:	6813      	ldr	r3, [r2, #0]
 8008534:	b933      	cbnz	r3, 8008544 <_free_r+0x30>
 8008536:	6063      	str	r3, [r4, #4]
 8008538:	6014      	str	r4, [r2, #0]
 800853a:	b003      	add	sp, #12
 800853c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008540:	f000 b90e 	b.w	8008760 <__malloc_unlock>
 8008544:	42a3      	cmp	r3, r4
 8008546:	d908      	bls.n	800855a <_free_r+0x46>
 8008548:	6825      	ldr	r5, [r4, #0]
 800854a:	1961      	adds	r1, r4, r5
 800854c:	428b      	cmp	r3, r1
 800854e:	bf01      	itttt	eq
 8008550:	6819      	ldreq	r1, [r3, #0]
 8008552:	685b      	ldreq	r3, [r3, #4]
 8008554:	1949      	addeq	r1, r1, r5
 8008556:	6021      	streq	r1, [r4, #0]
 8008558:	e7ed      	b.n	8008536 <_free_r+0x22>
 800855a:	461a      	mov	r2, r3
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	b10b      	cbz	r3, 8008564 <_free_r+0x50>
 8008560:	42a3      	cmp	r3, r4
 8008562:	d9fa      	bls.n	800855a <_free_r+0x46>
 8008564:	6811      	ldr	r1, [r2, #0]
 8008566:	1855      	adds	r5, r2, r1
 8008568:	42a5      	cmp	r5, r4
 800856a:	d10b      	bne.n	8008584 <_free_r+0x70>
 800856c:	6824      	ldr	r4, [r4, #0]
 800856e:	4421      	add	r1, r4
 8008570:	1854      	adds	r4, r2, r1
 8008572:	42a3      	cmp	r3, r4
 8008574:	6011      	str	r1, [r2, #0]
 8008576:	d1e0      	bne.n	800853a <_free_r+0x26>
 8008578:	681c      	ldr	r4, [r3, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	6053      	str	r3, [r2, #4]
 800857e:	4421      	add	r1, r4
 8008580:	6011      	str	r1, [r2, #0]
 8008582:	e7da      	b.n	800853a <_free_r+0x26>
 8008584:	d902      	bls.n	800858c <_free_r+0x78>
 8008586:	230c      	movs	r3, #12
 8008588:	6003      	str	r3, [r0, #0]
 800858a:	e7d6      	b.n	800853a <_free_r+0x26>
 800858c:	6825      	ldr	r5, [r4, #0]
 800858e:	1961      	adds	r1, r4, r5
 8008590:	428b      	cmp	r3, r1
 8008592:	bf04      	itt	eq
 8008594:	6819      	ldreq	r1, [r3, #0]
 8008596:	685b      	ldreq	r3, [r3, #4]
 8008598:	6063      	str	r3, [r4, #4]
 800859a:	bf04      	itt	eq
 800859c:	1949      	addeq	r1, r1, r5
 800859e:	6021      	streq	r1, [r4, #0]
 80085a0:	6054      	str	r4, [r2, #4]
 80085a2:	e7ca      	b.n	800853a <_free_r+0x26>
 80085a4:	b003      	add	sp, #12
 80085a6:	bd30      	pop	{r4, r5, pc}
 80085a8:	200007ec 	.word	0x200007ec

080085ac <sbrk_aligned>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	4e0e      	ldr	r6, [pc, #56]	; (80085e8 <sbrk_aligned+0x3c>)
 80085b0:	460c      	mov	r4, r1
 80085b2:	6831      	ldr	r1, [r6, #0]
 80085b4:	4605      	mov	r5, r0
 80085b6:	b911      	cbnz	r1, 80085be <sbrk_aligned+0x12>
 80085b8:	f000 f8bc 	bl	8008734 <_sbrk_r>
 80085bc:	6030      	str	r0, [r6, #0]
 80085be:	4621      	mov	r1, r4
 80085c0:	4628      	mov	r0, r5
 80085c2:	f000 f8b7 	bl	8008734 <_sbrk_r>
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	d00a      	beq.n	80085e0 <sbrk_aligned+0x34>
 80085ca:	1cc4      	adds	r4, r0, #3
 80085cc:	f024 0403 	bic.w	r4, r4, #3
 80085d0:	42a0      	cmp	r0, r4
 80085d2:	d007      	beq.n	80085e4 <sbrk_aligned+0x38>
 80085d4:	1a21      	subs	r1, r4, r0
 80085d6:	4628      	mov	r0, r5
 80085d8:	f000 f8ac 	bl	8008734 <_sbrk_r>
 80085dc:	3001      	adds	r0, #1
 80085de:	d101      	bne.n	80085e4 <sbrk_aligned+0x38>
 80085e0:	f04f 34ff 	mov.w	r4, #4294967295
 80085e4:	4620      	mov	r0, r4
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	200007f0 	.word	0x200007f0

080085ec <_malloc_r>:
 80085ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f0:	1ccd      	adds	r5, r1, #3
 80085f2:	f025 0503 	bic.w	r5, r5, #3
 80085f6:	3508      	adds	r5, #8
 80085f8:	2d0c      	cmp	r5, #12
 80085fa:	bf38      	it	cc
 80085fc:	250c      	movcc	r5, #12
 80085fe:	2d00      	cmp	r5, #0
 8008600:	4607      	mov	r7, r0
 8008602:	db01      	blt.n	8008608 <_malloc_r+0x1c>
 8008604:	42a9      	cmp	r1, r5
 8008606:	d905      	bls.n	8008614 <_malloc_r+0x28>
 8008608:	230c      	movs	r3, #12
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	2600      	movs	r6, #0
 800860e:	4630      	mov	r0, r6
 8008610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008614:	4e2e      	ldr	r6, [pc, #184]	; (80086d0 <_malloc_r+0xe4>)
 8008616:	f000 f89d 	bl	8008754 <__malloc_lock>
 800861a:	6833      	ldr	r3, [r6, #0]
 800861c:	461c      	mov	r4, r3
 800861e:	bb34      	cbnz	r4, 800866e <_malloc_r+0x82>
 8008620:	4629      	mov	r1, r5
 8008622:	4638      	mov	r0, r7
 8008624:	f7ff ffc2 	bl	80085ac <sbrk_aligned>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	4604      	mov	r4, r0
 800862c:	d14d      	bne.n	80086ca <_malloc_r+0xde>
 800862e:	6834      	ldr	r4, [r6, #0]
 8008630:	4626      	mov	r6, r4
 8008632:	2e00      	cmp	r6, #0
 8008634:	d140      	bne.n	80086b8 <_malloc_r+0xcc>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	4631      	mov	r1, r6
 800863a:	4638      	mov	r0, r7
 800863c:	eb04 0803 	add.w	r8, r4, r3
 8008640:	f000 f878 	bl	8008734 <_sbrk_r>
 8008644:	4580      	cmp	r8, r0
 8008646:	d13a      	bne.n	80086be <_malloc_r+0xd2>
 8008648:	6821      	ldr	r1, [r4, #0]
 800864a:	3503      	adds	r5, #3
 800864c:	1a6d      	subs	r5, r5, r1
 800864e:	f025 0503 	bic.w	r5, r5, #3
 8008652:	3508      	adds	r5, #8
 8008654:	2d0c      	cmp	r5, #12
 8008656:	bf38      	it	cc
 8008658:	250c      	movcc	r5, #12
 800865a:	4629      	mov	r1, r5
 800865c:	4638      	mov	r0, r7
 800865e:	f7ff ffa5 	bl	80085ac <sbrk_aligned>
 8008662:	3001      	adds	r0, #1
 8008664:	d02b      	beq.n	80086be <_malloc_r+0xd2>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	442b      	add	r3, r5
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	e00e      	b.n	800868c <_malloc_r+0xa0>
 800866e:	6822      	ldr	r2, [r4, #0]
 8008670:	1b52      	subs	r2, r2, r5
 8008672:	d41e      	bmi.n	80086b2 <_malloc_r+0xc6>
 8008674:	2a0b      	cmp	r2, #11
 8008676:	d916      	bls.n	80086a6 <_malloc_r+0xba>
 8008678:	1961      	adds	r1, r4, r5
 800867a:	42a3      	cmp	r3, r4
 800867c:	6025      	str	r5, [r4, #0]
 800867e:	bf18      	it	ne
 8008680:	6059      	strne	r1, [r3, #4]
 8008682:	6863      	ldr	r3, [r4, #4]
 8008684:	bf08      	it	eq
 8008686:	6031      	streq	r1, [r6, #0]
 8008688:	5162      	str	r2, [r4, r5]
 800868a:	604b      	str	r3, [r1, #4]
 800868c:	4638      	mov	r0, r7
 800868e:	f104 060b 	add.w	r6, r4, #11
 8008692:	f000 f865 	bl	8008760 <__malloc_unlock>
 8008696:	f026 0607 	bic.w	r6, r6, #7
 800869a:	1d23      	adds	r3, r4, #4
 800869c:	1af2      	subs	r2, r6, r3
 800869e:	d0b6      	beq.n	800860e <_malloc_r+0x22>
 80086a0:	1b9b      	subs	r3, r3, r6
 80086a2:	50a3      	str	r3, [r4, r2]
 80086a4:	e7b3      	b.n	800860e <_malloc_r+0x22>
 80086a6:	6862      	ldr	r2, [r4, #4]
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	bf0c      	ite	eq
 80086ac:	6032      	streq	r2, [r6, #0]
 80086ae:	605a      	strne	r2, [r3, #4]
 80086b0:	e7ec      	b.n	800868c <_malloc_r+0xa0>
 80086b2:	4623      	mov	r3, r4
 80086b4:	6864      	ldr	r4, [r4, #4]
 80086b6:	e7b2      	b.n	800861e <_malloc_r+0x32>
 80086b8:	4634      	mov	r4, r6
 80086ba:	6876      	ldr	r6, [r6, #4]
 80086bc:	e7b9      	b.n	8008632 <_malloc_r+0x46>
 80086be:	230c      	movs	r3, #12
 80086c0:	603b      	str	r3, [r7, #0]
 80086c2:	4638      	mov	r0, r7
 80086c4:	f000 f84c 	bl	8008760 <__malloc_unlock>
 80086c8:	e7a1      	b.n	800860e <_malloc_r+0x22>
 80086ca:	6025      	str	r5, [r4, #0]
 80086cc:	e7de      	b.n	800868c <_malloc_r+0xa0>
 80086ce:	bf00      	nop
 80086d0:	200007ec 	.word	0x200007ec

080086d4 <_realloc_r>:
 80086d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d8:	4680      	mov	r8, r0
 80086da:	4614      	mov	r4, r2
 80086dc:	460e      	mov	r6, r1
 80086de:	b921      	cbnz	r1, 80086ea <_realloc_r+0x16>
 80086e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086e4:	4611      	mov	r1, r2
 80086e6:	f7ff bf81 	b.w	80085ec <_malloc_r>
 80086ea:	b92a      	cbnz	r2, 80086f8 <_realloc_r+0x24>
 80086ec:	f7ff ff12 	bl	8008514 <_free_r>
 80086f0:	4625      	mov	r5, r4
 80086f2:	4628      	mov	r0, r5
 80086f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f8:	f000 f838 	bl	800876c <_malloc_usable_size_r>
 80086fc:	4284      	cmp	r4, r0
 80086fe:	4607      	mov	r7, r0
 8008700:	d802      	bhi.n	8008708 <_realloc_r+0x34>
 8008702:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008706:	d812      	bhi.n	800872e <_realloc_r+0x5a>
 8008708:	4621      	mov	r1, r4
 800870a:	4640      	mov	r0, r8
 800870c:	f7ff ff6e 	bl	80085ec <_malloc_r>
 8008710:	4605      	mov	r5, r0
 8008712:	2800      	cmp	r0, #0
 8008714:	d0ed      	beq.n	80086f2 <_realloc_r+0x1e>
 8008716:	42bc      	cmp	r4, r7
 8008718:	4622      	mov	r2, r4
 800871a:	4631      	mov	r1, r6
 800871c:	bf28      	it	cs
 800871e:	463a      	movcs	r2, r7
 8008720:	f7ff fed0 	bl	80084c4 <memcpy>
 8008724:	4631      	mov	r1, r6
 8008726:	4640      	mov	r0, r8
 8008728:	f7ff fef4 	bl	8008514 <_free_r>
 800872c:	e7e1      	b.n	80086f2 <_realloc_r+0x1e>
 800872e:	4635      	mov	r5, r6
 8008730:	e7df      	b.n	80086f2 <_realloc_r+0x1e>
	...

08008734 <_sbrk_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d06      	ldr	r5, [pc, #24]	; (8008750 <_sbrk_r+0x1c>)
 8008738:	2300      	movs	r3, #0
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	602b      	str	r3, [r5, #0]
 8008740:	f7fa fd0a 	bl	8003158 <_sbrk>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_sbrk_r+0x1a>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_sbrk_r+0x1a>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	200007f4 	.word	0x200007f4

08008754 <__malloc_lock>:
 8008754:	4801      	ldr	r0, [pc, #4]	; (800875c <__malloc_lock+0x8>)
 8008756:	f000 b811 	b.w	800877c <__retarget_lock_acquire_recursive>
 800875a:	bf00      	nop
 800875c:	200007f8 	.word	0x200007f8

08008760 <__malloc_unlock>:
 8008760:	4801      	ldr	r0, [pc, #4]	; (8008768 <__malloc_unlock+0x8>)
 8008762:	f000 b80c 	b.w	800877e <__retarget_lock_release_recursive>
 8008766:	bf00      	nop
 8008768:	200007f8 	.word	0x200007f8

0800876c <_malloc_usable_size_r>:
 800876c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008770:	1f18      	subs	r0, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	bfbc      	itt	lt
 8008776:	580b      	ldrlt	r3, [r1, r0]
 8008778:	18c0      	addlt	r0, r0, r3
 800877a:	4770      	bx	lr

0800877c <__retarget_lock_acquire_recursive>:
 800877c:	4770      	bx	lr

0800877e <__retarget_lock_release_recursive>:
 800877e:	4770      	bx	lr

08008780 <_init>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	bf00      	nop
 8008784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008786:	bc08      	pop	{r3}
 8008788:	469e      	mov	lr, r3
 800878a:	4770      	bx	lr

0800878c <_fini>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	bf00      	nop
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr
